<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Lippi-浮生志</title>
 <link href="http://http://coolshell.info/atom.xml" rel="self"/>
 <link href="http://http://coolshell.info"/>
 <updated>2016-07-27T13:15:16+00:00</updated>
 <author>
   <name>Lippi.OuYang</name>
   <email>ouyanglip@gmail.com</email>
 </author>

 
 <entry>
   <title></title>
   <link href="http://http://coolshell.info/blog/2016/07/2014-11-01-java-nio.html"/>
   <updated>2016-07-27T13:15:16+00:00</updated>
   <id>/blog/2016/07/2014-11-01-java-nio</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;感性认识：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;传统的&lt;/strong&gt;socket IO中，&lt;strong&gt;需要为每个连接创建一个线程&lt;/strong&gt;，当并发的连接数量非常巨大时，&lt;strong&gt;线程所占用的栈内存和CPU线程切换的开销&lt;/strong&gt;将非常巨大。使用&lt;strong&gt;NIO&lt;/strong&gt;，不再需要为每个线程创建单独的线程，可以用一个&lt;strong&gt;含有限数量线程的线程池&lt;/strong&gt;，甚至一个线程来为任意数量的连接服务。由于线程数量小于连接数量，所以每个线程进行IO操作时就不能阻塞，如果阻塞的话，有些连接就得不到处理，NIO提供了这种非阻塞的能力。&lt;/p&gt;

&lt;p&gt;小量的线程如何同时为大量连接服务呢，答案就是&lt;strong&gt;就绪选择(事件驱动)&lt;/strong&gt;。这就好比到餐厅吃饭，每来一桌客人，都有一个服务员专门为你服务，从你到餐厅到结帐走人，这样方式的好处是服务质量好，一对一的服务，VIP啊，可是缺点也很明显，成本高，如果餐厅生意好，同时来100桌客人，就需要100个服务员，那老板发工资的时候得心痛死了，这就是传统的一个连接一个线程的方式。&lt;/p&gt;

&lt;p&gt;老板是什么人啊，精着呢。这老板就得捉摸怎么能用10个服务员同时为100桌客人服务呢，老板就发现，服务员在为客人服务的过程中并不是一直都忙着，客人点完菜，上完菜，吃着的这段时间，服务员就闲下来了，可是这个服务员还是被这桌客人占用着，不能为别的客人服务，用华为领导的话说，就是工作不饱满。那怎么把这段闲着的时间利用起来呢。这餐厅老板就想了一个办法，&lt;strong&gt;让一个服务员（前台）专门负责收集客人的需求&lt;/strong&gt;，登记下来，比如有客人进来了、客人点菜了，客人要结帐了，都先记录下来按顺序排好。&lt;strong&gt;每个服务员到这里领一个需求&lt;/strong&gt;，比如点菜，就拿着菜单帮客人点菜去了。点好菜以后，服务员马上回来，领取下一个需求，继续为别人客人服务去了。这种方式服务质量就不如一对一的服务了，当客人数据很多的时候可能需要等待。但好处也很明显，由于在客人正吃饭着的时候服务员不用闲着了，服务员这个时间内可以为其他客人服务了，原来10个服务员最多同时为10桌客人服务，现在可能为50桌，60客人服务了。&lt;/p&gt;

&lt;p&gt;这种服务方式跟传统的区别有两个：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1、增加了一个角色，&lt;strong&gt;要有一个专门负责收集客人需求的人&lt;/strong&gt;。NIO里对应的就是Selector。&lt;/li&gt;
  &lt;li&gt;2、&lt;strong&gt;由阻塞服务方式改为非阻塞服务了&lt;/strong&gt;，客人吃着的时候服务员不用一直侯在客人旁边了。传统的IO操作，比如read()，当没有数据可读的时候，线程一直阻塞被占用，直到数据到来。NIO中没有数据可读时，read()会立即返回0，线程不会阻塞。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NIO中，客户端创建一个连接后，&lt;strong&gt;先要将连接注册到Selector&lt;/strong&gt;，相当于客人进入餐厅后，告诉前台你要用餐，前台会告诉你你的桌号是几号，然后你就可能到那张桌子坐下了，SelectionKey就是桌号。当某一桌需要服务时，前台就记录哪一桌需要什么服务，比如1号桌要点菜，2号桌要结帐，服务员从前台取一条记录，根据记录提供服务，完了再来取下一条。这样服务的时间就被最有效的利用起来了。&lt;/p&gt;

&lt;p&gt;具体分析：&lt;/p&gt;

&lt;p&gt;一．java NIO 和阻塞I/O的区别&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 阻塞I/O通信模型&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;假如现在你对阻塞I/O已有了一定了解，我们知道阻塞I/O在调用InputStream.read()方法时是阻塞的，它会一直等到数据到来时（或超时）才会返回；同样，在调用ServerSocket.accept()方法时，也会一直阻塞到有客户端连接才会返回，每个客户端连接过来后，服务端都会启动一个线程去处理该客户端的请求。阻塞I/O的通信模型示意图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/java/1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你细细分析，一定会发现阻塞I/O存在一些缺点。根据阻塞I/O通信模型，我总结了它的两点缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1.当客户端多时，会创建大量的处理线程。且每个线程都要占用栈空间和一些CPU时间&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2.阻塞可能带来频繁的上下文切换，且大部分上下文切换可能是无意义的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这种情况下非阻塞式I/O就有了它的应用前景。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.java NIO原理及通信模型&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Java NIO是在jdk1.4开始使用的，它既可以说成“新I/O”，也可以说成非阻塞式I/O。下面是java NIO的工作原理：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;由一个专门的线程来处理所有的 IO 事件，并负责分发。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;事件驱动机制：事件到的时候触发，而不是同步的去监视事件。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;线程通讯：线程之间通过 wait,notify 等方式通讯。保证每次上下文切换都是有意义的。减少无谓的线程切换。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;阅读过一些资料之后，下面贴出我理解的java NIO的工作原理图：
&lt;img src=&quot;/images/images/java/2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Java NIO的服务端只需启动一个专门的线程来处理所有的 IO 事件，这种通信模型是怎么实现的呢？呵呵，我们一起来探究它的奥秘吧。java NIO采用了双向通道（channel）进行数据传输，而不是单向的流（stream），在通道上可以注册我们感兴趣的事件。一共有以下四种事件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;事件名	对应值
服务端接收客户端连接事件	SelectionKey.OP_ACCEPT(16)
客户端连接服务端事件	SelectionKey.OP_CONNECT(8)
读事件					SelectionKey.OP_READ(1)
写事件					SelectionKey.OP_WRITE(4)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;服务端和客户端各自维护一个管理通道的对象，我们称之为selector，该对象能检测一个或多个通道 (channel) 上的事件。我们以服务端为例，如果服务端的selector上注册了读事件，某时刻客户端给服务端发送了一些数据，阻塞I/O这时会调用read()方法阻塞地读取数据，而NIO的服务端会在selector中添加一个读事件。服务端的处理线程会轮询地访问selector，如果访问selector时发现有感兴趣的事件到达，则处理这些事件，如果没有感兴趣的事件到达，则处理线程会一直阻塞直到感兴趣的事件到达为止。下面是我理解的java NIO的通信模型示意图：
&lt;img src=&quot;/images/images/java/3.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java-nio&quot;&gt;二．java NIO服务端和客户端代码实现&lt;/h2&gt;

&lt;p&gt;为了更好地理解java NIO,下面贴出服务端和客户端的简单代码实现。&lt;/p&gt;

&lt;p&gt;服务端：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package cn.nio;
import java.io.IOException;  
import java.net.InetSocketAddress;  
import java.nio.ByteBuffer;  
import java.nio.channels.SelectionKey;  
import java.nio.channels.Selector;  
import java.nio.channels.ServerSocketChannel;  
import java.nio.channels.SocketChannel;  
import java.util.Iterator;  
  
/** 
 * NIO服务端 
 * @author 小路 
 */  
public class NIOServer {  
//通道管理器  
private Selector selector;  
  
/** 
 * 获得一个ServerSocket通道，并对该通道做一些初始化的工作 
 * @param port  绑定的端口号 
 * @throws IOException 
 */  
public void initServer(int port) throws IOException {  
// 获得一个ServerSocket通道  
ServerSocketChannel serverChannel = ServerSocketChannel.open();  
// 设置通道为非阻塞  
serverChannel.configureBlocking(false);  
// 将该通道对应的ServerSocket绑定到port端口  
serverChannel.socket().bind(new InetSocketAddress(port));  
// 获得一个通道管理器  
this.selector = Selector.open();  
//将通道管理器和该通道绑定，并为该通道注册SelectionKey.OP_ACCEPT事件,注册该事件后，  
//当该事件到达时，selector.select()会返回，如果该事件没到达selector.select()会一直阻塞。  
serverChannel.register(selector, SelectionKey.OP_ACCEPT);  
}  
  
/** 
 * 采用轮询的方式监听selector上是否有需要处理的事件，如果有，则进行处理 
 * @throws IOException 
 */  
@SuppressWarnings(&quot;unchecked&quot;)  
public void listen() throws IOException {  
System.out.println(&quot;服务端启动成功！&quot;);  
// 轮询访问selector  
while (true) {  
//当注册的事件到达时，方法返回；否则,该方法会一直阻塞  
selector.select();  
// 获得selector中选中的项的迭代器，选中的项为注册的事件  
Iterator ite = this.selector.selectedKeys().iterator();  
while (ite.hasNext()) {  
SelectionKey key = (SelectionKey) ite.next();  
// 删除已选的key,以防重复处理  
ite.remove();  
// 客户端请求连接事件  
if (key.isAcceptable()) {  
ServerSocketChannel server = (ServerSocketChannel) key  
.channel();  
// 获得和客户端连接的通道  
SocketChannel channel = server.accept();  
// 设置成非阻塞  
channel.configureBlocking(false);  
  
//在这里可以给客户端发送信息哦  
channel.write(ByteBuffer.wrap(new String(&quot;向客户端发送了一条信息&quot;).getBytes()));  
//在和客户端连接成功之后，为了可以接收到客户端的信息，需要给通道设置读的权限。  
channel.register(this.selector, SelectionKey.OP_READ);  
  
// 获得了可读的事件  
} else if (key.isReadable()) {  
read(key);  
}  
  
}  
  
}  
}  
/** 
 * 处理读取客户端发来的信息 的事件 
 * @param key 
 * @throws IOException  
 */  
public void read(SelectionKey key) throws IOException{  
// 服务器可读取消息:得到事件发生的Socket通道  
SocketChannel channel = (SocketChannel) key.channel();  
// 创建读取的缓冲区  
ByteBuffer buffer = ByteBuffer.allocate(10);  
channel.read(buffer);  
byte[] data = buffer.array();  
String msg = new String(data).trim();  
System.out.println(&quot;服务端收到信息：&quot;+msg);  
ByteBuffer outBuffer = ByteBuffer.wrap(msg.getBytes());  
channel.write(outBuffer);// 将消息回送给客户端  
}  
  
/** 
 * 启动服务端测试 
 * @throws IOException  
 */  
public static void main(String[] args) throws IOException {  
NIOServer server = new NIOServer();  
server.initServer(8000);  
server.listen();  
}  
  
}   客户端：
package cn.nio;  
  
import java.io.IOException;  
import java.net.InetSocketAddress;  
import java.nio.ByteBuffer;  
import java.nio.channels.SelectionKey;  
import java.nio.channels.Selector;  
import java.nio.channels.SocketChannel;  
import java.util.Iterator;  
  
/** 
 * NIO客户端 
 * @author 小路 
 */  
public class NIOClient {  
//通道管理器  
private Selector selector;  
  
/** 
 * 获得一个Socket通道，并对该通道做一些初始化的工作 
 * @param ip 连接的服务器的ip 
 * @param port  连接的服务器的端口号  
 * @throws IOException 
 */  
public void initClient(String ip,int port) throws IOException {  
// 获得一个Socket通道  
SocketChannel channel = SocketChannel.open();  
// 设置通道为非阻塞  
channel.configureBlocking(false);  
// 获得一个通道管理器  
this.selector = Selector.open();  
  
// 客户端连接服务器,其实方法执行并没有实现连接，需要在listen（）方法中调  
//用channel.finishConnect();才能完成连接  
channel.connect(new InetSocketAddress(ip,port));  
//将通道管理器和该通道绑定，并为该通道注册SelectionKey.OP_CONNECT事件。  
channel.register(selector, SelectionKey.OP_CONNECT);  
}  
  
/** 
 * 采用轮询的方式监听selector上是否有需要处理的事件，如果有，则进行处理 
 * @throws IOException 
 */  
@SuppressWarnings(&quot;unchecked&quot;)  
public void listen() throws IOException {  
// 轮询访问selector  
while (true) {  
selector.select();  
// 获得selector中选中的项的迭代器  
Iterator ite = this.selector.selectedKeys().iterator();  
while (ite.hasNext()) {  
SelectionKey key = (SelectionKey) ite.next();  
// 删除已选的key,以防重复处理  
ite.remove();  
// 连接事件发生  
if (key.isConnectable()) {  
SocketChannel channel = (SocketChannel) key  
.channel();  
// 如果正在连接，则完成连接  
if(channel.isConnectionPending()){  
channel.finishConnect();  
  
}  
// 设置成非阻塞  
channel.configureBlocking(false);  
  
//在这里可以给服务端发送信息哦  
channel.write(ByteBuffer.wrap(new String(&quot;向服务端发送了一条信息&quot;).getBytes()));  
//在和服务端连接成功之后，为了可以接收到服务端的信息，需要给通道设置读的权限。  
channel.register(this.selector, SelectionKey.OP_READ);  
  
// 获得了可读的事件  
} else if (key.isReadable()) {  
read(key);  
}  
  
}  
  
}  
}  
/** 
 * 处理读取服务端发来的信息 的事件 
 * @param key 
 * @throws IOException  
 */  
public void read(SelectionKey key) throws IOException{  
//和服务端的read方法一样  
}  
  
  
/** 
 * 启动客户端测试 
 * @throws IOException  
 */  
public static void main(String[] args) throws IOException {  
NIOClient client = new NIOClient();  
client.initClient(&quot;localhost&quot;,8000);  
client.listen();  
}  
  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title></title>
   <link href="http://http://coolshell.info/blog/2016/07/2014-11-01-android-push.html"/>
   <updated>2016-07-27T13:15:16+00:00</updated>
   <id>/blog/2016/07/2014-11-01-android-push</id>
   <content type="html">&lt;p&gt;当我们开发需要和服务器交互的应用程序时，基本上都需要获取服务器端的数据，比如《地震及时通》就需要及时获取服务器上最新的地震信息。要获取服务器上不定时更新的信息一般来说有两种方法，第一种是客户端使用&lt;strong&gt;Pull（拉）&lt;/strong&gt;的方式，隔一段时间就去服务器上获取信息，看是否有更新的信息出现。第二种就是服务器使用&lt;strong&gt;Push（推送）&lt;/strong&gt;的方式，当服务器端有新信息了，则把最新的信息Push到客户端上。 
虽然Pull和Push两种方式都能实现获取服务器端更新信息的功能，但是明显来说&lt;strong&gt;Push is better than pull&lt;/strong&gt;。
&lt;strong&gt;因为Pull方式更费客户端的网络流量，更主要的是费电量。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在开发Android和iPhone应用程序时，我们往往需要从服务器不定的向手机客户端即时推送各种通知消息，iPhone上已经有了比较简单的和完美的推送通知解决方案，可是Android平台上实现起来却相对比较麻烦，最近利用几天的时间对Android的推送通知服务进行初步的研究。 
在Android手机平台上，Google提供了&lt;strong&gt;C2DM（Cloud to Device Messaging）&lt;/strong&gt;服务，起初我就是准备采用这个服务来实现自己手机上的推送功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android Cloud to Device Messaging (C2DM)&lt;/strong&gt;是一个用来帮助开发者从服务器向Android应用程序发送数据的服务。该服务提供了一个简单的、轻量级的机制，允许服务器可以通知移动应用程序直接与服务器进行通信，以便于从服务器获取应用程序更新和用户数据。C2DM服务负责处理诸如消息排队等事务并向运行于目标设备上的应用程序分发这些消息。&lt;/p&gt;

&lt;p&gt;下面是C2DM操作过程示例图:
&lt;img src=&quot;/images/images/image001.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;几种常见的方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1）&lt;strong&gt;轮询(Pull)&lt;/strong&gt;：应用程序应当阶段性的与服务器进行连接并查询是否有新的消息到达，你必须自己实现与服务器之间的通信，例如消息排队等。而且你还要考虑轮询的频率，如果太慢可能导致某些消息的延迟，如果太快，则会大量消耗网络带宽和电池。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2）&lt;strong&gt;SMS(Push)&lt;/strong&gt;：在Android平台上，你可以通过拦截SMS消息并且解析消息内容来了解服务器的意图。这是一个不错的想法，我就见过采用这个方案的应用程序。这个方案的好处是，可以实现完全的实时操作。但是问题是这个方案的成本相对比较高，你很难找到免费的短消息发送网关，关于这个方案的实现。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;3）&lt;strong&gt;持久连接(Push)&lt;/strong&gt;：这个方案可以解决由轮询带来的性能问题，但是还是会消耗手机的电池。Apple的推送服务之所以工作的很好，是因为每一台手机仅仅保持一个与服务器之间的连接，事实上C2DM也是这么工作的。不过这个方案也存在不足，就是我们很难在手机上实现一个可靠的服务。Android操作系统允许在低内存情况下杀死系统服务，所以你的通知服务很可能被操作系统Kill掉了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前两个方案存在明显的不足，第三个方案也有不足，不过我们可以通过良好的设计来弥补，以便于让该方案可以有效的工作。毕竟，我们要知道GMail，GTalk以及GoogleVoice都可以实现实时更新的。&lt;/p&gt;

&lt;p&gt;**采用MQTT协议实现Android推送 **&lt;/p&gt;

&lt;p&gt;MQTT是一个轻量级的消息发布/订阅协议，它是实现基于手机客户端的消息推送服务器的理想解决方案。&lt;/p&gt;

&lt;p&gt;wmqtt.jar 是IBM提供的MQTT协议的实现。你可以从如下站点下载它。你可以将该jar包加入你自己的Android应用程序中。&lt;/p&gt;

&lt;p&gt;Really Small Message Broker (RSMB) ，他是一个简单的MQTT代理，同样由IBM提供。缺省打开1883端口，应用程序当中，它负责接收来自服务器的消息并将其转发给指定的移动设备。&lt;/p&gt;

&lt;p&gt;　架构如下图所示：
&lt;img src=&quot;/images/images/111.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RSMB实现推送功能&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Really Small Message Broker (RSMB)&lt;/code&gt; ，他是一个简单的MQTT代理，同样由IBM提供，其查看地址是：http://www.alphaworks.ibm.com/tech/rsmb。缺省打开1883端口，应用程序当中，它负责接收来自服务器的消息并将其转发给指定的移动设备。&lt;/p&gt;

&lt;p&gt;SAM是一个针对MQTT写的PHP库。我们可以从这个http://pecl.php.net/package/sam/download/0.2.0地址下载它.
send_mqtt.php是一个通过POST接收消息并且通过SAM将消息发送给RSMB的PHP脚本。&lt;/p&gt;

&lt;p&gt;**采用XMPP协议实现Android推送 **&lt;/p&gt;

&lt;p&gt;这是我在项目中采用的方案。事实上Google官方的C2DM服务器底层也是采用XMPP协议进行的封装。 
&lt;strong&gt;XMPP(可扩展通讯和表示协议)是基于可扩展标记语言（XML）的协议&lt;/strong&gt;，它用于即时消息（IM）以及在线探测。这个协议可能最终允许因特网用户向因特网上的其他任何人发送即时消息。&lt;/p&gt;

&lt;p&gt;androidpn是一个基于XMPP协议的java开源&lt;strong&gt;Android push notification&lt;/strong&gt;实现。它包含了完整的客户端和服务器端。经过源代码研究我发现，该服务器端基本是在另外一个开源工程&lt;strong&gt;openfire&lt;/strong&gt;基础上修改实现的，不过比较郁闷的是androidpn的文档是由韩语写的，所以整个研究过程基本都是读源码。&lt;/p&gt;

&lt;p&gt;androidpn实现如下图所示：
！&lt;a href=&quot;/images/images/222.gif&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;androidpn客户端需要用到一个基于java的&lt;strong&gt;开源XMPP协议包asmack&lt;/strong&gt;，这个包同样也是基于openfire下的另外一个开源项目smack，不过我们不需要自己编译，可以直接把androidpn客户端里面的&lt;strong&gt;asmack.jar&lt;/strong&gt;拿来使用。客户端利用asmack中提供的XMPPConnection类与服务器建立持久连接，并通过该连接进行用户注册和登录认证，同样也是通过这条连接，接收服务器发送的通知。&lt;/p&gt;

&lt;p&gt;androidpn服务器端也是java语言实现的，基于openfire开源工程，不过它的Web部分采用的是spring框架，这一点与openfire是不同的。
服务器架构如下：&lt;/p&gt;

&lt;p&gt;Androidpn服务器包含两个部分，一个是&lt;strong&gt;侦听在5222端口上的XMPP服务&lt;/strong&gt;，负责与客户端的XMPPConnection类进行通信，作用是用户注册和身份认证，并发送推送通知消息。另外一部分是Web服务器，采用一个轻量级的HTTP服务器，负责接收用户的Web请求。
服务器架构如下：&lt;/p&gt;

&lt;p&gt;！&lt;a href=&quot;/images/images/333.gif&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最上层包含四个组成部分，分别是&lt;code class=&quot;highlighter-rouge&quot;&gt;SessionManager，Auth Manager，PresenceManager以及Notification Manager&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;SessionManager&lt;/code&gt;负责管理客户端与服务器之间的会话，&lt;code class=&quot;highlighter-rouge&quot;&gt;Auth Manager&lt;/code&gt;负责客户端用户认证管理，&lt;code class=&quot;highlighter-rouge&quot;&gt;Presence Manager&lt;/code&gt;负责管理客户端用户的登录状态&lt;code class=&quot;highlighter-rouge&quot;&gt;NotificationManager&lt;/code&gt;负责实现服务器向客户端推送消息功能。&lt;/p&gt;

&lt;p&gt;这个解决方案的最大优势就是简单，我们不需要象C2DM那样依赖操作系统版本，也不会担心某一天Google服务器不可用。利用XMPP协议我们还可以进一步的对协议进行扩展，实现更为完善的功能。&lt;/p&gt;

&lt;p&gt;采用这个方案，我们目前只能发送文字消息，不过对于推送来说一般足够了，因为我们不能指望通过推送得到所有的数据，一般情况下，利用推送只是告诉手机端服务器发生了某些改变，当客户端收到通知以后，应该主动到服务器获取最新的数据，这样才是推送服务的完整实现。&lt;/p&gt;

&lt;h2 id=&quot;xmpp&quot;&gt;XMpp协议简介&lt;/h2&gt;

&lt;p&gt;XMPP协议，它是一种基于XML的传递协议，具有很强的灵活性和可扩展性。它的特点是将复杂性从客户端转移到了服务器端。在网上可以找到很多的XMPP资料，这里就不在赘述了，不然越扯越多。总之，XMPP主要显著的优点主要有以下几个方面：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1、 &lt;strong&gt;分布式&lt;/strong&gt;  任何人都可以运行自己的XMPP服务器，它没有主服务器&lt;/li&gt;
  &lt;li&gt;2、 &lt;strong&gt;安全性很高&lt;/strong&gt;。使用SASL及TLS等技术的可靠安全性&lt;/li&gt;
  &lt;li&gt;3、 &lt;strong&gt;开发性&lt;/strong&gt; 它是开源的，易于进行学习和了解&lt;/li&gt;
  &lt;li&gt;4、 **跨平台 ** 毋庸置疑，使用的XML进行传输的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说完优点，我们言归正传，基于XMPP协议的java开发有一个开源框架，那就是smack，它主要封装了一些XMPP的实现。而如果把它直接用在Android上是不行的，因为android缺少了一些java的类库，于是一个改进版的asmack诞生了，它是专门为android而改进的android smack。而另外一个开源框架的诞生，则是对在引用smack的基础上实现和服务器端的持久连接，以实现服务器对客户端的推送，那就是android push notification，简称androidpn。&lt;/p&gt;

&lt;p&gt;Androidpn在客户端集成了asmack。这样就可以很容易的简立一个和服务器端的基于xmpp协议的socket连接。Androidpn的客户端中，进行管理连接的类是XmppManager，它主要用来管理连接的信息，比如XMPP的端口、IP、登录的用户名密码，以及对连接的维护。为什么还有用户名和密码？这不得不提到XMPP的具体细节。整个服务器端和客户端的通信是基于一个session（会话）过程，会话开始，首先会指定服务器的端口号，然后把上述提到的信息发送到服务器端，怎么发送消息的呢？以&lt;stream&gt;根节点的方式开始传递，只有在服务器和客户端关闭的时候才会发送它的结束标记&lt;/stream&gt;。客户端通过XMPP协议只用做的就是接收消息，而所有其它的操作都交给服务器，比如管理连接、消息保存等等，这样就很大程度的减轻了客户端的负担。那么客户端和服务器端的消息回应是如何实现的？如要通过一个ID来标识，具体细节可以去查看XMPP协议。&lt;/p&gt;

&lt;p&gt;一旦注册绑定后，服务器端就和客户端建立了连接，客户端只用负责去接收消息。所以当我们应用Androidpn的时候，客户端会非常的简单。而在服务器端，Androidpn又做了什么呢？&lt;/p&gt;

&lt;p&gt;服务器端的展示方面，androidpn主要用到的技术是&lt;strong&gt;Spring和Hibernate&lt;/strong&gt;。主要是用来展示用户状态和发送信息用的，这方面的技术已经比较成熟，就不再细说了，主要要说的还是XMPP的管理。在服务器端的源码中一个&lt;code class=&quot;highlighter-rouge&quot;&gt;org.androidpn.server.xmpp.net.Connection&lt;/code&gt;类，主要是代表一个服务器上的XMPP连接，注意只是一个，它可以确保在服务器关闭的时候，发送一个&amp;lt;/stream&amp;gt;标记到客户端，告知连接断开，需重新连接。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.androidpn.server.xmpp.session.SessionManager&lt;/code&gt;主要用户管理所有会话，比如连接断开，删除session以及建立连接，添加session等等。&lt;/p&gt;

&lt;p&gt;而&lt;strong&gt;在管理Socket连接的时候，androidpn采用了MINA框架来进行管理，&lt;/strong&gt;MINA&lt;a href=&quot;https://mina.apache.org/&quot;&gt;https://mina.apache.org/&lt;/a&gt;的优点就是改变了我们传统的管理socket的方式，比如没建立一个socket开一个线程，而MINA可以实现多个线程管理N多个用户。在处理高并发的推送上无疑是有巨大的好处的。&lt;/p&gt;

&lt;p&gt;合理的利用监听器来管理session，也是androidpn的优点。在安全性方面，制定了TLS(安全传输层)策略，并却采用了安全认证，这些方面都做的不错。&lt;/p&gt;

&lt;p&gt;当然，不可避免的30秒钟的心跳包还是必不可少的。&lt;/p&gt;

&lt;p&gt;总之，用Androidpn好处有以下方面：采用完全开放的XMPP协议进行数据传输（QQ，MSN，GTalk等都是采用的这种协议）；良好的框架支持（专门为android 而产生的推送框架asmack，以及很好的管理socket的框架MINA，都是很成熟的产品）；完全开放的源代码（我们可以在androidpn的基础上进行修改，来满足我们的任何需求变更）；大大的减少了客户端的代码，降低了android的开发难度。缺点不言而喻，使用了太多的框架，如果想要改一些具体的实现，可能会迁移发动全身。不过如果你个懒人的话，完全满足你的需求了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>hi</title>
   <link href="http://http://coolshell.info/blog/2016/02/hi.html"/>
   <updated>2016-02-22T00:00:00+00:00</updated>
   <id>/blog/2016/02/hi</id>
   <content type="html">&lt;p&gt;hi!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git操作手册|命令速查表</title>
   <link href="http://http://coolshell.info/blog/2016/02/git-guide.html"/>
   <updated>2016-02-20T00:00:00+00:00</updated>
   <id>/blog/2016/02/git-guide</id>
   <content type="html">&lt;p&gt;这篇文章主要介绍Git分布式版本管理与集中式管理的一些差异，总结下Git常用命令作为日后的速查表，最后介绍Git进阶的一些案例。
本文分为以下几个部分：
1. Git与SVN差异
2. Git常用命令
3. Git进阶指南&lt;/p&gt;

&lt;p&gt;##Git与SVN差异&lt;/p&gt;

&lt;p&gt;Git的第一个版本是Linux之父Linus Torvalds亲手操刀设计和实现的,Git 基于 DAG 结构 (Directed Acyclic Graph)，其运行起来相当的快,它已经是现在的主流。&lt;/p&gt;

&lt;p&gt;Git 和 SVN 思想最大的差别有四个：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;去中心化&lt;/li&gt;
  &lt;li&gt;直接记录快照，而非差异&lt;/li&gt;
  &lt;li&gt;不一样的分支概念&lt;/li&gt;
  &lt;li&gt;三个文件状态&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;去中心化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git是一个DVCS（分布式版本管理系统），在技术层面上并不存在一个像中心仓库这样的东西 ， 所有的数据都在本地，不存在谁是中心&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/git.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图中每个开发者拉取(pull)并推送(push)到origin。但除了这种集中式的推送拉取关系，每个开发者也可能会从其他的开发者处拉取代码的变更，从技术上讲，这意味着Alice定义了一个名为bob的Git的remote，它指向了Bob的软件仓库。反之亦然。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;直接记录快照，而非差异&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git每一个版本都是直接记录快照，而非文件的差异。 下面两个对比图在网上是广为流传大家应该熟悉：&lt;/p&gt;

&lt;p&gt;SVN：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/svn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Git:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/gitgit.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Git使用SHA-1算法计算数据的校验和，通过文件的内容或目录计算出SHA-1哈希值，作为指纹字符串，每个Version 都是一个快照。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不一样的分支概念&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git的分支本质是一个指向提交快照的指针，是从某个提交快照往回看的历史。当创建/切换分支的时候，只是变换了指针指向而已.而SVN创建一个分支， 是的的确确的复制了一份文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三个文件状态&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在Git中文件有三种状态：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;已提交（committed）：该文件被安全地保存在了本地数据库&lt;/li&gt;
  &lt;li&gt;已修改（modified）：修改了某个文件，但还没有保存&lt;/li&gt;
  &lt;li&gt;已暂存（staged）：把已修改的文件放下下次保存的清单中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##Git常用命令&lt;/p&gt;

&lt;p&gt;###创建&lt;/p&gt;

&lt;p&gt;复制一个已创建的仓库:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone ssh://user@domain.com/repo.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建一个新的本地仓库:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###本地修改&lt;/p&gt;

&lt;p&gt;显示工作路径下已修改的文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;显示与上次提交版本文件的不同：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git diff
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;把当前所有修改添加到下次提交中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;把对某个文件的修改添加到下次提交中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add -p &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;提交本地的所有修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit -a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;提交之前已标记的变化：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;附加消息提交：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit -m &#39;message here&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;提交，并将提交时间设置为之前的某个日期:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit --date=&quot;`date --date=&#39;n day ago&#39;`&quot; -am &quot;Commit Message&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###修改上次提交&lt;/p&gt;

&lt;p&gt;请勿修改已发布的提交记录!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;把当前分支中未提交的修改移动到其他分支&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git stash
git checkout branch2
git stash pop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###搜索&lt;/p&gt;

&lt;p&gt;从当前目录的所有文件中查找文本内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git grep &quot;Hello&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在某一版本中搜索文本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git grep &quot;Hello&quot; v2.5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###提交历史&lt;/p&gt;

&lt;p&gt;从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;显示所有提交（仅显示提交的hash和message）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --oneline
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;显示某个用户的所有提交：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --author=&quot;username&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;显示某个文件的所有修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log -p &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;谁，在什么时间，修改了文件的什么内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git blame &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###分支与标签&lt;/p&gt;

&lt;p&gt;列出所有的分支：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;切换分支：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建并切换到新分支:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout -b &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;基于当前分支创建新分支：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch &amp;lt;new-branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;基于远程分支创建新的可追溯的分支：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch --track &amp;lt;new-branch&amp;gt; &amp;lt;remote-branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;删除本地分支:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch -d &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;给当前版本打标签：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git tag &amp;lt;tag-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###更新与发布&lt;/p&gt;

&lt;p&gt;列出当前配置的远程端：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote -v
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;显示远程端的信息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote show &amp;lt;remote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;添加新的远程端：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote add &amp;lt;remote&amp;gt; &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下载远程端版本，但不合并到HEAD中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git fetch &amp;lt;remote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下载远程端版本，并自动与HEAD版本合并：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote pull &amp;lt;remote&amp;gt; &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将远程端版本合并到本地版本中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git pull origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将本地版本发布到远程端：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push remote &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;删除远程端分支：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push &amp;lt;remote&amp;gt; :&amp;lt;branch&amp;gt; (since Git v1.5.0)
或
git push &amp;lt;remote&amp;gt; --delete &amp;lt;branch&amp;gt; (since Git v1.7.0)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;发布标签:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###合并与重置&lt;/p&gt;

&lt;p&gt;将分支合并到当前HEAD中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git merge &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将当前HEAD版本重置到分支中:
请勿重置已发布的提交!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rebase &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;退出重置:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rebase --abort
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;解决冲突后继续重置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rebase --continue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用配置好的merge tool 解决冲突：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git mergetool
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在编辑器中手动解决冲突后，标记文件为已解决冲突&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add &amp;lt;resolved-file&amp;gt;
$ git rm &amp;lt;resolved-file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###撤销&lt;/p&gt;

&lt;p&gt;放弃工作目录下的所有修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;移除缓存区的所有文件（i.e. 撤销上次git add）:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;放弃某个文件的所有本地修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout HEAD &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重置一个提交（通过创建一个截然不同的新提交）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git revert &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将HEAD重置到上一次提交的版本，并保留未提交的本地修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --keep &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##Git进阶指南&lt;/p&gt;

&lt;p&gt;###问：如何修改 origin 仓库信息？&lt;/p&gt;

&lt;p&gt;####1、添加 origin 仓库信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add origin &amp;lt;git仓库地址&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;####2、查看 origin 仓库信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 以下三种方式均可
git config get --remote.origin.url
git remote -v
git remote show origin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;####3、删除 origin 仓库信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git remote rm origin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###问：如何配置 git ssh keys ？&lt;/p&gt;

&lt;p&gt;在本地生成 ssh 私钥 / 公钥 文件
将「公钥」添加到 git 服务（github、gitlab、coding.net 等）网站后台
测试 git ssh 连接是否成功
接下来以添加 github ssh keys 为例，请注意替换 github 文件名。&lt;/p&gt;

&lt;p&gt;注：如果对密钥机制不熟悉，建议不要指定 -f 参数，直接使用默认的 id_rsa 文件名。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 运行以下命令，一直回车，文件名可随意指定
ssh-keygen -t rsa -b 4096 -C &quot;kaiye@macbook&quot; -f ~/.ssh/github

# 如果不是默认密钥 id_rsa ，则需要以下命令注册密钥文件，-K 参数将密钥存入 Mac Keychain
ssh-add -K ~/.ssh/github

# 将 pub 公钥的内容粘贴到线上网站的后台
cat ~/.ssh/github.pub

# 测试 git ssh 是否连接成功
ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###问：如何撤销修改？&lt;/p&gt;

&lt;p&gt;修改包含四种情况，需单独区分。&lt;/p&gt;

&lt;p&gt;####1、新建的文件和目录，且从未提交至版本库&lt;/p&gt;

&lt;p&gt;此类文件的状态为 Untracked files ，撤销方法如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clean -fd .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，. 表示当前目录及所有子目录中的文件，也可以直接指定对应的文件路径，以下其他情况类似。&lt;/p&gt;

&lt;p&gt;####2、提交过版本库，但未提交至暂存区的文件（未执行 git add）&lt;/p&gt;

&lt;p&gt;此类文件的状态为&lt;code class=&quot;highlighter-rouge&quot;&gt; Changes not staged for commit&lt;/code&gt;，撤销方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git checkout .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;####3、已提交至暂存区的文件&lt;/p&gt;

&lt;p&gt;此类文件的状态为 Changes to be committed，撤销方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git reset .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行之后文件将会回到以上的 1 或者 2 状态，可继续按以上步骤执行撤销，若 git reset 同时加上 –hard 参数，将会把修改过的文件也还原成版本库中的版本。&lt;/p&gt;

&lt;p&gt;####4、已提交至版本库（执行了 git commit）&lt;/p&gt;

&lt;p&gt;每次提交都会生成一个 hash 版本号，通过以下命令可查阅版本号并将其回滚：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log
git reset &amp;lt;版本号&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果需要「回滚至上一次提交」，可直接使用以下命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git reset head~1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行之后，再按照 1 或者 2 状态进行处理即可，如果回滚之后的代码同时需要提交至 origin 仓库（即回滚 origin 线上仓库的代码），需要使用 -f 强制提交参数，且当前用户需要具备「强制提交的权限」。&lt;/p&gt;

&lt;p&gt;####5、如果回滚了之后又不想回滚了怎么办？&lt;/p&gt;

&lt;p&gt;如果是以上的情况 1 或者 2，只能歇屁了，因为修改没入过版本库，无法回滚。&lt;/p&gt;

&lt;p&gt;如果是情况 4，回滚之后通过 git log 将看不到回滚之前的版本号，但可通过 git reflog 命令（所有使用过的版本号）找到回滚之前的版本号，然后 git reset &lt;版本号&gt; 。&lt;/版本号&gt;&lt;/p&gt;

&lt;p&gt;###问：遇到冲突了怎么解决？&lt;/p&gt;

&lt;p&gt;两个分支进行合并时（通常是 git pull 时），可能会遇到冲突，同时被修改的文件会进入 Unmerged 状态，需要解决冲突。&lt;/p&gt;

&lt;p&gt;####1、最快的办法&lt;/p&gt;

&lt;p&gt;大部分时候，「最快解决冲突」的办法是：使用当前 HEAD 的版本（ours），或使用合并进来的分支版本（theirs）。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 使用当前分支 HEAD 版本，通常是冲突源文件的 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; 标记部分，======= 的上方
git checkout --ours &amp;lt;文件名&amp;gt;

 # 使用合并分支版本，通常是源冲突文件的 &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 标记部分
 git checkout --theirs &amp;lt;文件名&amp;gt;

# 标记为解决状态加入暂存区
git add &amp;lt;文件名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;####2、最通用的办法&lt;/p&gt;

&lt;p&gt;用编辑器打开冲突的源文件进行修改，可能会发生遗留，且体验不好，通常需要借助 git mergetool 命令。&lt;/p&gt;

&lt;p&gt;在 Mac 系统下，运行 git mergetool &lt;文件名&gt; 可以开启配置的第三方工具进行 merge，默认的是 FileMerge 应用程序，还可以配置成 Meld 或 kdiff3，体验更佳。&lt;/文件名&gt;&lt;/p&gt;

&lt;p&gt;####3、最好的习惯&lt;/p&gt;

&lt;p&gt;有三个好的习惯，可以减少代码的冲突：
 在开始修改代码前先 git pull 一下；
  将业务代码进行划分，尽量不要多个人在同一时间段修改同一文件；
  通过Gitflow 工作流也可以提升 git流程效率，减少发生冲突的可能性。&lt;/p&gt;

&lt;p&gt;####4、最复杂的情况&lt;/p&gt;

&lt;p&gt;如果你的项目周期比较长，还应该养成「定期 rebase 的习惯」，git pull –rebase 可以让分支的代码和 origin 仓库的代码保持兼容，同时还不会破坏线上代码的可靠性。&lt;/p&gt;

&lt;p&gt;它的大概原理是，先将 origin 仓库的代码按 origin 的时间流在本地分支中提交，再将本地分支的修改记录追加到 origin 分支上。如果发生冲突，则可以即时的发现问题并解决，否则到项目上线时再解决冲突，可能会发生额外的风险。&lt;/p&gt;

&lt;p&gt;rebase 大概的操作步骤如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 将当前分支的版本追加到从远程 pull 回来的节点之后
git pull --rebase

# 若发生冲突，则按以上其他方法进行解决，解决后继续
git rebase --continue

# 直到所有冲突得以解决，待项目最后上线前再执行
git push origin

# 若多次提交修改了同一文件，可能需要直接跳过后续提交，按提示操作即可
git rebase --skip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###问：如何在不提交修改的前提下，执行 pull / merge 等操作？&lt;/p&gt;

&lt;p&gt;有些修改没有完全完成之前，可能不需要提交到版本库，圡方法是将修改的文件 copy 到 git 仓库之外的目录临时存放，pull / merge 操作完成之后，再 copy 回来。&lt;/p&gt;

&lt;p&gt;这样的做法一个是效率不高，另外一个可能会遗漏潜在的冲突。此类需求最好是通过 git stash 命令来完成，它可以将当前工作状态（WIP，work in progress）临时存放在 stash 队列中，待操作完成后再从 stash 队列中重新应用这些修改。&lt;/p&gt;

&lt;p&gt;以下是 git stash 常用命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 查看 stash 队列中已暂存了多少 WIP
git stash list

# 恢复上一次的 WIP 状态，并从队列中移除
git stash pop

# 添加当前 WIP，注意：未提交到版本库的文件会自动忽略，只要不运行 git clean -fd . 就不会丢失
git stash

# 恢复指定编号的 WIP，同时从队列中移除
git stash pop stash@{num}

# 恢复指定编号的 WIP，但不从队列中移除
git stash apply stash@{num}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###问：如何在 git log 中查看修改的文件列表？&lt;/p&gt;

&lt;p&gt;默认的 git log 会显示较全的信息，且不包含文件列表。使用 –name-status 可以看到修改的文件列表，使用 –oneline 可以将参数简化成一行。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log --name-status --oneline
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每次手动加上参数很麻烦，可以通过自定义快捷命令的方式来简化操作：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global alias.ls &#39;log --name-status --oneline --graph&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行以上配置后，可通过 git ls 命令来实现「自定义 git log」效果，通过该方法也可以创建 git st 、 git ci 等一系列命令，以便沿用 svn 命令行习惯。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global alias.st &#39;status --porcelain&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;更多 git log 参数，可通过 git help log 查看手册。&lt;/p&gt;

&lt;p&gt;如果是看上一次提交的版本日志，直接运行 git show 即可。&lt;/p&gt;

&lt;p&gt;此外，如果你的 Mac 安装了zsh（参考《全新Mac安装指南（编程篇），那么可以直接使用 gst、glog 等一系列快捷命令，详情见此列表：Plugin:git 。&lt;/p&gt;

&lt;p&gt;###问：git submodule update 时出错怎么解决？&lt;/p&gt;

&lt;p&gt;例如，在执行 git submodule update 时有以下错误信息：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;fatal: reference is not a tree: f869da471c5d8a185cd110bbe4842d6757b002f5
Unable to checkout ‘f869da471c5d8a185cd110bbe4842d6757b002f5’ in submodule path ‘source/i18n-php-server’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在此例中，发生以上错误是因为 i18n-php-server 子仓库在某电脑 A 的「本地」commit 了新的版本 「f869da471c5d8a185cd110bbe4842d6757b002f5」，且该次 commit 未 push origin。但其父级仓库 i18n-www 中引用了该子仓库的版本号，且将引用记录 push origin，导致其他客户机无法 update 。&lt;/p&gt;

&lt;p&gt;解决方法，在电脑 A 上将 i18n-php-server 版本库 push origin 后，在其他客户机上执行 git submodule update 。或者用以上提到的 git reset 方法，将子仓库的引用版本号还原成 origin 上存在的最新版本号。&lt;/p&gt;

&lt;p&gt;###其他问题&lt;/p&gt;

&lt;p&gt;设置本地分支与远程分支保持同步，在第一次 git push 的时候带上 -u 参数即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push origin master -u 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;支持中文目录与文件名的显示（git 默认将非 ASCII 编码的目录与文件名以八进制编码展示）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config core.quotepath off
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;常用的打 tag 操作，更多请查看《Git 基础 - 打标签》&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 列出所有本地 tag
git tag   

# 本地新增一个 tag，推送至 origin 服务器
git tag -a v1.0.0 -m &#39;tag description&#39;
git push origin v1.0.0

# 删除本地与 origin tag
git tag -d v1.0.0
git push origin --delete v1.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用 git GUI 客户端（如，SoureTree、Github Desktop）能极大的提升分支管理效率。分支合并操作通常只有两种情况：从 origin merge 到本地，使用 git pull 即可；从另外一个本地分支 merge 到当前分支，使用 git merge &lt;分支名&gt;，以下是常用命令：&lt;/分支名&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 新建分支 branch1，并切换过去
git checkout -b branch1

# 查看所有本地与远程分支
git branch -a

# 修改完成后，切换回 master 分支，将 branch1 分支合并进来
git checkout master
git merge branch1

# 删除已完成合并的分支 branch1
git branch -d branch1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###参考资料&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pro Git 简体中文版&lt;/li&gt;
  &lt;li&gt;Git权威指南&lt;/li&gt;
  &lt;li&gt;命令行man手册&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>解决百度爬虫无法抓取github pages</title>
   <link href="http://http://coolshell.info/blog/2016/02/baidu-spider-forbidden.html"/>
   <updated>2016-02-18T00:00:00+00:00</updated>
   <id>/blog/2016/02/baidu-spider-forbidden</id>
   <content type="html">&lt;p&gt;由于Github Pages禁止了百度爬虫，导致自己的博客无法被百度索引到，使用七牛云和又拍云做镜像存储能解决问题，但是要求域名要备案，由于我的域名从Godaddy上购买的，国内备案手续太复杂，故放弃了CDN的办法，琢磨了一段时间找到了Gitcafe的解决办法。&lt;/p&gt;

&lt;p&gt;##解决方案&lt;/p&gt;

&lt;p&gt;既然不想放弃Github，唯一的办法就是不让百度爬虫直接抓取GIthub的内容，而是抓取自己网站的一个镜像，将网站的内容镜像到&lt;a href=&quot;www.gitcafe.com&quot;&gt;gitcafe&lt;/a&gt;,步骤如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;注册 gitcafe 帐号&lt;/li&gt;
  &lt;li&gt;创建一个跟用户名一样的项目,比如我的&lt;a href=&quot;https://gitcafe.com/ezlippi/ezlippi&quot;&gt;https://gitcafe.com/ezlippi/ezlipp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;把 github 的项目推到 gitcafe 上面去，步骤如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git remote add gitcafe https://gitcafe.com/ezlippi/ezlippi.git
git checkout -b gitcafe-pages
切换到一个新分支 &lt;span class=&quot;s1&quot;&gt;&#39;gitcafe-pages&#39;&lt;/span&gt;
git push gitcafe master:gitcafe-pages
Username &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://gitcafe.com&#39;&lt;/span&gt;:ezlippi 
Password &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;https://ezlippi@gitcafe.com&#39;&lt;/span&gt;
Counting objects: 17, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
Delta compression using up to 4 threads.
Compressing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10/10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10/10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 1.06 KiB | 0 bytes/s, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
Total 10 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reused 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
To https://gitcafe.com/ezlippi/ezlippi.git
   f0d0296..51611d7  master -&amp;gt; gitcafe-pages&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;gitcafe绑定自己的域名&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;点击项目的右上角的 项目配置&lt;/li&gt;
  &lt;li&gt;在项目的 基础设置 中配置项目主页&lt;/li&gt;
  &lt;li&gt;在 page服务 中添加自己的域名，比如我这里是&lt;a href=&quot;coolshell.info&quot;&gt;coolshell.info&lt;/a&gt;和&lt;a href=&quot;www.coolshell.info&quot;&gt;www.coolshell.info&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;DNS的配置中增加一项 CNAME.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我使用 dnspod 这个提供商来管理DNS.CNAME一般可以按解析路线或者网络类型来单独配置,网络类型选择国内或者联通，设置之后等待一段时间百度的抓取就 恢复正常了，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dnspod.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Ubuntu下Apache服务器的配置</title>
   <link href="http://http://coolshell.info/blog/2016/01/apache-configuration-in-ubuntu.html"/>
   <updated>2016-01-20T00:00:00+00:00</updated>
   <id>/blog/2016/01/apache-configuration-in-ubuntu</id>
   <content type="html">&lt;p&gt;##安装Apache&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo apt-get update
sudo apt-get install apache2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;打开浏览器输入你的IP地址或者localhost,就会进入到Apache服务器的默认Index页面。结果如下所示：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It works!
This is the default web page for this server.
The web server software is running but no content has been added, yet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;##配置文件&lt;/p&gt;

&lt;p&gt;在Ubuntu系统下Apache的主要配置文件在/etc/apache2文件夹下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;cd /etc/apache2
ls -F&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;apache2.conf  envvars     magic            mods-enabled/  sites-available/
conf.d/       httpd.conf  mods-available/  ports.conf     sites-enabled/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个目录下有许多纯文本文件和子目录，基本作用如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;apache2.conf:这是服务器的主要配置文件，几乎所有的配置都通过这个文件来完成，但是为了简洁推荐使用单独的指定的文件来配置不同的模块。&lt;/li&gt;
  &lt;li&gt;ports.conf:这个文件用来指定虚拟主机监听的端口号，如果你配置了SSL的时候要检查这个文件是否正确。&lt;/li&gt;
  &lt;li&gt;conf.d/:这个目录用来控制Apache的一些特殊配置，比如SSL配置。&lt;/li&gt;
  &lt;li&gt;sites-available/:这个目录包括所有不同web站点的虚拟主机文件，不同的请求对应不同的内容，这些都是已有的，并不是正在使用的。&lt;/li&gt;
  &lt;li&gt;sites-enabled/:这个目录包含正在使用的虚拟主机的定义，通常只包含到sites-available目录下文件的符号链接。&lt;/li&gt;
  &lt;li&gt;mods-[enabled,available]/:和上面的类似，只不过这里面包含的是可用的模块。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从Apache的配置目录结构可以知道，它并不是通过单一的文件来配置，贰拾通过模块化来把整个系统拆分成不同的功能，从而能够动态地增加和修改功能。&lt;/p&gt;

&lt;p&gt;##深入Apache2.conf文件内容&lt;/p&gt;

&lt;p&gt;文件主要分成三部分，全局配置、默认服务器配置和虚拟主机配置，在Ubuntu系统下，这个文件主要负责全局配置，默认服务器和虚拟主机可以通过Include语句来处理。&lt;/p&gt;

&lt;p&gt;Include语句允许Apache读取其他配置文件的内容到当前位置，结果就是Apache启动的时候动态生成一个配置文件，如果拉到文件底部会看到很多Include语句，比如ports.conf等。&lt;/p&gt;

&lt;p&gt;###全局配置&lt;/p&gt;

&lt;p&gt;####Timeout&lt;/p&gt;

&lt;p&gt;这个参数默认设置为300，意思是服务器有300s来处理每个请求。&lt;/p&gt;

&lt;p&gt;####KeepAlive&lt;/p&gt;

&lt;p&gt;如果设置为On，将允许同个客户端每个连接一直保持来处理多个请求(HTTP长连接)&lt;/p&gt;

&lt;p&gt;####MaxKeepAliveRequests&lt;/p&gt;

&lt;p&gt;这个参数用来设置每个连接最多能处理多少个单独的请求&lt;/p&gt;

&lt;p&gt;####KeepAliveTimeout&lt;/p&gt;

&lt;p&gt;这个参数设置下一个请求来之前来等待多久，超过这个时间自动关闭这个connection。&lt;/p&gt;

&lt;p&gt;##MPM配置&lt;/p&gt;

&lt;p&gt;Ubuntu 14.04下MPM(Multi-Processing Module)配置默认采用了event module,如果你系统采用的是prefork module,可以通过如下方法来切换：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo a2dismod mpm_prefork
sudo a2enmod mpm_event
sudo service apache2 restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;##配置虚拟主机&lt;/p&gt;

&lt;p&gt;1.首先禁用默认的Apache虚拟主机：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo a2dissite 000-default.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;2.在/etc/apache2/sites-available目录下创建一个example.com.conf文件，把example.com替换成你的域名：&lt;/p&gt;

&lt;p&gt;文件：/etc/apache2/sites-available/example.com.conf&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;VirtualHost&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; *:80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;ServerAdmin&lt;/span&gt; webmaster@example.com
  &lt;span class=&quot;nc&quot;&gt;ServerName&lt;/span&gt; example.com
  &lt;span class=&quot;nc&quot;&gt;ServerAlias&lt;/span&gt; www.example.com
  &lt;span class=&quot;nc&quot;&gt;DocumentRoot&lt;/span&gt; /var/www/example.com/public_html/
  &lt;span class=&quot;nc&quot;&gt;ErrorLog&lt;/span&gt; /var/www/example.com/logs/error.log 
  CustomLog /var/www/example.com/logs/access.log combined
 &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;VirtualHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;3.给你的网站内容和日志文件创建目录，把example.com替换成你的域名：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo mkdir -p /var/www/example.com/public_html
sudo mkdir /var/www/example.com/logs&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;4.启用这个站点：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo a2ensite example.com.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;5.重启Apache&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo service apache2 restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;安装对脚本语言的支持&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Perl support:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install libapache2-mod-perl2 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Python support:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install libapache2-mod-python &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;PHP support:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install libapache2-mod-php5 php5 php-pear php5-xcache&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###Apache中启用和禁用网站和模块&lt;/p&gt;

&lt;p&gt;1.启用和禁用网站：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo a2ensite 虚拟主机文件名(example.com.conf)
sudo a2dissite 虚拟主机文件名(example.com.conf)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;2.启用和禁用模块&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo a2enmod 模块配置文件名
sudo a2dismod  模块配置文件名&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;##启用用户文件夹实现文件服务器的功能&lt;/p&gt;

&lt;p&gt;1.使用如下命令启用userdir模块:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo a2enmod userdir&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;2.编辑userdir.conf配置userdir模块:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo vim /etc/apache2/mods-enabled/userdir.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;内容如下，把public_html改为你的个人文件夹名称，如果不存在则创建：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;IfModule&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; mod_userdir.c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;nc&quot;&gt;UserDir&lt;/span&gt; public_html
        &lt;span class=&quot;nc&quot;&gt;UserDir&lt;/span&gt; disabled root
 
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /home/*/public_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;		&lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;All&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;MultiViews&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Indexes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;SymLinksIfOwnerMatch&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Limit&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; GET POST OPTIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;			&lt;span class=&quot;c&quot;&gt;# Apache &amp;lt;= 2.2:&lt;/span&gt;
		        &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; allow,deny
		        &lt;span class=&quot;nc&quot;&gt;Allow&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; all
 
		        &lt;span class=&quot;c&quot;&gt;# Apache &amp;gt;= 2.4:&lt;/span&gt;
		        &lt;span class=&quot;c&quot;&gt;#Require all granted&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;LimitExcept&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; GET POST OPTIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;			&lt;span class=&quot;c&quot;&gt;# Apache &amp;lt;= 2.2:&lt;/span&gt;
		        &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; deny,allow
		        &lt;span class=&quot;nc&quot;&gt;Deny&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; all
 
			&lt;span class=&quot;c&quot;&gt;# Apache &amp;gt;= 2.4:&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;#Require all denied&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;LimitExcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;IfModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;3.创建个人文件夹并重启APache&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo service apache2 restart
mkdir /home/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/public_html &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;接下来在浏览器中输入http://localhost/~username/就可以访问你的个人文件夹了，把username替换为你的用户名。&lt;/p&gt;

&lt;p&gt;###给你的文件添加访问权限&lt;/p&gt;

&lt;p&gt;把上面的AllowOverride All改为AllowOverride AuthConfig,然后给你的服务器添加认证用户，认证用户保存在/var/www/passwd/中，需要使用htpasswd命令来添加用户，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;htpasswd -c /var/www/passwd/public_html lippi 
New password: mypassword
Re-type new password: mypassword
Adding password for &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt; lippi &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后的userdir.conf是这样的：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;IfModule&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; mod_userdir.c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;	&lt;span class=&quot;nc&quot;&gt;UserDir&lt;/span&gt; public_html 
	UserDir disabled root

	&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /home/*/public_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;		&lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;FileInfo&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;AuthConfig&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Limit&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Indexes&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;MultiViews&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Indexes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;SymLinksIfOwnerMatch&lt;/span&gt; IncludesNoExec
		&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Limit&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; GET POST OPTIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#		Require all granted&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;AuthType&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Basic&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;AuthName&lt;/span&gt; &quot;lippi&quot;
			&lt;span class=&quot;nc&quot;&gt;AuthUserFile&lt;/span&gt; /var/www/passwd/public_html
			&lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;valid-user&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;LimitExcept&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; GET POST OPTIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;			&lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; all denied
		&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;LimitExcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;IfModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>终端复用软件之tmux简介</title>
   <link href="http://http://coolshell.info/blog/2016/01/tmux-guide.html"/>
   <updated>2016-01-19T00:00:00+00:00</updated>
   <id>/blog/2016/01/tmux-guide</id>
   <content type="html">&lt;p&gt;Tmux是一个优秀的终端复用软件，支持多标签，也支持窗口内部面板的分割，更重要的是，Tmux提供了窗体随时保存和恢复的功能。想象一下假如你在公司的服务器上开了许多窗口调试程序，回到家时通过SSH连接公司电脑又要打开一堆繁琐的窗口，而且还忘记了当时调试到哪一步了，那Tmux可以帮你解决这个难题，当SSH连接断开重新连接后能够恢复到原来的工作环境。&lt;/p&gt;

&lt;p&gt;##安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install tmux
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装完成后输入tmux进入软件，界面类似一个下方带有状态栏的终端。&lt;/p&gt;

&lt;p&gt;##基本概念&lt;/p&gt;

&lt;p&gt;Tmux基于典型的c/s模型，主要分为会话、窗口和面板三个元素：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Session：输入tmux后就创建了一个会话，一个会话是一组窗体的集合。&lt;/li&gt;
  &lt;li&gt;Window：会话中一个可见的窗口。&lt;/li&gt;
  &lt;li&gt;Pane:一个窗口可以分成多个面板。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/tmux.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图中左下角的3显示为当前会话，随后1 vim,2 bash,3 ssh 分别是3个窗口，蓝色bash表示当前窗口，图中用蓝色数字标记的1,2,3分别是bash窗口的三个面板。你还可以在tmux配置文件中给状态栏添加时间、天气等信息。&lt;/p&gt;

&lt;p&gt;##Tmux基本操作&lt;/p&gt;

&lt;p&gt;Tmux的所有操作必须使用一个前缀进入命令模式，默认前缀为Ctrl+b，很多人会改为Ctrl+a,你可以修改tmux.conf配置文件来修改默认前缀：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;#前缀设置为&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Ctrl&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;g&lt;/span&gt; prefix C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;
#解除&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Ctrl&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
ubind C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;修改之后重启Tmux生效，或者先按Ctrl+b，然后输入：，进入命令行模式， 在命令行模式下输入：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;source&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;/&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;tmux&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;conf&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;你也可以在配置文件中加入下面这句话，以后改了配置文件只需要按前缀+r了。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;#将&lt;span class=&quot;k&quot;&gt;r&lt;/span&gt; 设置为加载配置文件，并显示&lt;span class=&quot;s2&quot;&gt;&quot;reloaded!&quot;&lt;/span&gt;信息
bind &lt;span class=&quot;k&quot;&gt;r&lt;/span&gt; source&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;/&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;tmux&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;conf&lt;/span&gt; \; display &lt;span class=&quot;s2&quot;&gt;&quot;Reloaded!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;加入如下几条语句， 现在切换面板就和vim一样了：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;# map Vi movement keys &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; pane movement keys
bind &lt;span class=&quot;k&quot;&gt;h&lt;/span&gt; select&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;L
bind &lt;span class=&quot;k&quot;&gt;j&lt;/span&gt; select&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;D
bind &lt;span class=&quot;k&quot;&gt;k&lt;/span&gt; select&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;U
bind &lt;span class=&quot;k&quot;&gt;l&lt;/span&gt; select&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;R&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;##复制/粘贴&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;按前缀+[ 进入复制模式&lt;/li&gt;
  &lt;li&gt;按 space 开始复制，移动光标选择复制区域&lt;/li&gt;
  &lt;li&gt;按 Enter 复制并退出copy-mode。&lt;/li&gt;
  &lt;li&gt;将光标移动到指定位置，按前缀+ ] 粘贴&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果把tmux比作vim的话，那么我们大部分时间都是处于编辑模式，只需要在配置文件(~/.tmux.conf)中加入如下行即可以像 vim一样使用hjkl移动:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;#copy&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt; 将快捷键设置为&lt;span class=&quot;k&quot;&gt;vi&lt;/span&gt; 模式
setw &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;keys &lt;span class=&quot;k&quot;&gt;vi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;##会话的创建和保存&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;终端运行tmux + 会话名，创建或打开会话&lt;/li&gt;
  &lt;li&gt;前缀 + d 退出并保存会话&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##窗口操作&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;前缀 + c 创建一个新的window&lt;/li&gt;
  &lt;li&gt;前缀 + b 重命名当前window&lt;/li&gt;
  &lt;li&gt;前缀 + &amp;amp; 关闭当前window&lt;/li&gt;
  &lt;li&gt;前缀 + n 移动到下一个窗口&lt;/li&gt;
  &lt;li&gt;前缀 + p 移动到前一个窗口&lt;/li&gt;
  &lt;li&gt;前缀 + l 切换到上一个窗口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##面板操作&lt;/p&gt;

&lt;p&gt;在配置文件中添加下面两行就可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;前缀+ |-&lt;/code&gt;来水平和垂直分割窗口：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;# use PREFIX &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; split window horizontally and PREFIX &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; split vertically
bind &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; split&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;window &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;h&lt;/span&gt;
bind &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; split&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;window &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;添加如下命令到配置文件后后可以使用HJKL来调整窗口大小:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;	
# &lt;span class=&quot;k&quot;&gt;resize&lt;/span&gt; panes using PREFIX H&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; J&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; K&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; L
bind H &lt;span class=&quot;k&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;L &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
bind J &lt;span class=&quot;k&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;D &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
bind K &lt;span class=&quot;k&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;U &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
bind L &lt;span class=&quot;k&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;R &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其他操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;Ctrl-b&gt; + 方向键，切换窗口
&lt;/Ctrl-b&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;Ctrl-b&gt; + q 显示所有面板
&lt;/Ctrl-b&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;Ctrl-b&gt; + !/x 关闭当前面板

&lt;/Ctrl-b&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看所有的按键，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Ctrl-b&amp;gt; + ?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;##Tmux个性化&lt;/p&gt;

&lt;p&gt;你可以使用&lt;a href=&quot;https://github.com/erikw/tmux-powerline&quot;&gt;tmux-powerline&lt;/a&gt;来美化你的状态栏。&lt;/p&gt;

&lt;p&gt;美化之后的效果是这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/tmux2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后附上我的tmux配置文件：&lt;a href=&quot;https://github.com/LippiOuYang/Profiles/blob/master/tmux.conf&quot;&gt;.tmux.conf&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>提高效率的Android Studio插件</title>
   <link href="http://http://coolshell.info/blog/2015/09/android-studio-plugins.html"/>
   <updated>2015-09-09T00:00:00+00:00</updated>
   <id>/blog/2015/09/android-studio-plugins</id>
   <content type="html">&lt;p&gt;这里记录那些可以显著提升Android开发效率的Studio插件，好的插件和快捷键可以提高效率，缩短开发周期。这里介绍的插件大部分都可以通过Studio的插件市场下载安装，安装方法如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;in Android Studio: go to Preferences → Plugins → Browse repositories,搜索你要安装的插件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;download it and install via Preferences → Plugins → Install plugin from disk&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;主要的插件：&lt;/p&gt;

&lt;p&gt;1.H.A.X.M和GenyMotion这两个网上介绍的比较多，就不说了&lt;/p&gt;

&lt;p&gt;2.&lt;a href=&quot;https://github.com/avast/android-butterknife-zelezny&quot;&gt;ButterKnifeZelezny&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ButterKnife视图注入插件,如果你的Activity布局里面有很多组件，写一堆的findViewById岂不是很烦人，ButterKnife解决了这个烦人的问题,这个插件的效果图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/butterknife.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href=&quot;https://github.com/winterDroid/android-drawable-importer-intellij-plugin&quot;&gt;android-drawable-importer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;它可以减少导入缩放图像到Android项目所需的工作量,Android  Drawable Importer添加了一个在不同分辨率导入画板或缩放指定图像到定义分辨率的选项,该插件包含三个主要功能，可以在New下的Android module的任意地方通过右键访问它们：
1、引入AndroidIcons Drawable
选择资源，指定颜色，改变目标资源名字以及选中所有你想引入的资源。然后会自动创建所有缺失的文件夹，如果已经存在相同名字的drawable，则会进行警告。&lt;/p&gt;

&lt;p&gt;2、Scaled Drawable
选择资源并指定分辨率。如果你想缩放引入的图片，你应该选择“其他”选项，然后填充目标分辨率和目标宽度/高度。&lt;/p&gt;

&lt;p&gt;3、Multisource-Drawable
引入不同资源的Drawable，设计者根据如下结构设计不同资源的Drawable zip文件，引入一个zip文件即可引入不同分辨率的Drawable。
	root/
      	./drawable_ldpi.png
     	 ./drawable_mdpi.png
      	./drawable_hdpi.png
     	 ./drawable_xhdpi.png
如图所示:
&lt;img src=&quot;/images/drawableimport.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href=&quot;https://github.com/pbreault/adb-idea&quot;&gt;adb-idea&lt;/a&gt;
支持直接在AS面板中进行ADB操作,快捷键:
* Mac OSX: Ctrl+Shift+A
* Windows/Linux: Ctrl+Alt+Shift+A&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/adb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href=&quot;https://github.com/inmite/android-selector-chapek&quot;&gt;SelectorChapek&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;按照命名规范自动生成Selector,如图所示：&lt;/p&gt;

&lt;p&gt;如何使用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在资源文件夹下右击，比如’drawable_xhdpi’下：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/selector1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;选择Generate Android Selectors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/selector2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所有的selector自动出现在drawable文件夹下&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/selector3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.&lt;a href=&quot;https://github.com/zzz40500/GsonFormat&quot;&gt;GsonFormat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;根据Gson　api接口生成相应的实体类&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gson_format.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;7.&lt;a href=&quot;https://github.com/mcharmas/android-parcelable-intellij-plugin&quot;&gt;ParcelableGenerator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Android中的序列化有两种方式，分别是实现Serializable接口和Parcelable接口，但在Android中是推荐使用Parcelable，只不过我们这种方式要比Serializable方式要繁琐,这个插件帮助我们解决繁琐的事情。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/parcelable_generator.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;8.&lt;a href=&quot;https://github.com/konifar/android-material-design-icon-generator-plugin&quot;&gt;android-material-design-icon-generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/capture.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;9.&lt;a href=&quot;https://github.com/nicoulaj/idea-markdown&quot;&gt;idea-markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/preview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;10.&lt;a href=&quot;ns.jetbrains.com/plugin/7366?pr=&quot;&gt;Android Holo Colors Generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/holocolor.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;11.&lt;a href=&quot;https://www.codota.com/&quot;&gt;Codota&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;搜索代码的插件，他的搜索源，不仅只有Github，而且还有知名博客和开发者网站，让你搜索一个东西，不用在找上半天；&lt;/p&gt;

&lt;p&gt;除了搜索功能，首页的下方还罗列比较流行的类库，还提供保存代码的CodeBox，同时还提供了Chrome 插件和Android Studio 插件，最后通过Google，Github，Facebook 任意一个授权登录即可使用；&lt;/p&gt;

&lt;p&gt;而且当你点击搜索的结果（Java class）的时候，右侧会显示UML 视图，而且左边的代码如果点击会有高亮现实，而且还会显示Doc，并提供了API Doc 的链接&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/codota.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;12.&lt;a href=&quot;https://github.com/JetBrains/ideavim&quot;&gt;ideaVim&lt;/a&gt;
   有了它之后就可以在Idea里指尖如飞了&lt;/p&gt;

&lt;p&gt;13.&lt;a href=&quot;https://github.com/square/leakcanary&quot;&gt;LeakCanary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Square最近刚开源的一个非常有用的工具，强烈推荐，帮助你在开发阶段方便的检测出内存泄露的问题，使用起来更简单方便&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/leak.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;14.checkStyle 和　findBugs都还不错&lt;/p&gt;

&lt;p&gt;15.如果你像推荐其他插件，可以在本文最上方点击纠错后添加，然后pull request。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Volley源码分析</title>
   <link href="http://http://coolshell.info/blog/2015/08/volley-source-code.html"/>
   <updated>2015-08-27T00:00:00+00:00</updated>
   <id>/blog/2015/08/volley-source-code</id>
   <content type="html">&lt;p&gt;说到Android的网络库，比较常用的就是Volley和okHttp了，最近重温了下Volley的源码，感觉应该写点什么．Volley 是 Google 推出的 Android 异步网络请求框架和图片加载框架，适合数据量小通信比较频繁的情形．&lt;/p&gt;

&lt;p&gt;先看一下Volley的设计图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/volley.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##请求Request&lt;/p&gt;

&lt;p&gt;Volley里面每一个请求都是继承自Request抽象类，比如图中的StringRequest,JsonRequest,ImageRequest,请求最主要的几个属性有：http请求的方法method,请求资源url,是否应该缓存响应shouldCache,如果缓存的话就会有对应的缓存对象Cache.Entry,以及用来标识请求的序列号mSequence,当然这里的每一个请求是异步的，你还需要注册对应的响应监听器，&lt;code class=&quot;highlighter-rouge&quot;&gt;private final Listener&amp;lt;String&amp;gt; mListener;&lt;/code&gt;,这个后面再讲．&lt;/p&gt;

&lt;p&gt;##请求队列&lt;/p&gt;

&lt;p&gt;请求队列是用来管理所有请求的，里面有四个集合类，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//这个waitingRequest是因为用户可能重复提交了相同的请求，第一次提交一个请求后&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//会在这个Map里添加一个key,表示这个请求已经在处理了，如果再提交相同的请求就会&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//把这个请求添加到这个key对应的请求队列里，并把第一次的请求加入到缓存队列里，&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//后面再发出这个请求就可以从缓存中获取响应了&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mWaitingRequests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//用来存储当前所有的请求&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCurrentRequests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//这是个优先队列，存储那些需要缓存的请求，处理这类请求时，先从缓存中查询，&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//如果缓存miss再把它丢进networkRequest中从网络中获取数据  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PriorityBlockingQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCacheQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PriorityBlockingQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//这个队列用于存储需要直接从网络中获取数据的请求&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PriorityBlockingQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mNetworkQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PriorityBlockingQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面讲到请求是保存在优先队列中，那么请求按照什么排序呢？自然是优先级了，
如果优先级一样就按照序列号排序，先进先出．请求一共有四个优先级，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Priority&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;NORMAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;IMMEDIATE&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;既然是这样那么请求一定实现了java的&lt;code class=&quot;highlighter-rouge&quot;&gt;Comparable&lt;/code&gt;接口了，没错，而且正如前面所说请求按照优先级和序列号来排序，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Priority&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPriority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Priority&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPriority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// High-priority requests are &quot;lesser&quot; so they are sorted to the front.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Equal priorities are sorted by sequence number to provide FIFO ordering.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mSequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mSequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ordinal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ordinal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;##请求分派RequestDispatcher&lt;/p&gt;

&lt;p&gt;Volley里面有两个&lt;code class=&quot;highlighter-rouge&quot;&gt;Dispacher&lt;/code&gt;,一个是&lt;code class=&quot;highlighter-rouge&quot;&gt;CacheDispatcher&lt;/code&gt;,另一个是&lt;code class=&quot;highlighter-rouge&quot;&gt;NetworkDispatcher&lt;/code&gt;,两个都是继承自线程，&lt;code class=&quot;highlighter-rouge&quot;&gt;CacheDispatcher&lt;/code&gt;启动后从mCacheQueue里取出请求，根据请求的CacheKey(实际上是url)从缓存中检索数据，如果没有检索到数据就把它重新丢进&lt;code class=&quot;highlighter-rouge&quot;&gt;mNetworkQueue&lt;/code&gt;中从网络中获取数据，如果缓存命中同时检查下缓存是否过期，如果缓存过期了照样要重新获取数据，否则调用&lt;code class=&quot;highlighter-rouge&quot;&gt;ResponseDelivery&lt;/code&gt;把响应传递给相应的对象(实际上是调用请求注册的相应监听器)．
Volley默认启动了４个&lt;code class=&quot;highlighter-rouge&quot;&gt;NetworkDispatcher&lt;/code&gt;线程来处理网络请求，为了避免过多的网络请求造成UI卡死，Volley默认把这些线程的优先级设置为后台线程&lt;code class=&quot;highlighter-rouge&quot;&gt;Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;##HttpStack&lt;/p&gt;

&lt;p&gt;Volley的&lt;code class=&quot;highlighter-rouge&quot;&gt;NetworkDispatcher&lt;/code&gt;线程默认调用的是Network类的&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpStack&lt;/code&gt;的方法来执行Http请求，HttpStack的实现有两种，如果系统在 Gingerbread 及之后(即 API Level &amp;gt;= 9)，采用基于 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpURLConnection&lt;/code&gt; 的 HurlStack，如果小于 9，采用基于 HttpClient 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpClientStack&lt;/code&gt;。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SDK_INT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HurlStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClientStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidHttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userAgent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;得到了 HttpStack,然后通过它构造一个代表网络（Network）的具体实现BasicNetwork。&lt;/p&gt;

&lt;h3 id=&quot;httpurlconnection--androidhttpclienthttpclient&quot;&gt;HttpURLConnection 和 AndroidHttpClient(HttpClient的封装)如何选择&lt;/h3&gt;

&lt;p&gt;在 Froyo(2.2) 之前，HttpURLConnection 有个重大 Bug，调用 close() 函数会影响连接池，导致连接复用失效，所以在 Froyo 之前使用 HttpURLConnection 需要关闭 keepAlive。
另外在 Gingerbread(2.3) HttpURLConnection 默认开启了 gzip 压缩，提高了 HTTPS 的性能，Ice Cream Sandwich(4.0) HttpURLConnection 支持了请求结果缓存。
再加上 HttpURLConnection 本身 API 相对简单，所以对 Android 来说，在 2.3 之后建议使用 HttpURLConnection，之前建议使用 AndroidHttpClient。&lt;/p&gt;

&lt;h3 id=&quot;user-agent&quot;&gt;关于 User Agent&lt;/h3&gt;

&lt;p&gt;通过代码我们发现如果是使用 AndroidHttpClient，Volley 还会将请求头中的 User-Agent 字段设置为 App 的 ${packageName}/${versionCode}，如果异常则使用 “volley/0”，不过这个获取 User-Agent 的操作应该放到 if else 内部更合适。而对于 HttpURLConnection 却没有任何操作，为什么呢？
如果用 Fiddler 或 Charles 对数据抓包我们会发现，我们会发现 HttpURLConnection 默认是有 User-Agent 的，类似：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dalvik/1.6.0 (Linux; U; Android 4.1.1; Google Nexus 4 - 4.1.1 - API 16 - 768x1280_1 Build/JRO03S)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;经常用 WebView 的同学会也许会发现似曾相识，是的，WebView 默认的 User-Agent 也是这个。实际在请求发出之前，会检测 User-Agent 是否为空，如果不为空，则加上系统默认 User-Agent。在 Android 2.1 之后，我们可以通过&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String userAgent = System.getProperty(&quot;http.agent&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;得到系统默认的 User-Agent，Volley 如果希望自定义 User-Agent，可在自定义 Request 中重写 getHeaders() 函数&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthFailureError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// self-defined user agent&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headerMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;headerMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;android-open-project-analysis/1.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headerMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;##DiskBasedCache&lt;/p&gt;

&lt;p&gt;Volley默认是把缓存保存在文件中，并在内存中保存了缓存的头部，缓存头部占的最大内存可以设置，便于快速查询缓存是否存在．CacheHeader的主要属性有
文件大小size,缓存的etag,获取缓存的key,ttl,softTtl以及responseHeader.根据key来查询缓存，先从内存中查询是否存在CacheHeader,如果存在再从文件中把响应的data再读出来．每次向缓存中插入数据时先看看是否达到了缓存的最大大小，如果超过了容量就按照LRU算法从缓存中删除一部分数据直到满足需求，LRU算法实现很简单，直接调用LinkedHashMap来实现，&lt;code class=&quot;highlighter-rouge&quot;&gt;private final Map&amp;lt;String, CacheHeader&amp;gt; mEntries = new LinkedHashMap&amp;lt;String, CacheHeader&amp;gt;(16,0.75f,true)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;##ByteArrayPool&lt;/p&gt;

&lt;p&gt;ByteArrayPool很有意思，这是一个字节数组池，Volley进行网络操作的时候会把HTTP响应的内容写入到字节数组中，如果频繁的申请大的字节数组可能会对系统性能有所影响，所以Volley采取了对象池的方法来解决频繁申请内存的问题，它的实现也比较简单，用的两个字节数组链表，一个按照使用的先后排序，另一个按照字节数组的大小排序，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mBuffersByLastUse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mBuffersBySize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&amp;gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;池当然也有它的大小限制．申请字节数组的时候从mBuffersBySize中申请一个比请求大小更大的数组给他，如果没找到就调用new从堆中申请一个字节数组返回给它，数组用完之后调用returnBuff返回给数组池中，当数组池的大小超过了规定的大小时，就按照LRU算法删除一些数组．那么这个对象池具体在哪里用上了呢？答案是在BasicNetwork中，调用HttpStack返回了Http响应，然后需要把响应的Entity转换为字节数组，一般我们会用ByteArrayOutputStream来做，但是ByteArrayOutputStream是需要从堆中申请一个字节数组的，所以Volley创建了一个继承自ByteArrayOutputStream的类PoolingByteArrayOutputStream并覆写了相应的方法．不得不佩服谷歌的工程师啊，每个细节都考虑的很周到．&lt;/p&gt;

&lt;h2 id=&quot;http&quot;&gt;关于Http缓存&lt;/h2&gt;

&lt;p&gt;Volley中对Http缓存作了相应的处理，在使用BasicNetwork执行Request之前，会给请求添加相应的缓存首部，利用&lt;code class=&quot;highlighter-rouge&quot;&gt;If-None-Match&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;If-Modified-Since&lt;/code&gt;对过期缓存或者不新鲜缓存，进行请求再验证,代码如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addCacheHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// If there&#39;s no cache entry, we&#39;re done.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;etag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;If-None-Match&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;etag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serverDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serverDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;If-Modified-Since&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DateUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;formatDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;同样，在收到Http响应之后，Volley也会检查响应首部中的缓存字段，根据&lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Expires&lt;/code&gt;首部来计算缓存的过期时间。如果两个首部都存在情况下，以&lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control&lt;/code&gt;为准。代码如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseCacheHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetworkResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverExpires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;softExpire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasCacheControl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverEtag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headerValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;headerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Date&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serverDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseDateAsEpoch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;headerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hasCacheControl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headerValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no-store&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;max-age=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;maxAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseLong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;must-revalidate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;proxy-revalidate&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;maxAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;headerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expires&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serverExpires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseDateAsEpoch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headerValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;serverEtag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ETag&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Cache-Control takes precedence over an Expires header, even if both exist and Expires&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// is more restrictive.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasCacheControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;softExpire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxAge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverExpires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Default semantic for Expire header in HTTP specification is softExpire.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;softExpire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverExpires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;etag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverEtag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;softTtl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;softExpire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;softTtl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;serverDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;responseHeaders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;读完Volley的源码之后只有一个感觉，就是&lt;code class=&quot;highlighter-rouge&quot;&gt;谷歌出品，必属精品&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Zsh-Linux下最好的Shell简介</title>
   <link href="http://http://coolshell.info/blog/2015/08/linux-zsh.html"/>
   <updated>2015-08-23T00:00:00+00:00</updated>
   <id>/blog/2015/08/linux-zsh</id>
   <content type="html">&lt;p&gt;没听过Shell?Shell是Unix/Linux系统下的外壳，负责外界和Linux内核的交互，将用户输入的命令转换成内核能懂的语言，执行相应的指令，然后将输出返回给用户．&lt;/p&gt;

&lt;p&gt;###查看当前系统所有的Shell&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls /etc/shells
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;结果如下：
&lt;img src=&quot;/images/zsh1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###安装Zsh&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install zsh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;简单吧？把它设置为默认Shell,&lt;code class=&quot;highlighter-rouge&quot;&gt;chsh -s /bin/zsh&lt;/code&gt;
它的默认配置为.zshrc,你可以在里面配置各种按键别名，你也可以使用Github上比较流行的oh-my-zsh配置，安装方法：&lt;/p&gt;

&lt;p&gt;自动安装：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;手动安装：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装之后进入一个Git分支，显示是这样的，很炫对吧？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/zsh2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以前切换工作目录一直按cd加tab是不是很麻烦，现在有了Zsh只需要输入d,他会显示最近使用的工作目录，然后输入数字进入对应的目录，是不是很省事？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/zsh3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;它的功能不局限如此，时间长了忘记了tar的参数？输入&lt;code class=&quot;highlighter-rouge&quot;&gt;tar -&lt;/code&gt;按一下tab键会显示所有的命令行参数，再按一下tab进入选择模式，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/zsh4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以前杀死进程是不是用&lt;code class=&quot;highlighter-rouge&quot;&gt;ps aux | grep python&lt;/code&gt;
&lt;img src=&quot;/images/zsh5.png&quot; alt=&quot;&quot; /&gt;
现在只需要输入&lt;code class=&quot;highlighter-rouge&quot;&gt;kill python&lt;/code&gt;再按一下tab键，结果变成这样了,神奇把？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/zsh6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###插件&lt;/p&gt;

&lt;p&gt;在.zshrc文件里可以配置你要使用的插件，Zsh提供上千种插件，你可以配置自己Shell的主题，我用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;ZSH_THEME=”robbyrussell”&lt;/code&gt;,你还可以配置需要的插件，我的插件是&lt;code class=&quot;highlighter-rouge&quot;&gt;plugins=(git autojump mvn gradle)&lt;/code&gt;,简单介绍下git和autojump:&lt;/p&gt;

&lt;p&gt;git. 当你进入一个git目录时，Zsh会显示git和所在的分支，对git的命令进行了简化，例如 gco=’git checkout’、gd=’git diff’、gst=’git status’、g=’git’等等，熟练使用可以大大减少 git 的命令长度，命令内容可以参考~/.oh-my-zsh/plugins/git/git.plugin.zsh&lt;/p&gt;

&lt;p&gt;autojump. 安装方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://github.com/downloads/joelthelion/autojump/autojump_v21.1.2.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;解压缩后进入目录，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;./install.sh&lt;/code&gt;,最后加上这一行代码到.zshrc中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;amp;&amp;amp; . ~/.autojump/etc/profile.d/autojump.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装了autojump之后，zsh 会自动记录你访问过的目录，通过 j + 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全，例如你访问过workspace目录，输入j work 即可正确跳转。j –stat 可以看你的历史路径库。&lt;/p&gt;

&lt;p&gt;你还可以参考&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;Zsh&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Latex中英文环境设置</title>
   <link href="http://http://coolshell.info/blog/2015/08/latex-fonts-settings.html"/>
   <updated>2015-08-22T00:00:00+00:00</updated>
   <id>/blog/2015/08/latex-fonts-settings</id>
   <content type="html">&lt;p&gt;Latex默认是不支持中文的,后来有人开发了XeLatex来支持非英文字符,xetex是一种使用Unicode的TeX排版引擎,并默认其输入文件为UTF-8编码，也即,英文字符与非英文字符不再有区别，原生支持系统字体，这意味着我们无需再额外编译字体, 故可以在不进行额外配置的情况下直接使用操作系统中安装的字体。&lt;/p&gt;

&lt;p&gt;安装完TexLive后,编写下面的tex文件：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\documentclass&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[12pt,a4paper]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;article&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;xltxtra,fontspec,xunicode&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\setmainfont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;WenQuanYi Zen Hei&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% 设置文档默认字体&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% 不显示文档生成日期&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\XeTeX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; 中英文环境测试&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;\begin{document}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\XeTeX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; is a &lt;span class=&quot;k&quot;&gt;\TeX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; typesetting engine using Unicode and supporting modern font technologies.&lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\XeTeX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; 是一个使用Unicode的&lt;span class=&quot;k&quot;&gt;\TeX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;排版系统，并支持一些现代字体技术.&lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\end{document}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;使用下面命令编译:&lt;code class=&quot;highlighter-rouge&quot;&gt;XeLatex test.tex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;输出结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/latex1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面的英文也使用了中文字体, 看上去不是很美观. 于是, xetex 和 CJK 商量了一下, 就有了xeCJK 宏包, 可以分别指定中英文字体, 于是可以很好的排版中英混合的文章了．&lt;/p&gt;

&lt;p&gt;当然首先是要使用xeCJK包,添加上&lt;code class=&quot;highlighter-rouge&quot;&gt;\usepackage[slantfont,boldfont]{xeCJK}&lt;/code&gt;
分别设置中英文字体, 英文字体可以不用设置, xetex会调用默认的字体:&lt;code class=&quot;highlighter-rouge&quot;&gt;\setCJKmainfont{SimKai}   % 设置缺省中文字体为楷体&lt;/code&gt;
下面是测试文件：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;	&lt;span class=&quot;k&quot;&gt;\documentclass&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[12pt,a4paper]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;article&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;xltxtra,fontspec,xunicode&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[slantfont,boldfont]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;xeCJK&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\setCJKmainfont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;WenQuanYi Zen Hei&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;% 设置缺省中文字体&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%\setCJKmonofont{Hei}   % 设置等宽字体&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;%\setmainfont{Optima}   %% 不指定，使用Tex的默认英文衬线字体&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%\setmonofont{Monaco}   % 英文等宽字体&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%\setsansfont{Trebuchet MS} % 英文无衬线字体&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% 不显示文档生成日期&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\XeTeX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; 中英文环境测试&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;\begin{document}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\XeTeX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; is a &lt;span class=&quot;k&quot;&gt;\TeX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; typesetting engine using Unicode and supporting modern font technologies.&lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\XeTeX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; 是一个使用Unicode的&lt;span class=&quot;k&quot;&gt;\TeX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;排版系统，并支持一些现代字体技术.&lt;span class=&quot;k&quot;&gt;\\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\end{document}&lt;/span&gt;

 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;输出结果如下：
&lt;img src=&quot;/images/latex2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样效果就好很多了．&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Dagger依赖注入浅析</title>
   <link href="http://http://coolshell.info/blog/2015/08/dagger-dependency-injection.html"/>
   <updated>2015-08-13T00:00:00+00:00</updated>
   <id>/blog/2015/08/dagger-dependency-injection</id>
   <content type="html">&lt;p&gt;最早接触依赖注入这个概念是在使用Spring框架的时候，一开始没太在意它，后面开发项目的过程中发现使用依赖注入可以降低代码的耦合性,Spring的依赖注入是通过反射机制实现的，而Dagger依赖注入是在编译期生成辅助的类，这些类继承特定父类或实现特定接口，程序在运行时 Dagger 加载这些辅助类，调用相应接口完成依赖生成和注入.&lt;/p&gt;

&lt;p&gt;##什么是控制反转？&lt;/p&gt;

&lt;p&gt;比如你有一个DataProcessor类，DataProcessor里有一个DataFinder对象，用于查找数据，DataFinder是一个接口，它有一个实现类:IndexDataFinder,如果你要使用DataFinder来查找数据，传统的做法是在DataProcessor构造器里新建一个DataFinder对象，然后再调用DataFinder的findData方法:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DataProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dataFinder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IndexDataFinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在上述的实现中，DataProcessor就和DataFinder紧密的耦合在一起．假设后来DataFinder又有一个新的实现类SQLDataFinder,根据需求来选择相应的实现，这时候你要怎么做呢？传统的做法就是给构造器传递一个int参数，根据参数的值来初始化DataFinder,还要处理异常参数如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DataProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataFinderIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataFinderIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dataFinder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IndexDataFinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;	
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataFinderIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dataFinder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLDataFinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样子虽然代码变得简单，但是DataProcessor类仍然依赖于具体的实现，实际上DataProcessor不应该有这么多的控制逻辑，它只需要负责调用dataFinder的方法来完成它的逻辑，至于是什么类型的DataFinder它不应该考虑．我们试着将控制DataFinder的任务交给客户：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DataProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataFinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dataFinder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataFinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样DataProcessor就不用依赖具体的实现了，不用管到底是哪种类型的DataFinder,也就是说将选择DataFinder的控制权交给了客户端，实现了”控制反转”．控制反转只是一个概念而已，依赖注入是他的一种实现方法，依赖注入就是将实例变量传递到一个对象中去，依赖注入的方法有两种：构造器注入和setter方法注入．&lt;/p&gt;

&lt;p&gt;##Dagger依赖注入&lt;/p&gt;

&lt;p&gt;Spring IoC和Google Guice的依赖注入都很有名，但它们都是使用Java的反射机制来实现的，这对性能要求比较高的Android平台来说就不太适合了，于是Dagger应运而生.&lt;/p&gt;

&lt;p&gt;###编译期&lt;/p&gt;

&lt;p&gt;Dagger在编译时使用注解处理工具(APT)对所有的类进行扫描，这里包括两个工具InjectAdapterProcessor和ModuleAdapterProcessor,InjectAdapterProcessor会扫描所有的被@inject注解的元素，包括静态域，实例域和构造器，然后根据这几个元素生成一个内部对象InjectedClass，它的定义如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InjectedClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staticFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecutableElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;..............&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;根据域是否是静态域注入方式会有不同，非静态域生成InjectAdapter对象并保存在同个被注入类同个目录下，比如被注入的类为A,生成的类名称为A&lt;script type=&quot;math/tex&quot;&gt;InjectAdapter,InjectAdapter包含了所有需要注入的实例域和构造器参数的信息．如果被注解的是静态域，则生成A&lt;/script&gt;StaticInjection.这里需要注意的是如果你是在构造函数上用@inject注解而且构造函数有其他参数，你需要给这些参数添加@inject注解或者在Module中提供provide方法（下面会讲到Module）．InjectAdapter类的生成Dagger用到了JavaPoet这个用于生成Java源文件的类库，用法简介：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;MethodSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;methodBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addModifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PUBLIC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STATIC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;returns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$T.out.println($S)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, JavaPoet!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;TypeSpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HelloWorld&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addModifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PUBLIC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FINAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;JavaFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javaFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavaFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.helloworld&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;javaFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面这种过注入依赖的方法适合我们自己编写的类，如果是第三方类库的话你没有修改它的源代码给它的构造器或者域添加@inject注解，这时候就需要使用第二种注入依赖的方法.通过新建一个用@Module注解的类，这个类告诉Dagger编译期哪些类要注入依赖，这个Module包含哪些子Module，通过编写provide方法来生成一些依赖实例．具体用法举例如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;injects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CoffeeApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//表示CoffeeApp这个类需要注入依赖&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PumpModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//包括PumpModule这个Module&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;	
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DripCoffeeModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//所有需要被注入的实例都用@Provides方法提供&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Provides&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Heater&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;provideHeater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ElectricHeater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//方法可以有参数，前提是这个参数能够被注入&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Provides&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pump&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;providePump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Heater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thermosiphon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;	
	 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;编译时Dagger编译期扫描所有被@Provides注解的方法，然后扫描它所在的类是否被＠Module注解，根据Module注解的参数injects,includes,complete,library生成ModuleAdapter类，保存为［Module名称］$$ModuleAdapter的形式,内部使用的是generateModuleAdapter方法，定义如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavaFile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateModuleAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExecutableElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;providerMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;injects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;injects&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;includes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;includes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;complete&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;library&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//省略了其他部分&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行时，在 Application 或某个具体模块的初始化处，使用ObjectGraph类来加载部分依赖(实质上是利用编译时生成的ModuleAdapters加载了所有的ProvidesBinding)，形成一个不完整的依赖关系图。 这个不完整的依赖关系图生成之后，就可以调用ObjectGraph的相应函数来获取实例和注入依赖了。实现依赖注入的函数有两个：&lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectGraph.get(Class&amp;lt;T&amp;gt; type)&lt;/code&gt;函数，用于直接获取对象；&lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectGraph.inject(T instance)&lt;/code&gt;函数，用于对指定对象进行属性的注入。在这些获取实例和注入依赖的过程中，如果用到了还未加载的依赖，程序会自动对它们进行加载(实质上是加载的编译时生成的InjectAdapter)。在此过程中，内存中的 DAG 也被补充地越来越完整。&lt;/p&gt;

&lt;p&gt;简单介绍一些Dagger的Binding 类，它相当于依赖关系 DAG 图中的节点，依赖关系 DAG 图中得每一个节点都有一个由 APT 生成的继承自 Binding 的类与之对应，而依赖关系 DAG 图中的每一个节点与Host和Dependency一一对应，所以每个Host或Dependency必然有一个由 APT 生成的继承自 Binding 的子类与之对应，Binding.java 实现了两个接口，第一个是 javax 的Provider接口，此接口提供了 get() 函数用于返回一个Dependency实例，当然也可以是Host实例。第二个接口是 Dagger 中的MembersInjector接口，此接口提供了 injectMembers() 用来向Host对象中注入Dependency。
单纯的DependencyBinding只要实现Provider接口，在 get() 函数中返回自己的实例即可。单纯的HostBinding只要实现MembersInjector，在 injectMembers() 函数中调用DependencyBinding的 get() 函数得到依赖，然后对自己的依赖进行注入即可。如果一个类既是Host又是Dependency，则与它对应的Binding这两个接口都需要实现。&lt;/p&gt;

&lt;p&gt;还是之前那个例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CoffeeApp&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CoffeeMaker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffeeMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;coffeeMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;brew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//建立依赖关系图&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ObjectGraph&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectGraph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectGraph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DripCoffeeModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//调用objectGraph．get(CoffeeApp.class)来获取一个CoffeeApp实例&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;CoffeeApp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffeeApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectGraph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CoffeeApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;coffeeApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;CoffeeMaker的定义如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CoffeeMaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lazy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Heater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pump&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	 &lt;span class=&quot;n&quot;&gt;heater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	 &lt;span class=&quot;n&quot;&gt;pump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	 &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; [_]P coffee! [_]P &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	 &lt;span class=&quot;n&quot;&gt;heater&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这样在运行中Dagger会自动注入CoffeeMaker实例以及它依赖的对象heater和pump.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>彻底理解Gradle的任务</title>
   <link href="http://http://coolshell.info/blog/2015/07/gradle-tasks-guide.html"/>
   <updated>2015-07-27T00:00:00+00:00</updated>
   <id>/blog/2015/07/gradle-tasks-guide</id>
   <content type="html">&lt;p&gt;在Gradle的build文件中，任务是构建活动最基本的单元，它是许多构建指令的集合，下面我将仔细介绍Gradle任务的细节。&lt;/p&gt;

&lt;p&gt;##声明一个任务&lt;/p&gt;

&lt;p&gt;声明任务很简单，你只需要一个任务名：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;你可以在命令行中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle tasks&lt;/code&gt;来查看所有的任务：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;------------------------------------------------------------
Root Project
------------------------------------------------------------
Help tasks
----------
dependencies - Displays the dependencies of root project &#39;task-lab&#39;.
help - Displays a help message
projects - Displays the subprojects of root project &#39;task-lab&#39;.
properties - Displays the properties of root project &#39;task-lab&#39;.
13
tasks - Displays the tasks in root project &#39;task-lab&#39;.
Other tasks
-----------
hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##任务的动作&lt;/p&gt;

&lt;p&gt;很显然执行&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle hello&lt;/code&gt;不会有任何结果，因为你没有给这个任务添加动作，我们可以通过左移操作符给任务添加一个动作(在Groovy语言中左移操作符可以重载成在任务的最后添加一个动作)：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hello,world&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们可以在任务的后面引用前面声明的任务:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hello,&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;world&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;接下来在命令行中运行&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle hello&lt;/code&gt;,输出如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle hello
hello, world
$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##任务的配置&lt;/p&gt;

&lt;p&gt;Gradle新手可能会很容易混淆任务的动作和配置，看下面这个例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initializeDatabase&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;initializeDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;connect to database&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;initializeDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;update database schema&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;initializeDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;configuring database connection&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//这里没有左移操作符&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行这个构建脚本，猜猜输出是什么：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//－b 选项用于指定gradle构建脚本文件名
$ gradle -b scratch.gradle initializeDatabase
configuring database connection
:initializeDatabase
connect to database
update database schema
$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果第三个代码块我们用的是«操作浮，这个消息就是在最后而不是最先打印出来了，我把用{}扩起来的部分统称为一个闭包，上面第三个闭包并不是任务的动作，他直接使用了任务名+闭包，在这里它是一个配置块。在Gradle的构建生命周期里配置阶段是在执行阶段前运行的，所以这个块里的代码最先执行了。&lt;/p&gt;

&lt;p&gt;Gradle的构建生命周期分为三部分，初始化、配置和执行阶段。在执行阶段，任务按照他们的依赖顺序按序执行，在配置阶段所有的任务都转换成Gradle的内部对象模型，通常叫做有向无环图(DAG)。图的节点就是构建脚本里的任务，任务与任务之间可以定义依赖关系。初始化阶段是Gradle用来找出哪些项目会参与到项目构建中，这在多项目构建中很重要。&lt;/p&gt;

&lt;p&gt;和动作闭包一样，配置闭包也具有可加性，你可以像下面这样编写构建脚本：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initializeDatabase&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;initializeDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;connect to database&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;initializeDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;update database schema&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;initializeDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;configuring &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;initializeDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;database connection&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;配置块是用来放置变量和数据结构的地方，这些可能会在任务的执行过程中用到。&lt;/p&gt;

&lt;p&gt;##一切任务都是对象&lt;/p&gt;

&lt;p&gt;前面讲过Gradle会在任务执行之前把他们创建成内部的对象模型，每一个你声明的任务都是一个任务对象，这个对象有自己的属性和方法，就和Java语言里的对象一样，我们可以控制每个任务对象的类型。默认情况每一个新创建的任务都是DefaultTask类型，就像Java语言里的java.lang.Object一样，每一个Gradle任务都继承自DefaultTask类型，你也可以定义自己的类型。DefaultTask事实上没有做任务事情，不过它具有基本的属性和方法用来和Gradle项目模型交互。接下来我会一一介绍每个任务都有的方法和属性。&lt;/p&gt;

&lt;p&gt;##DefaultTask的方法&lt;/p&gt;

&lt;p&gt;###dependsOn(task)&lt;/p&gt;

&lt;p&gt;用于给任务添加一个依赖的任务，被依赖的任务总是在依赖它的任务之前运行，你可以有多种方式声明这种依赖关系，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//最简单的方法&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadTestData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   	&lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSchema&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//使用&amp;lt;&amp;lt;声明依赖&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadTestData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSchema&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 使用单引号声明依赖&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadTestData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;createSchema&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//显式调用dependsOn方法&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadTestData&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;loadTestData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSchema&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 快捷方法&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadTestData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;dependsOn:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSchema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;任务可以依赖多个任务，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//每次声明一个任务&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadTestData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compileTestClasses&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSchema&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 依次传递任务名&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compileTestClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSchema&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 显式调用方法&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compileTestClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSchema&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//快捷方式&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;dependsOn:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compileTestClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSchema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###doFirst(closure)&lt;/p&gt;

&lt;p&gt;在任务的最开始添加一个可执行的代码块，doFirst方法允许你添加动作到现有的任务中，这个任务是在其他插件中定义的，你没有办法修改，但是你可以多次调用doFirst方法在任务执行之前添加一些代码块。
你可以使用任务对象调用doFirst方法，传递一个闭包给这个方法，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setupDatabaseTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 任务现有的代码&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;load test data&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setupDatabaseTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;create schema&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后运行gradle setupDatabaseTests,结果如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle setupDatabaseTests
:setupDatabaseTests
create schema
load test data
$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你也可以在任务的配置块里面调用doFirst方法，不过要记住配置块里的代码在任务的动作之前执行：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setupDatabaseTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;load test data&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setupDatabaseTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;doFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;create schema&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;doFirst方法也是可加的，你可以多次调用这个方法在任务的最前面添加代码块，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setupDatabaseTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;load test data&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setupDatabaseTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;create database schema&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setupDatabaseTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;drop database schema&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行结果如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle world
:setupDatabaseTests
drop database schema
create database schema
load test data
$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###doLast(closure)&lt;/p&gt;

&lt;p&gt;doLast方法和doFirst方法很类似，它用于在任务的最后面添加一段代码，这里就不重复了。&lt;/p&gt;

&lt;p&gt;###onlyIf(closure)&lt;/p&gt;

&lt;p&gt;onlyIf方法用于决定是否执行一个任务，这里使用闭包返回的值来作为onlyIf的判断依据，在Groovy语言中，一个闭包的最后一个表达式用来作为这个闭包的返回值，即使你没有声明return语句，看一个例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSchema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;create database schema&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadTestData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;dependsOn:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSchema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;load test data&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;loadTestData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onlyIf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;load.data&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;true&#39;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//当系统属性load.data为true时这个闭包返回true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;看下下面的运行结果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//这里没有系统属性load.data
$ build loadTestData
create database schema
:loadTestData SKIPPED

//在命令行中传递系统属性
$ gradle -Dload.data=true loadTestData
:createSchema
create database schema
:loadTestData
load test data
$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##DefaultTask的属性&lt;/p&gt;

&lt;p&gt;###didWork&lt;/p&gt;

&lt;p&gt;一个用来标识任务是否成功完成的boolean属性，不是所有的任务都是在完成之后设置didWork变量，一些自带的任务比如Compile,Copy和Delete会根据动作是否执行成功来设置这个变量，JavaCompiler任务的实现是只要有一个文件成功编译就返回true,你可以在你自己的任务中设置didWork属性来反映构建代码的执行结果，举例如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;java&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;emailMe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;dependsOn:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compileJava&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compileJava&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;didWork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;SEND EMAIL ANNOUNCING SUCCESS&#39;&lt;/span&gt;
   	 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行结果如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle -b didWork.gradle emailMe
SEND EMAIL ANNOUNCING SUCCESS
$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###enabled&lt;/p&gt;

&lt;p&gt;一个用来设置任务是否会执行的一个属性，你可以设置enabled为false不让它运行，但是它依赖的任务依然会运行。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;process email templates&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendEmails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;dependsOn:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;templates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;send emails&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sendEmails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行结果如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle -b enabled.gradle sendEmails
:templates
process email templates
:sendEmails SKIPPED
$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###path&lt;/p&gt;

&lt;p&gt;一个字符串属性包含任务的全限定路径名，默认是一个冒号加上任务名，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echoMyPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;THIS TASK&#39;S PATH IS ${path}&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行一下，输出如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle -b path.gradle echoMyPath
THIS TASK&#39;S PATH IS :echoMyPath
$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最开始的冒号表示这个任务在最顶级的构建文件里面，由于Gradle支持多项目构建，一个项目里面可能有多个子项目，假如echoMyPath在子项目subProject构建文件中,那它的全限定路径名就是:subProject:echoMyPath。&lt;/p&gt;

&lt;p&gt;###description&lt;/p&gt;

&lt;p&gt;正如它的名字一样，这个用来给一个任务添加一段容易阅读的描述，你可以使用如下几种方法给任务添加描述。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;helloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;description:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Says hello to the world&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hello, world&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hello, world&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;helloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Says hello to the world&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Another way to do it&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;helloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Says hello to the world&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;##任务的类型&lt;/p&gt;

&lt;p&gt;我前面说过每个任务都有一个类型。除了DefaultTask之外，还有许多其他类型，你可以继承DefaultTask来声明新的类型，下面介绍几种比较重要的类型，以后可能经常会用到。&lt;/p&gt;

&lt;p&gt;###Copy&lt;/p&gt;

&lt;p&gt;Copy任务用于把文件从一个地方复制到另一个地方，你可以设置源目录、目标目录和要复制的文件类型，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copyFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;resources&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;target&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;**/*.xml&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;**/*.txt&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;**/*.properties&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果目标目录不存在,Copy任务会自动创建，上面这个任务会把resources目录下所有的xml、txt和propertied文件都复制到target目录。&lt;/p&gt;

&lt;p&gt;###Jar&lt;/p&gt;

&lt;p&gt;Jar任务用于打包源代码生成Jar文件，Java插件就自带这种类型，任务类型就叫做jar,这个任务把源代码文件和资源文件打包成Jar文件，并保存在build/libs目录下，文件名默认是用项目的名称。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;java&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;customJar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;manifest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//设置一些属性值(以键值对的形式)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;firstKey:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;firstValue&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;secondKey:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;secondValue&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//文件名&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;archiveName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hello.jar&#39;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//目标路径&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;destinationDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${buildDir}/jars&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//file方法用于把一个字符串变成文件对象&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//要打包的文件&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classes&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###JavaExec&lt;/p&gt;

&lt;p&gt;用于执行一个Java类的main()方法。举例说明：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;java&#39;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//maven中央仓库&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//项目依赖&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;commons-codec:commons-codec:1.5&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavaExec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dependsOn:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;org.gradle.example.commandline.MetaphoneEncoder&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The rain in Spain falls mainly in the plain&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classesDir&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runtime&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个构建文件声明了一个外部依赖，Apache Commons Codec库。一般情况下，在命令行运行一个class文件的步骤是编译Java源文件，然后在命令行中设置class文件的路径和依赖的库文件。我们上面encode任务声明了main函数所在的类，给他传递了命令行参数，设置classpath参数。&lt;/p&gt;

&lt;p&gt;##编写自定义的任务类型&lt;/p&gt;

&lt;p&gt;如果Gradle自带的任务类型不满足你的工作需求时，最简单的办法就是编写自定义的任务类型，Gradle提供了多种方法来实现，这里我介绍两种最常用的方法。&lt;/p&gt;

&lt;p&gt;###在Build文件中编写自定义任务类型&lt;/p&gt;

&lt;p&gt;假设你的构建脚本需要对MySQL数据库执行一些随机的查询，下面我们来编写一个任务执行数据库查询：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySqlTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;CREATE DATABASE IF NOT EXISTS example&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySqlTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dependsOn:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exampleuser&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@localhost&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;passw0rd&#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySqlTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dependsOn:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;exampleuser&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;passw0rd&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;example&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BIGINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MySqlTask&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//声明任务的属性&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;localhost&#39;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3306&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;root&#39;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;password&#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//表示这是任务的动作&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@TaskAction&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mysql -u ${username} -p${password} -h 	${hostname}-P ${port} ${database} -e &quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mysql -u ${username} -p${password} -h ${hostname} -P ${port} -e &quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;commandLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面的MySqlTask继承自DefaultTask,所有的任务都必须继承自这个类或者它的子类。任务声明了几个属性，然后声明了一个方法runQuery(),这个方法用@TaskAction注解了，表示这个方法会在任务执行的时候执行。最上面定义的三个任务都声明为MySqlTask类型，因此他们都自动继承了它的属性和方法，有些属性有默认值，你可以覆写这些默认值，来添加你的逻辑。&lt;/p&gt;

&lt;p&gt;###在源码树中定义自定义任务类型&lt;/p&gt;

&lt;p&gt;前面你在build文件中定义了一个自定义的MySqlTask类型，这样的缺点就是你无法在其他构建文件中使用它，只能把它的源码复制过去。我们可以在源码树的buildSrc目录下定义自定义任务类型，这个目录下的文件会被自动编译然后添加到项目的classpath中，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//任务MySqlTask并没有定义在构建脚本中&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySqlTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;CREATE DATABASE IF NOT EXISTS example&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySqlTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dependsOn:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exampleuser&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@localhost&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;passw0rd&#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySqlTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dependsOn:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;exampleuser&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;passw0rd&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;example&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BIGINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在buildSrc目录下新建一个文件MysqlTask.groovy,然后添加下面的代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.gradle.api.DefaultTask&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.gradle.api.tasks.TaskAction&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MySqlTask&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//声明任务的属性&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;localhost&#39;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3306&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;root&#39;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;password&#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//表示这是任务的动作&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@TaskAction&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mysql -u ${username} -p${password} -h 	${hostname}-P ${port} ${database} -e &quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mysql -u ${username} -p${password} -h ${hostname} -P ${port} -e &quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;commandLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;编译之后buildSrc目录树如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gradle-tasks.png&quot; alt=&quot;/images/gradle-tasks.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对Gradle的任务介绍就到此为止，大家如果还有不懂的地方可以去查看Gradle的官方文档&lt;a href=&quot;https://docs.gradle.org/current/release-notes&quot;&gt;https://docs.gradle.org/current/release-notes&lt;/a&gt;。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hibernate缓存配置笔记</title>
   <link href="http://http://coolshell.info/blog/2015/07/hibernate-cache-guide.html"/>
   <updated>2015-07-24T00:00:00+00:00</updated>
   <id>/blog/2015/07/hibernate-cache-guide</id>
   <content type="html">&lt;p&gt;Hibernate中提供了两级Cache，第一级别的缓存是Session级别的缓存，这一级别的缓存由hibernate管理的，一般情况下无需进行干预；第二级别的缓存是SessionFactory级别的缓存，它是属于进程范围或群集范围的缓存,这一级别的缓存可以进行配置和更改，并且可以动态加载和卸载。 Hibernate还为查询结果提供了一个查询缓存，它依赖于第二级缓存。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一级缓存和二级缓存的要点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hibernate1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hibernate2.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/hibernate3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用二级缓存&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这里以EhCache作为二级缓存的插件为例介绍Hibernate二级缓存的配置。&lt;/p&gt;

&lt;p&gt;（1）打开二级缓存：&lt;/p&gt;

&lt;p&gt;为Hibernate配置二级缓存：&lt;/p&gt;

&lt;p&gt;在主配置文件中hibernate.cfg.xml ：&lt;/p&gt;

&lt;p&gt;Hibernate3.3以上：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; 	&lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hibernate.cache.region.factory_class&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;net.sf.ehcache.hibernate.EhCacheRegionFactory&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hibernate4.0以上,使用&lt;code class=&quot;highlighter-rouge&quot;&gt;org.hibernate.cache.ehcache.EhCacheRegionFactory &lt;/code&gt;代替&lt;code class=&quot;highlighter-rouge&quot;&gt;net.sf.ehcache.hibernate.EhCacheRegionFactory&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;	&lt;span class=&quot;c&quot;&gt;&amp;lt;!--二级缓存--&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hibernate.cache.use_second_level_cache&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;&amp;lt;!--查询缓存--&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hibernate.cache.use_query_cache&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
	在查询定义的地方加入setCacheable(true)，这次查询就被缓存起来了 
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;（2）配置ehcache.xml&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;	&lt;span class=&quot;nt&quot;&gt;&amp;lt;ehcache&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;&amp;lt;!--缓存到硬盘的路径--&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;diskStore&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/home/lippi/ehcache&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;defaultCache&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;maxElementsInMemory=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;最多缓存多少个对象&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	eternal=&quot;false&quot;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 内存中的对象是否永远不变 --&amp;gt;&lt;/span&gt;
	timeToIdleSeconds=&quot;50&quot;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--空闲了多长时间，超过这个时间清除 --&amp;gt;&lt;/span&gt;
	timeToLiveSeconds=&quot;60&quot;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--总共存活时间 --&amp;gt;&lt;/span&gt;
	overflowToDisk=&quot;true&quot;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--内存中溢出就放到硬盘上 --&amp;gt;&lt;/span&gt;
	/&amp;gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;cache&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.hibernate.cache.spi.UpdateTimestampsCache&quot;&lt;/span&gt;  
           &lt;span class=&quot;na&quot;&gt;maxElementsInMemory=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5000&quot;&lt;/span&gt;   
           &lt;span class=&quot;na&quot;&gt;eternal=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;   
           &lt;span class=&quot;na&quot;&gt;overflowToDisk=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;  
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;cache&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.hibernate.cache.internal.StandardQueryCache&quot;&lt;/span&gt;  
           &lt;span class=&quot;na&quot;&gt;maxElementsInMemory=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10000&quot;&lt;/span&gt;   
           &lt;span class=&quot;na&quot;&gt;eternal=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;   
           &lt;span class=&quot;na&quot;&gt;timeToLiveSeconds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;120&quot;&lt;/span&gt;  
           &lt;span class=&quot;na&quot;&gt;overflowToDisk=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
	&lt;span class=&quot;c&quot;&gt;&amp;lt;!--
	java文件注解查找cache方法名的策略：如果不指定java文件注解中的	region=&quot;ehcache.xml中的name的属性值&quot;, 则使用name名为全限定包名, 如果不存在与类名匹配的cache名称, 则用 defaultCache，如果类中包含set集合, 则需要另行指定其cache指定缓存的对象，缓存哪一个实体类，下面出现的的属性覆盖上面出现的，没出现的继承上面的。
	--&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;cache&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.lippi.hibernate.pojos.Order&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;maxElementsInMemory=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;eternal=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;timeToIdleSeconds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;timeToLiveSeconds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;overflowToDisk=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ehcache&amp;gt;&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;（3）使用二级缓存需要在实体类中加入注解：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Load默认使用二级缓存，就是当查一个对象的时候，它先会去二级缓存里面去找，如果找到了就不去数据库中查了。&lt;/p&gt;

&lt;p&gt;Iterator默认的也会使用二级缓存，有的话就不去数据库里面查了，不发送select语句了。&lt;/p&gt;

&lt;p&gt;List默认的往二级缓存中加数据，假如有一个query，把数据拿出来之后会放到二级缓存，但是执行查询的时候不会到二级缓存中查，会在数据库中查。原因每个query中查询条件不一样。&lt;/p&gt;

&lt;p&gt;（4）也可以在需要被缓存的对象中hbm文件中的&lt;class&gt;标签下添加一个&lt;cache&gt;子标签:&lt;/cache&gt;&lt;/class&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;	&lt;span class=&quot;nt&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;class&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.lippi.hibernate.pojos.Order&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;table=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Orders&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;cache&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;usage=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;read-only&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;id&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;column&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/column&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;generator&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;orderNumber&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;orderNumber&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cost&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cost&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;integer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;many-to-one&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;customer&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.lippi.hibernate.pojos.Customer&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;customer_id&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cascade=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;save-update&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/many-to-one&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;存在一对多的关系，想要在在获取一方的时候将关联的多方缓存起来，需要在集合属性下添加&lt;cache&gt;子标签，这里需要将关联的对象的hbm文件中必须在存在&lt;class&gt;标签下也添加&lt;cache&gt;标签，不然Hibernate只会缓存OID。&lt;/cache&gt;&lt;/class&gt;&lt;/cache&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;	&lt;span class=&quot;nt&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;class&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.lippi.hibernate.pojos.Customer&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;table=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;customer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 主键设置--&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;id&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;column&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/column&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;generator&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 属性设置--&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;balance&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;balance&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;integer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;set&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;orders&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;inverse=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cascade=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;all&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lazy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fetch=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;join&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;cache&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;usage=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;read-only&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;customer_id&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;one-to-many&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.lippi.hibernate.pojos.Order&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/hibernate-mapping&amp;gt;&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(5)在hibernate.cfg.xml中配置ehcache.xml文件的位置&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;	&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cache.provider_configuration_file_resource_path&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;config/hibernate/ehcache/ehcache.xml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(6)和Spring集成&lt;/p&gt;

&lt;p&gt;在Spring集成Hibernate配置中，添加如下属性:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;	&lt;span class=&quot;nt&quot;&gt;&amp;lt;prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hibernate.cache.use_second_level_cache&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hibernate.cache.use_query_cache&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hibernate.cache.region.factory_class&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;net.sf.ehcache.hibernate.EhCacheRegionFactory&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Java Lambda简明教程</title>
   <link href="http://http://coolshell.info/blog/2015/06/java-lambda-expression.html"/>
   <updated>2015-06-03T00:00:00+00:00</updated>
   <id>/blog/2015/06/java-lambda-expression</id>
   <content type="html">&lt;p&gt;许多热门的编程语言如今都有一个叫做lambda或者闭包的语言特性，包括比较经典的函数式编程语言Lisp,Scheme,也有稍微年轻的语言比如JavaScript,Python,Ruby,Groovy,Scale,C#,甚至C++也有Lambda表达式。一些语言是运行在java虚拟机上，作为虚拟机最具代表的语言java当然也不想落后。&lt;/p&gt;

&lt;p&gt;#究竟什么是Lambda表达式?&lt;/p&gt;

&lt;p&gt;Lambda表达式的概念来自于Lambda演算，下面是一个java lambda的简单例子，&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;简单来看lambda像一个没有名字的方法，它具有一个方法应该有的部分：参数列表&lt;code class=&quot;highlighter-rouge&quot;&gt;int x&lt;/code&gt;，方法body　&lt;code class=&quot;highlighter-rouge&quot;&gt;return x+1&lt;/code&gt;,和方法相比lambda好像缺少了一个返回值类型、异常抛出和名字。返回值类型和异常是通过编译器在方法体中推导出来，在上面这个例子中返回值类型是int,没有抛出异常。真正缺少的就是一个名字，从这个角度来看，lambda表达式是一种匿名方法。&lt;/p&gt;

&lt;p&gt;#Lambda表达式和匿名内部类&lt;/p&gt;

&lt;p&gt;从上面的分析可以看出lambda和java内部类的特性有点相似，匿名内部类不只是一个方法，而是一个包含一个或多个方法的类，他们的作用都是一样的，都是作为方法的参数传递，我从JDK源码中提取出来&lt;code class=&quot;highlighter-rouge&quot;&gt;listFiles(FileFilter)&lt;/code&gt; 方法：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileFilter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()]);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;listFilter&lt;/code&gt;方法接收一个功能接口作为参数，在这里是FileFilter接口：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fileFilter&lt;/code&gt;接收一个&lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt;对象返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;值，&lt;code class=&quot;highlighter-rouge&quot;&gt;listFiles&lt;/code&gt;方法把&lt;code class=&quot;highlighter-rouge&quot;&gt;Filter&lt;/code&gt;应用到所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt;对象接收 那些&lt;code class=&quot;highlighter-rouge&quot;&gt;accept&lt;/code&gt;返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;的文件。对于&lt;code class=&quot;highlighter-rouge&quot;&gt;listFiles&lt;/code&gt;方法来讲我们必须传递一个函数式接口给他，这是&lt;code class=&quot;highlighter-rouge&quot;&gt;FileFileter&lt;/code&gt;的一个实现，一般我们通过匿名类来完成：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;／home/user/files&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;　我们现在可以用lambda来实现：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;／home/user/files&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这两种情况我们都是传递了一个函数式接口给方法就像传递对象一样，我们使用代码就像使用数据一样，使用匿名类我们实际上传递了一个对象给方法，使用lambda不再需要创建对象，我们只需要把lambda代码传递给方法。&lt;/p&gt;

&lt;p&gt;除了传递lambda之外我们还可以传递一个方法引用，比如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;#Lambda表达式的表示&lt;/p&gt;

&lt;p&gt;在之前的例子，我们使用lambda表达式定义了一个函数，我们可以把它作为参数传递给一个方法，方法把它当成一个对象来使用，lambda表达式有函数和对象的一些属性，看你从什么角度来看：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从概念来讲，lambda表达式是一个匿名函数，它有签名和方法体但是没有名字&lt;/li&gt;
  &lt;li&gt;当lambda表达式作为参数传递给方法时，接收方法把它当对象使用，在&lt;code class=&quot;highlighter-rouge&quot;&gt;listFiles&lt;/code&gt;方法内部，lambda表达式是一个对象的引用，在这里lambda表达式是一种常规的对象，比如有地址和类型。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从实际的角度来分析，lambda对象是由编译期和运行时系统来创建的，这就允许编译期进行优化而使用者不需要关心具体细节，编译器从lambda表达式的上下文环境来获取lambda对象的语义类型，但是编译期并不创建那个对象而是直到运行时由虚拟机动态创建，这里说的动态创建是指调用&lt;code class=&quot;highlighter-rouge&quot;&gt;invokedynamic&lt;/code&gt;字节码指令来创建。使用动态创建可以推迟对象的创建到对象第一次被使用时，如果你只是定义了lambda表达式而从未使用，它的类型和对象都不会创建。&lt;/p&gt;

&lt;p&gt;#函数式接口&lt;/p&gt;

&lt;p&gt;整个魔幻之处就在于类型的推导，这个类型称为目标类型，运行时系统动态创建的类型是目标类型的子类型。之前的那个例子我们看到目标类型是&lt;code class=&quot;highlighter-rouge&quot;&gt;FileFilter&lt;/code&gt;,在例子中我们定义了一个lambda表达式把它传递给listFiles方法，然后listFiles方法把它作为&lt;code class=&quot;highlighter-rouge&quot;&gt;FileFilter&lt;/code&gt;子类的一个对象来使用。这里看起来好像有点神奇，我们并没有声明lambda表达式实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;FileFilter&lt;/code&gt;接口，&lt;code class=&quot;highlighter-rouge&quot;&gt;listFiles&lt;/code&gt;方法也没有表明它很愉快的接收了lambda表达式，它只是需要一个&lt;code class=&quot;highlighter-rouge&quot;&gt;FileFilter&lt;/code&gt;的子类的对象，这是如何工作的？&lt;/p&gt;

&lt;p&gt;这里面的魔术在于编译期执行了类型推导，编译器根据lambda表达式的上下文来决定需要什么类型的对象，然后编译器观察lambda表达式是否兼容需要的类型。如果Java是一种函数式编程语言的话lambda表达式最自然的类型就是某种函数式类型，用来描述函数的一种特殊类型。函数式类型仅仅描述了函数的签名比如&lt;code class=&quot;highlighter-rouge&quot;&gt;(int,int)-&amp;gt;boolean&lt;/code&gt;.但是Java不是函数式编程语言因此没有函数式类型，语言的设计者可以选择添加一种新的类型，由于他们不想给Java的类型系统引入太多的改变，因此他们尝试寻找一种办法来集成lambda表达式到语言中而不需要添加函数式类型。&lt;/p&gt;

&lt;p&gt;结果他们使用函数式接口来代替，函数式接口是只有一个方法的接口，这样的接口在JDK里有很多，比如经典的Runnable接口，它只有一个方法&lt;code class=&quot;highlighter-rouge&quot;&gt;void run()&lt;/code&gt;,还有很多其他的，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;Readable,Callable,Iterable,closeable,Flushnable,Formattable,Comparable,Comparator&lt;/code&gt;,或者我们前面提到的&lt;code class=&quot;highlighter-rouge&quot;&gt;FileFilter&lt;/code&gt;接口。函数是接口和lambda表达式奕扬都只有一个方法，语言的设计者决定让编译器把lambda表达式转换成匹配的函数式接口。这种转换通常是自动的。比如我们前面提到的&lt;code class=&quot;highlighter-rouge&quot;&gt;(File f) -&amp;gt; { return f.isFile(); }&lt;/code&gt;,编译器知道listFiles方法的签名，因此我们需要的类型就是&lt;code class=&quot;highlighter-rouge&quot;&gt;FileFilter&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;FileFilter&lt;/code&gt;是这样的：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;FileFilter仅仅需要一个方法因此它是函数式接口类型，我们定义的lambda表达式有一个相匹配的签名，接收一个&lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt;对象，返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt;值，不抛出检查的异常，因此编译器把lambda表达式转换成函数式接口&lt;code class=&quot;highlighter-rouge&quot;&gt;FileFilter&lt;/code&gt;类型。&lt;/p&gt;

&lt;p&gt;假如我们有下面两个函数式接口：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们的lambda表达式兼容两种函数式接口类型：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;FileFilter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//错误，不兼容的类型&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当我们试图给两个变量相互赋值时编译器会报错，虽然两个变量都是同一个lambda表达式，原因很简单两个变量是不同的类型。也有可能出现编译器无法判断匹配的函数式接口类型，比如这个例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个赋值语句的上下文没有提供足够的信息来转换，因此编译器会报错，解决这个问题最简单的方法就是添加一个类型转换：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;#Lambda表达式和匿名内部类的区别&lt;/p&gt;

&lt;p&gt;Lambda表达式出现在我们通常需要匿名内部类的地方，在很多场合他们是可以互换的。但是他们还是有几个区别：&lt;/p&gt;

&lt;p&gt;###语法&lt;/p&gt;

&lt;p&gt;匿名类一般这样编写：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lis&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;而Lambda表达式有多种形式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fil&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;File:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###运行时成本&lt;/p&gt;

&lt;p&gt;匿名类相对Lambda表达式来讲多了一些成本，使用匿名类或造成新类型的创建、新类型对象的创建。运行时匿名内需要：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;类加载&lt;/li&gt;
  &lt;li&gt;内存分配、对象初始化&lt;/li&gt;
  &lt;li&gt;调用非静态方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lambda表达式需要函数式接口的转换和最终的调用，类型推导发生在编译期，不需要运行时消耗，之前提到过，lambda对象的创建是通过字节码指令&lt;code class=&quot;highlighter-rouge&quot;&gt;invokedynamic&lt;/code&gt;来完成的，减少了类型和实例的创建消耗。&lt;/p&gt;

&lt;p&gt;###变量绑定&lt;/p&gt;

&lt;p&gt;匿名类可以访问外部域的&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;变量，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;count: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// error: cnt is final&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;对于lambda表达式，cnt变量不需要显式声明为final的，一旦变量在lambda中使用编译期会自动把它当成是&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;的变量，换句话说在lambda中使用的外部域变量是隐式final的，&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;count: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// error: cnt is implicitly final&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;从java8开始匿名内部类也不需要再显式声明final类，编译器会自动把它当成是final。&lt;/p&gt;

&lt;p&gt;##作用域&lt;/p&gt;

&lt;p&gt;匿名内部类是一个类，也就是说它自己引入了一个作用域，你可以在里面定义变量，而lambda表达式没有自己的作用域。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// fine&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cnt is: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;lambda表达式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error: cnt has already been defined&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cnt is: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;不同的作用域规则对于&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt;关键字有不同的效果，在匿名类中&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;表示匿名类对象本身的引用，&lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt;表示匿名类的父类。在lambda表达式&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt;关键字意思和外部域中&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt;的意思一样，&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;一般是包含它的那个对象，&lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt;表示包含它的类的父类。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>安卓开发者必备的42个链接</title>
   <link href="http://http://coolshell.info/blog/2015/05/android-links.html"/>
   <updated>2015-05-19T00:00:00+00:00</updated>
   <id>/blog/2015/05/android-links</id>
   <content type="html">
&lt;p&gt;&lt;strong&gt;官方网站&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、&lt;a href=&quot;http://developer.android.com/develop/index.html&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;谷歌安卓开发者页面 &lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里是主站点，在这您可以找到一切资源帮助您开始安卓开发。此站包含了很多关于学习基础知识的资源，完整的API引用，以及你开始开发所需的各种工具。此站共分为五个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为初学者，你应该从&lt;a href=&quot;http://developer.android.com/tools/index.html&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;工具&lt;/a&gt;开始，这部分讲解了如何安装安卓SDK。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/training/index.html&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;教程&lt;/a&gt;为你提供了关于安卓的基本介绍，教给你如何写出你的第一个程序。它包括很多的资源，即便成为高级程序员你仍需阅读这里面的文章。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;(http://developer.android.com/guide/components/index.html &quot;&gt;API指南&lt;/a&gt;是对于不同API更技术性的手册，在更加深入理解安卓内部工作方面十分有用。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/reference/packages.html &quot;&gt;参考手册&lt;/a&gt;包含关于安卓库的完整的类引用。&lt;/li&gt;
&lt;li&gt;在&lt;a href=&quot;http://developer.android.com/google/index.html&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google Services&lt;/a&gt;部分你会找到更多库的信息，这些库可以让你连接到Google的服务，例如地图和Google+。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;教程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、&lt;a href=&quot;http://www.vogella.com/android.html&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Vogella的安卓教程&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里面包括许多给初学者以及高级安卓开发者的教程。这些文章由Lars Vogel编写，文章十分专业，为你提供对安卓架构的深入理解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、&lt;a href=&quot;http://www.edumobile.org/android/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;EduMobile 安卓开发与编程&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;在这里你可以找到许多基于单独话题的教程。这些教程并非按照循序渐进的顺序排列的，但是却包含了多种多样的独立话题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、&lt;a href=&quot;http://www.coreservlets.com/android-tutorial/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;CoreServlets安卓编程教程&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这是一个更循序渐进的教程系列，可以在你迈出安卓编程的第一步时为你指导。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、&lt;a href=&quot;http://www.linux.com/learn/docs/683628-android-programming-for-beginners-part-1&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;给初学者的安卓Linux编程&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该教程由三部分组成的，是由linux.com主办目标受众是具有Java背景的安卓初学者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、&lt;a href=&quot; http://androiddevblog.blogspot.co.uk/&quot;&gt;安卓快乐编程&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这是一个程序员学习安卓的博客。Kinam Choi在他了解安卓架构过程中通过他的经验帮助你来理解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、&lt;a href=&quot;http://blog.stylingandroid.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Styling Android&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;在这个博客中Mark Allison 专注于设计和安卓应用程序的布局。对于那些想要写出有着杰出UI、漂亮的程序的人来说，这是非常有用的资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8、&lt;a href=&quot;http://forum.xda-developers.com/showthread.php?t=2092271&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;“How To Make An Android App”  XDA 论坛&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
这里包含了一系列的论坛帖子，这些帖子指导你开发简单的安卓应用程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;视频教程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9、&lt;a href=&quot;http://www.youtube.com/playlist?list=PL2F07DBCDCC01493A&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;TheNewBoston 安卓教程&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这里有200个视频教程，这些教程专注于安卓开发的各个方面，从下载和安装安卓SDK开始。大多数视频在5分钟左右，这使得你可以在任何小憩的时候看上一段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10、&lt;a href=&quot;http://www.youtube.com/playlist?list=PLGLfVvz_LVvQUjiCc8lUT9aO0GsWA4uNe&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Derek Banas 安卓开发教程&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;Derek 定期的上传关于各种主题的视频教程。目前共有五个关于安卓开发的视频。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;11、&lt;a href=&quot; http://www.youtube.com/watch?v=I7i7B4SK0Z4&amp;amp;feature=channel&quot;&gt; “如何进行Android编程”&lt;/a&gt; — tgent07&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这里有10个简单的视频为你介绍安卓开发。有些视频是其它教程很少涉及到的内容。全部看完10个视频大概需要两个小时左右。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;12、&lt;a href=&quot;http://www.youtube.com/user/androiddevelopers&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;安卓开发者&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;如果你想紧跟安卓开发的步伐，那么你应该订阅官方的安卓开发者（Android Developers）频道。这里你会学习到最新的特性以及独门绝技。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;13、&lt;a href=&quot;http://www.youtube.com/user/AndroidAuthority&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Android Authority&lt;/a&gt; （安卓权威）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这是另一个专注于安卓的频道。主要是面向用户，但是作为一个好的开发者，你也应该时刻了解用户的观点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;14、&lt;a href=&quot;http://developer.android.com/tools/sdk/eclipse-adt.html&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;ADT Plugin for Eclipse&lt;/a&gt; （ADT 插件）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于新手而言，这是目前开发程序的标准的方式，也是最佳选项。Android Developer Tools 插件在&lt;span class=&quot;wp_keywordlink&quot;&gt;&lt;a href=&quot;http://res.importnew.com/eclipse&quot; title=&quot;Eclipse ImportNew主页&quot; target=&quot;_blank&quot;&gt;Eclipse&lt;/a&gt;&lt;/span&gt;中集成了安卓SDK并且包括一个图形化的布局编辑器，它能自动生成布局XML文件。如果你不喜欢Eclipse，你也可以尝试用&lt;a href=&quot;http://www.jetbrains.com/idea/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;IntelliJ IDEA 12&lt;/a&gt; 来替代。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;15、&lt;a href=&quot;http://androidannotations.org/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;AndroidAnnotations&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;AndroidAnnotations 通过使用Java注解来创建样板代码，从而简化了安卓应用程序的开发。它负责替你来最常用的任务从而显著地提高代码开发速度，同时增加了代码的可读性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;16、&lt;a href=&quot;https://github.com/roboguice/roboguice&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;RoboGuice&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;RoboGuice的目的在与为安卓开发加入依赖注入。 RoboGuice同时利用了标注以及Java映像来达到它的目标。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;资源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;17、&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.tual&amp;#038;hl=en&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;The Ultimate Android Library&lt;/a&gt; (T.U.A.L) 终极安卓库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这是一个展现了许多定制库、图标和视图的程序。你可以在你的设备上安装这个程序并且在action中看到这些元素。你也可以在他们的网站上贡献新的的库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;18、&lt;a href=&quot;http://www.androidviews.net/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;AndroidViews&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这里有许多定制视图、库和其它资源。你不用重新发明已有的东西，所以可以节省很多时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;19、&lt;a href=&quot;http://www.chupamobile.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Chupa Mobile&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;如果你愿意为应用程序组件花钱的话，那么这个市场就是为你而存在的。同是你也可以考虑卖出你自己的定制组件，小工具等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;APP UI 设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;20、&lt;a href=&quot; http://developer.android.com/design/index.html&quot;&gt;官方设计指南&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这是安卓网页上的官方站点。它包含所有程序设计的基本信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;21、&lt;a href=&quot;http://www.androidpatterns.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Android Patterns&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这是一个UI模式的目录，它解释了与你的应用程序交互的最常用和直观的方法。如果你想为用户创建无缝体验，那么这个网站是必须要看的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;22、&lt;a href=&quot;http://www.android-app-patterns.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Android App Patterns&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这里有很多截图，这些截图来自不同种类的应用程序。例如，你可以比较各种导航界面来发现哪一种最适合你的程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;23、&lt;a href=&quot;http://www.mobile-patterns.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Mobile Patterns&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这是另一个有很多截图的网站，既有安卓的也有iPhone。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;24、&lt;a href=&quot;http://speckyboy.com/2010/10/27/30-fresh-web-ui-mobile-ui-and-wireframe-kits/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;30 Web、Mobile Wireframe Toolkits&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这是一篇文章，文章包含了30个资源的链接。Wireframe 工具包让你可以更加专业地布局你的程序设计。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;25、&lt;a href=&quot;http://petrnohejl.github.io/Android-Cheatsheet-For-Graphic-Designers/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Graphic Designers Cheatsheet&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你想创建、实现你想要的布局，并快速发布的话，这是一个非常有用的资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;灵感&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;26、&lt;a href=&quot;http://androidniceties.tumblr.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Android Niceties&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这是Tumblr上的一些内容展示了最优美的安卓程序，它是启发灵感的好资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;27、&lt;a href=&quot; http://www.lovelyui.com/&quot;&gt;Lovely.ui&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这是一个展示漂亮的手机程序的网站。不仅有安卓程序也有其他的，但是对于手机程序设计者来说都非常有用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;博客&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;28、&lt;a href=&quot;http://android-developers.blogspot.co.uk/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;安卓官方开发者博客&lt;/a&gt;  &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这个官方博客来自于谷歌的安卓开发者。与这些内部人士保持联系以获得最新资讯是非常有必要的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;29、&lt;a href=&quot;http://androidweekly.net/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;安卓周刊&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;这个其实不太像是一个博客，它更像是一个每周的新闻通讯，它让你知道最新的安卓开发的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;30、&lt;a href=&quot;http://cyrilmottier.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Cyril Mottier&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
这是一个非常好的博客，它关注与安卓界当前的发展趋势。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;31、&lt;a href=&quot;http://commonsware.com/blog/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;The Commons Blog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于了解安卓开发的更深层次的信息， 这个博客是非常必要的读物。Mark Murphy关注与开发者需要注意的细节以及陷阱。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;32、&lt;a href=&quot;http://www.androiduipatterns.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Android UI Patterns&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;在Juhani的这个博客中，他专注于应用程序的设计和可用性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;人物&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;要保证时刻获取最新的安卓开发的信息，最好的方式就是与那些开发或为架构出力的人们保持联系。因为安卓是谷歌创建的，你会发现开发者社区主要在Google+上（而不是Facebook上）。但是你同样可以在其他社交网站上找到他们。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;33、&lt;a href=&quot;https://plus.google.com/114205433913370454414/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Mark Murphy&lt;/a&gt; （Commonsware）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;Mark Murphy撰写了“The Busy Coder’s Guide to Android Development”这本书，此书共有2300页，其中包含了大量有用的信息。他主要使用&lt;a href=&quot;https://plus.google.com/114205433913370454414/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;，但他也有一个&lt;a href=&quot;http://commonsware.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;自己的网站&lt;/a&gt;，同时也会在&lt;a href=&quot;http://stackoverflow.com/users/115145/commonsware&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;stack overflow&lt;/a&gt;上回答问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;34、&lt;a href=&quot;https://plus.google.com/+TorNorbye/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Tor Norbye&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tor Norbye 是谷歌公司安卓部门的一员。在安卓开发上，他从事视觉工具方面的工作。你也可在&lt;a href=&quot;https://twitter.com/tornorbye&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;和&lt;a href=&quot;http://www.youtube.com/user/tnorbye&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;YouTube&lt;/a&gt;上找到他，同时他也是&lt;a href=&quot;http://javaposse.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;The Java Posse&lt;/a&gt;的一员。他的&lt;a href=&quot;http://tornorbye.blogspot.co.uk/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;博客&lt;/a&gt;已经不在更新，因为他已经把主要活动转移至&lt;a href=&quot;https://plus.google.com/+TorNorbye/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;35、&lt;a href=&quot;https://plus.google.com/+RomainGuy/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Romain Guy&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;Romain Guy 是安卓UI部门内部的专家，他专注于图形性能和动画。他使用&lt;a href=&quot;https://plus.google.com/+RomainGuy/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;和&lt;a href=&quot;https://twitter.com/romainguy&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;, 也在&lt;a href=&quot;http://stackoverflow.com/users/298575/romain-guy&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt;上回答问题，同时有自己的&lt;a href=&quot;http://www.curious-creature.org/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;博客&lt;/a&gt;。请务必看看他的这个在2013 Google I/O大会上关于安卓&lt;a href=&quot;http://www.youtube.com/watch?v=vQZFaec9NpA &quot;&gt;图形和性能&lt;/a&gt;以及&lt;a href=&quot;http://www.youtube.com/watch?v=ihzZrS69i_s&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;动画&lt;/a&gt;的视频。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;36、&lt;a href=&quot;https://plus.google.com/105051985738280261832/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Dianne Hackborn&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;Dianne Hackborn 是一名安卓架构工程师。除了使用&lt;a href=&quot;https://plus.google.com/105051985738280261832/about&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;，他还在&lt;a href=&quot;http://stackoverflow.com/users/236398/hackbod&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt;上回答问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;37、&lt;a href=&quot;https://plus.google.com/+ChrisBanes/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Chris Banes&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;Chris Banes 是ActionBar-&lt;a href=&quot;https://github.com/chrisbanes/ActionBar-PullToRefresh&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;PullToRefresh&lt;/a&gt;、&lt;a href=&quot;https://github.com/chrisbanes/PhotoView&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;PhotoView&lt;/a&gt;和Android-&lt;a href=&quot;https://github.com/chrisbanes/Android-BitmapCache&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;BitmapCache&lt;/a&gt;的作者，这三个均为对于安卓开发者非常有用的库。你可以在&lt;a href=&quot;https://plus.google.com/+ChrisBanes/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;、&lt;a href=&quot;https://twitter.com/chrisbanes&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;、&lt;a href=&quot;http://stackoverflow.com/users/474997/chris-banes&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt;、&lt;a href=&quot;http://chris.banes.me/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;博客&lt;/a&gt;甚至&lt;a href=&quot;https://www.facebook.com/chris.banes&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt;上找到他。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;38、&lt;a href=&quot;https://plus.google.com/+JakeWharton/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Jake Wharton&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;Jake Wharton是Android-&lt;a href=&quot;https://github.com/JakeWharton/Android-ViewPagerIndicator&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;ViewPagerIndicator&lt;/a&gt;和&lt;a href=&quot;http://actionbarsherlock.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;ActionBarSherlock&lt;/a&gt;的开发者，这两者简化了所有版本安卓中action bar&lt;span class=&quot;wp_keywordlink_affiliate&quot;&gt;&lt;a href=&quot;http://www.amazon.cn/gp/product/B001130JN8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;#038;tag=importnew-23&amp;#038;linkCode=as2&amp;#038;camp=536&amp;#038;creative=3200&amp;#038;creativeASIN=B001130JN8&quot; title=&quot;设计模式:可复用面向对象软件的基础&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; class=&quot;external&quot;&gt;设计模式&lt;/a&gt;&lt;/span&gt;的使用。他使用&lt;a href=&quot;https://plus.google.com/+JakeWharton/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;、&lt;a href=&quot;https://twitter.com/JakeWharton&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;, 同时也在&lt;a href=&quot;http://stackoverflow.com/users/132047/jake-wharton&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt;上回答问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;39、&lt;a href=&quot;https://plus.google.com/+RomanNurik/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Roman Nurik&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Roman Nurik 对于安卓的贡献主要是改善了用户体验和视觉设计。你可以在&lt;a href=&quot;https://plus.google.com/+RomanNurik/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;、&lt;a href=&quot;https://twitter.com/romannurik&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;、&lt;a href=&quot;http://stackoverflow.com/users/102703/roman-nurik&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt;和&lt;a href=&quot;http://dribbble.com/romannurik&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Dribbble&lt;/a&gt;上关注他。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;40、&lt;a href=&quot;https://plus.google.com/+AdamWPowell/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Adam Powell&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;Adam Powell 是一名安卓架构开发者，他主要从事UI工具箱的工作。你可以在&lt;a href=&quot;https://plus.google.com/+AdamWPowell/about&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;、&lt;a href=&quot;https://twitter.com/adamwp&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;和&lt;a href=&quot;http://stackoverflow.com/users/342605/adamp&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt;上找到他。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;41、&lt;a href=&quot;https://plus.google.com/+RichHyndman/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Richard Hyndman&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;Richard Hyndman是安卓开发组的一员。他主要在&lt;a href=&quot;https://plus.google.com/+RichHyndman/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;和&lt;a href=&quot;https://twitter.com/geekyouup&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;上发帖。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;42、&lt;a href=&quot;https://plus.google.com/+CyrilMottier/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Cyril Mottier&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;Cyril Mottier 是&lt;a href=&quot;https://github.com/cyrilmottier/GreenDroid&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;GreenDroid&lt;/a&gt;和常规&lt;a href=&quot;http://cyrilmottier.com/&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;blogger&lt;/a&gt;的开发者。你可以在&lt;a href=&quot;https://plus.google.com/+CyrilMottier/posts&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Google+&lt;/a&gt;和&lt;a href=&quot;https://twitter.com/cyrilmottier&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;上找到他。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;片尾备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我希望这些链接都是有用的，我也相信它们会让你忙活一阵子的。我尝试在适合初学者的内容和高级内容之间找到一个平衡点，并将二者均匀地结合起来。如果你有任何更多的评论或者建议，如果你发现了任何错误，或者你想让我知道哪些链接对你来说是最重要的，请给通过留言告诉我。&lt;/p&gt;

&lt;p&gt;原文链接： &lt;a target=&quot;_blank&quot; href=&quot;http://cogitolearning.co.uk/?p=858&quot; class=&quot;external&quot; rel=&quot;nofollow&quot;&gt;cogitolearning&lt;/a&gt;    翻译： &lt;a href=&quot;http://www.importnew.com&quot;&gt; ImportNew.com &lt;/a&gt; - &lt;a href=&quot;http://www.importnew.com/author/lijuanlong&quot;&gt;汤米猫&lt;/a&gt;&lt;br /&gt;译文链接： &lt;a href=&quot;http://www.importnew.com/8229.html&quot;&gt;http://www.importnew.com/8229.html&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Android自定义视图教程</title>
   <link href="http://http://coolshell.info/blog/2015/05/define-custom-view.html"/>
   <updated>2015-05-17T00:00:00+00:00</updated>
   <id>/blog/2015/05/define-custom-view</id>
   <content type="html">&lt;p&gt;Android的UI元素都是基于View(屏幕中单个元素)和ViewGroup(元素的集合),Android有许多自带的组件和布局，比如Button、TextView、RelativeLayout。在app开发过程中我们需要自定义视图组件来满足我们的需求。通过继承自View或者View的子类，覆写onDraw或者onTouchEvent等方法来覆盖视图的行为。&lt;/p&gt;

&lt;p&gt;##创建完全自定义的组件&lt;/p&gt;

&lt;p&gt;创建自定义的组件主要围绕着以下五个方面：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;绘图(Drawing)： 控制视图的渲染，通常通过覆写onDraw方法来实现&lt;/li&gt;
  &lt;li&gt;交互(Interaction)： 控制用户和视图的交互方式，比如OnTouchEvent,gestures&lt;/li&gt;
  &lt;li&gt;尺寸(Measurement)： 控制视图内容的维度，通过覆写onMeasure方法&lt;/li&gt;
  &lt;li&gt;属性(Attributes)： 在XML中定义视图的属性，使用TypedArray来获取属性值&lt;/li&gt;
  &lt;li&gt;持久化(Persistence)： 配置发生改变时保存和恢复状态，通过onSaveInstanceState和onRestoreInstanceState&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举个栗子，假设我们想创建一个图形允许用户点击的时候改变形状（方形、圆形、三角形）。如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dag48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###定义视图类&lt;/p&gt;

&lt;p&gt;我们创建一个ShapeSelectorView继承自View，实现必要的构造器，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShapeSelectorView&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// We must provide a constructor that takes a Context and an AttributeSet.&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// This constructor allows the UI to create and edit an instance of your view.&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ShapeSelectorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AttributeSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###添加视图到布局中&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;	&lt;span class=&quot;nt&quot;&gt;&amp;lt;RelativeLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;xmlns:app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;xmlns:tools=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;nt&quot;&gt;&amp;lt;com.codepath.example.customviewdemo.ShapeSelectorView&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/shapeSelector&quot;&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;android:layout_alignParentRight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;android:layout_alignParentTop=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;android:layout_alignParentLeft=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;接下来我们定义一个命名空间app,这个命名空间允许Android自动解析而不需要指定具体的包名。&lt;/p&gt;

&lt;p&gt;###自定义属性&lt;/p&gt;

&lt;p&gt;视图可以通过XML来配置属性和样式，你需要想清楚要添加那些自定义的属性，比如我们想让用户可以选择形状的颜色、是否显示形状的名称，比如我们想让视图可以像下面一样配置：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;	&lt;span class=&quot;nt&quot;&gt;&amp;lt;com.codepath.example.customviewdemo.ShapeSelectorView&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;app:shapeColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#7f0000&quot;&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;app:displayShapeName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/shapeSelector&quot;&lt;/span&gt;
	    &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;为了能够定义shapeColor和displayShapeName,我们需要在res/values/attrs.xml中配置：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;	&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
	   &lt;span class=&quot;nt&quot;&gt;&amp;lt;declare-styleable&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ShapeSelectorView&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	       &lt;span class=&quot;nt&quot;&gt;&amp;lt;attr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shapeColor&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	       &lt;span class=&quot;nt&quot;&gt;&amp;lt;attr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;displayShapeName&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;boolean&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/declare-styleable&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;对于每个你想自定义的属性你需要定义attr节点，每个节点有name和format属性，format属性是我们期望的值的类型，比如color,dimension,boolean,integer,float等。一旦定义好了属性，你可以像使用自带属性一样使用他们，唯一的区别在于你的自定义属性属于一个不同的命名空间，你可以在根视图的layout里面定义命名空间，一般情况下你只需要这样子指定：&lt;code class=&quot;highlighter-rouge&quot;&gt;http://schemas.android.com/apk/res/&amp;lt;package_name&amp;gt;&lt;/code&gt;,但是你可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;http://schemas.android.com/apk/res-auto&lt;/code&gt;自动解析命名空间。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;	&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;RelativeLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;xmlns:tools=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;xmlns:app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
	    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;nt&quot;&gt;&amp;lt;com.codepath.example.customviewdemo.ShapeSelectorView&lt;/span&gt;
		   &lt;span class=&quot;na&quot;&gt;app:shapeColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#7f0000&quot;&lt;/span&gt;
		   &lt;span class=&quot;na&quot;&gt;app:displayShapeName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
		   &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/shapeSelector&quot;&lt;/span&gt;
		   &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
		   &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
		   &lt;span class=&quot;na&quot;&gt;android:layout_above=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/btnSelect&quot;&lt;/span&gt;
		   &lt;span class=&quot;na&quot;&gt;android:layout_alignParentLeft=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
		   &lt;span class=&quot;na&quot;&gt;android:layout_below=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/tvPrompt&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###应用自定义属性&lt;/p&gt;

&lt;p&gt;在前面我们定义了shapeColor和displayShapeName两个属性值，我们需要提取这两个属性值来用在自定义的视图中，可以使用TypedArray和obtainStyledAttributes方法来完成，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShapeSelectorView&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;displayShapeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ShapeSelectorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AttributeSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;setupAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AttributeSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// Obtain a typed array of attributes&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;TypedArray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;obtainStyledAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;styleable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ShapeSelectorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// Extract custom attributes into member variables&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;shapeColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;styleable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ShapeSelectorView_shapeColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;displayShapeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBoolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;styleable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ShapeSelectorView_displayShapeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	      &lt;span class=&quot;c1&quot;&gt;// TypedArray objects are shared and must be recycled.&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;接下来添加一些getter和setter方法：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShapeSelectorView&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isDisplayingShapeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;displayShapeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDisplayingShapeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;displayShapeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;invalidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;requestLayout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getShapeColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setShapeColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;shapeColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;invalidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;requestLayout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当视图属性发生改变的时候可能需要重新绘图，你需要调用invalidate()和requestLayout()来刷新显示。&lt;/p&gt;

&lt;p&gt;###画图&lt;/p&gt;

&lt;p&gt;假设我们要使用前面的属性画一个长方形，所有的绘图都是在onDraw方法里执行，使用Canvas对象来绘图，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShapeSelectorView&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textXOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textYOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Paint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paintShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ShapeSelectorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AttributeSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;setupAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;setupPaint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onDraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onDraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paintShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayShapeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Square&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textXOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textXOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paintShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupPaint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
	      &lt;span class=&quot;n&quot;&gt;paintShape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Paint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;paintShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FILL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;paintShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shapeColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;paintShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTextSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这段代码就会根据XML里设置的shapeColor来画图，根据displayShapeName属性来决定是否显示图形的名称，结果如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dag49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更多画图的教程可以参考这里&lt;a href=&quot;http://developer.android.com/guide/topics/graphics/2d-graphics.html&quot;&gt; Custom 2D Drawing Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###计算尺寸&lt;/p&gt;

&lt;p&gt;为了更好的理解自定义视图的宽度和高度，我们需要定义onMeasure方法，这个方法根据视图的内容来决定它的宽度和高度，在这里宽度和高度是由形状和下面的文本决定的，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShapeSelectorView&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onMeasure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widthMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heightMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// Defines the extra padding for the shape name text&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textPadding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    
	    &lt;span class=&quot;c1&quot;&gt;// Resolve the width based on our minimum and the measure spec&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPaddingLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPaddingRight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolveSizeAndState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widthMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    
	    &lt;span class=&quot;c1&quot;&gt;// Ask for a height that would let the view get as big as it can&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPaddingBottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPaddingTop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayShapeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
		&lt;span class=&quot;n&quot;&gt;minh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textYOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textPadding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolveSizeAndState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heightMeasureSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    
	    &lt;span class=&quot;c1&quot;&gt;// Calling this method determines the measured width and height&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// Retrieve with getMeasuredWidth or getMeasuredHeight methods later&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;setMeasuredDimension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;宽度和高度都是基于MeasureSpec来讨论的，一个MeasureSpec封装了父布局传递给子布局的布局要求，每个MeasureSpec代表了一组宽度和高度的要求。一个MeasureSpec由大小和模式组成。它有三种模式：UNSPECIFIED(未指定),父元素未给子元素施加任何束缚，子元素可以得到任意想要的大小；EXACTLY(完全)，父元素决定子元素的确切大小，子元素将被限定在给定的边界里而忽略它本身大小；AT_MOST(至多)，子元素至多达到指定大小的值。resolveSizeAndState()方法根据视图想要的大小和MeasureSpec返回一个合适的值，最后你需要调用setMeasureDimension()方法生效。&lt;/p&gt;

&lt;p&gt;###不同形状之间切换&lt;/p&gt;

&lt;p&gt;如果想实现用户点击之后改变形状，需要在onTouchEvent方法里添加自定义逻辑：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShapeSelectorView&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeValues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;square&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;circle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;triangle&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentShapeIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	  &lt;span class=&quot;c1&quot;&gt;// Change the currentShapeIndex whenever the shape is clicked&lt;/span&gt;
	  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTouchEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MotionEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onTouchEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_DOWN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;currentShapeIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentShapeIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shapeValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;currentShapeIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;postInvalidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;现在不管什么时候视图被单击，选择的形状的下标会改变，调用postInvalisate()方法后会显示一个不同的形状，接下来更新onDraw()方法来实现更改形状的逻辑：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShapeSelectorView&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

	  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onDraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onDraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentShapeIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shapeSelected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;square&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paintShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;textXOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shapeSelected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;circle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawCircle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shapeWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paintShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;textXOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shapeSelected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;triangle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getTrianglePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paintShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;textXOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayShapeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shapeSelected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textXOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textYOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paintShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTrianglePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shapeWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;moveTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lineTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lineTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;现在每次点击都会显示一个不同的形状，结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dag50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来添加一个获取形状的方法：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShapeSelectorView&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// Returns selected shape name&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSelectedShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shapeValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentShapeIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###保存视图的状态&lt;/p&gt;

&lt;p&gt;当配置发生改变的时候(比如屏幕旋转)视图需要保存它们的状态，你可以实现onSaveInstanceState()和onRestoreInstanceState()方法来保存和恢复视图状态，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShapeSelectorView&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// This is the view state for this shape selector&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentShapeIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parcelable&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// Construct bundle&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// Store base view state&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putParcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;instanceState&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onSaveInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// Save our custom view state to bundle&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;currentShapeIndex&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentShapeIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// ... store any other custom state here ...&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// Return the bundle&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parcelable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// Checks if the state is the bundle we saved&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	      &lt;span class=&quot;c1&quot;&gt;// Load back our custom view state&lt;/span&gt;
	      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentShapeIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;currentShapeIndex&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	      &lt;span class=&quot;c1&quot;&gt;// ... load any other custom state here ...&lt;/span&gt;
	      &lt;span class=&quot;c1&quot;&gt;// Load base view state back&lt;/span&gt;
	      &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;instanceState&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// Pass base view state on to super&lt;/span&gt;
	    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onRestoreInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;一旦你实现了这些保存和恢复的逻辑，当手机配置改变的时候你的视图能够自动保存状态。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Gradle系列教程之依赖管理</title>
   <link href="http://http://coolshell.info/blog/2015/05/gradle-dependency-management.html"/>
   <updated>2015-05-05T00:00:00+00:00</updated>
   <id>/blog/2015/05/gradle-dependency-management</id>
   <content type="html">
&lt;p&gt;这一章我将介绍Gradle对依赖管理的强大支持，学习依赖分组和定位不同类型仓库。依赖管理看起来很容易，但是当出现依赖解析冲突时就会很棘手，复杂的依赖关系可能导致构建中依赖一个库的多个版本。Gradle通过分析依赖树得到依赖报告，你将很容易找到一个指定的依赖的来源。&lt;/p&gt;

&lt;p&gt;Gradle有自己的依赖管理实现，除了支持ant和Maven的特性外，Gradle关心的是性能、可靠性和复用性。&lt;/p&gt;

&lt;p&gt;##简要概述依赖管理&lt;/p&gt;

&lt;p&gt;几乎所有基于JVM的项目都会或多或少依赖其他库，假设你在开发一个基于web的项目，你很可能会依赖很受欢迎的开源框架比如Spring MVC来提高效率。Java的第三方库一般以JAR文件的形式存在，一般用库名加版本号来标识。随着开发的进行依赖的第三方库增多小的项目变的越来越大，组织和管理你的JAR文件就很关键。&lt;/p&gt;

&lt;p&gt;###不算完美的依赖管理技术&lt;/p&gt;

&lt;p&gt;由于Java语言并没提供依赖管理的工具，所以你的团队需要自己开发一套存储和检索依赖的想法。你可能会采取以下几种常见的方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;手动复制JAR文件到目标机器，这是最原始的很容易出错的方法。&lt;/li&gt;
  &lt;li&gt;使用一个共享的存储介质来存储JAR文件(比如共享的网盘)，你可以加载网络硬盘或者通过FTP检索二进制文件。这种方法需要开发者事先建立好与仓库的连接，手动添加新的依赖到仓库中。&lt;/li&gt;
  &lt;li&gt;把依赖的JAR文件同源代码都添加到版本控制系统中。这种方法不需要任何额外的步骤，你的同伴在拷贝仓库的时候就能检索依赖的改变。另一方面，这些JAR文件占用了不必要的空间，当你的项目存在相互之间依赖的时候你需要频繁的check-in的检查源代码是否发生了改变。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###自动管理依赖的重要性&lt;/p&gt;

&lt;p&gt;尽管上面的方法都能用，但是这距离理想的解决方案差远了，因为他们没有提供一个标准化的方法来命名和管理JAR文件。至少你得需要开发库的准确版本和它依赖的库(传递依赖)，这个为什么这么重要？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;准确知道依赖的版本&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果在项目中你没有准确声明依赖的版本这将会是一个噩梦，如果没有文档你根本无法知道这个库支持哪些特性，是否升级一个库到新的版本就变成了一个猜谜游戏因为你不知道你的当前版本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;管理传递依赖&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在项目的早期开发阶段传递依赖就会是一个隐患，这些库是第一层的依赖需要的，比如一个比较常见的开发方案是将Spring和Hibernate结合起来这会引入超过20个其他的开发库，一个库需要很多其他库来正常工作。下图展示了Hibernate核心库的依赖图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/5-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果没有正确的管理依赖，你可以会遇到没想到过的编译期错误和运行期类加载问题。我们可以总结到我们需要一个更好的方式来管理依赖，一般来讲你想在项目元数据中声明你的依赖和它的版本号。作为一个项目自动化的过程，这个版本的库会自动从中央仓库下载、安装到你的项目中，我们来看几个现有的开源解决方案。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用自动化的依赖管理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在Java领域里支持声明的自动依赖管理的有两个项目：Apache Ivy(Ant项目用的比较多的依赖管理器)和Maven(在构建框架中包含一个依赖管理器)，我不再详细介绍这两个的细节而是解释自动依赖管理的概念和机制。&lt;/p&gt;

&lt;p&gt;Ivy和Maven是通过XML描述文件来表达依赖配置，配置包含两部分：依赖的标识加版本号和中央仓库的位置(可以是一个HTTP链接)，依赖管理器根据这个信息自动定位到需要下载的仓库然后下载到你的机器中。库可以定义传递依赖，依赖管理器足够聪明分析这个信息然后解析下载传递依赖。如果出现了依赖冲突比如上面的Hibernate core的例子，依赖管理器会试着解决。库一旦被下载就会存储在本地的缓存中，构建系统先检查本地缓存中是否存在需要的库然后再从远程仓库中下载。下图显示了依赖管理的关键元素：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/5-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Gradle通过DSL来描述依赖配置，实现了上面描述的架构。&lt;/p&gt;

&lt;p&gt;###自动依赖管理面临的挑战&lt;/p&gt;

&lt;p&gt;虽然依赖管理器简化了手工的操作，但有时也会遇到问题。你会发现你的依赖图中会依赖同个库的不同版本，使用日志框架经常会遇到这个问题，依赖管理器基于一个特定的解决方案只选择其中一个版本来避免版本冲突。如果你想知道某个库引入了什么版本的传递依赖，Gradle提供了一个非常有用的依赖报告来回答这个问题。下一节我会通过一个例子来讲解。&lt;/p&gt;

&lt;p&gt;##声明依赖&lt;/p&gt;

&lt;p&gt;DSL配置block dependencies用来给配置添加一个或多个依赖，你的项目不仅可以添加外部依赖，下面这张表显示了Gradle支持的各种不同类型的依赖。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/5-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这一章直接扫外部模块依赖和文件依赖，我们来看看Gradle APi是怎么表示依赖的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;理解依赖的API表示&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每个Gradle项目都有一个DependencyHandler的实例，你可以通过getDependencies()方法来获取依赖处理器的引用，上表中每一种依赖类型在依赖处理器中都有一个相对应的方法。每一个依赖都是Dependency的一个实例，group, name, version, 和classifier这几个属性用来标识一个依赖，下图清晰的表示了项目(Project)、依赖处理器(DependencyHandler)和依赖三者之间的关系：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/5-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###外部模块依赖&lt;/p&gt;

&lt;p&gt;在Gradle的术语里，外部库通常是以JAR文件的形式存在，称之为外部模块依赖，代表项目层次外的一个模块，这种类型的依赖是通过属性来唯一的标识，接下来我们来介绍每个属性的作用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;依赖属性&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当依赖管理器从仓库中查找依赖时，需要通过属性的结合来定位，最少需要提供一个name。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;group： 这个属性用来标识一个组织、公司或者项目，可以用点号分隔，Hibernate的group是org.hibernate。&lt;/li&gt;
  &lt;li&gt;name： name属性唯一的描述了这个依赖，hibernate的核心库名称是hibernate-core。&lt;/li&gt;
  &lt;li&gt;version： 一个库可以有很多个版本，通常会包含一个主版本号和次版本号，比如Hibernate核心库3.6.3-Final。&lt;/li&gt;
  &lt;li&gt;classifier： 有时候需要另外一个属性来进一步的说明，比如说明运行时的环境，Hibernate核心库没有提供classifier。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;依赖的写法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;你可以使用下面的语法在项目中声明依赖：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;configurationName&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependencyNotation1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;dependencyNotation2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;你先声明你要给哪个配置添加依赖，
Java插件指定了若干依赖配置项，其描述如下：当项目的源代码被编译时，compile配置项中的依赖是必须的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;runtime配置项中包含的依赖在运行时是必须的。&lt;/li&gt;
  &lt;li&gt;testCompile配置项中包含的依赖在编译项目的测试代码时是必须的。&lt;/li&gt;
  &lt;li&gt;testRuntime配置项中包含的依赖在运行测试代码时是必须的。&lt;/li&gt;
  &lt;li&gt;archives配置项中包含项目生成的文件（如Jar文件）。&lt;/li&gt;
  &lt;li&gt;default配置项中包含运行时必须的依赖。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后添加依赖列表，你可以用map的形式来注明，你也可以直接用冒号来分隔属性，比如这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/5-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//声明外部属性&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cargoGroup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;org.codehaus.cargo&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cargoVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1.3.1&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//使用映射声明依赖&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cargoGroup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;cargo-core-uberjar&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cargoVersion&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//用快捷方式来声明，引用了前面定义的外部属性&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$cargoGroup:cargo-ant:$cargoVersion&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果你项目中依赖比较多，你把一些共同的依赖属性定义成外部属性可以简化build脚本。&lt;/p&gt;

&lt;p&gt;Gradle没有给项目选择默认的仓库，当你没有配置仓库的时候运行deployTOLocalTomcat任务的时候回出现如下的错误：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle deployToLocalTomcat
:deployToLocalTomcat FAILED
FAILURE: Build failed with an exception.

Where: Build file &#39;/Users/benjamin/gradle-in-action/code/chapter5/cargo-configuration/build.gradle&#39; line: 10

What went wrong:
Execution failed for task &#39;:deployToLocalTomcat&#39;.
&amp;gt; Could not resolve all dependencies for configuration &#39;:cargo&#39;.
	&amp;gt; Could not find group:org.codehaus.cargo, module:cargo-core-uberjar, version:1.3.1.
	Required by:
		:cargo-configuration:unspecified
&amp;gt; Could not find group:org.codehaus.cargo, module:cargo-ant,version:1.3.1.
	Required by:
	:cargo-configuration:unspecified
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;到目前为止还没讲到怎么配置不同类型的仓库，比如你想使用MavenCentral仓库，添加下面的配置代码到你的build脚本中：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;检查依赖报告&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当你运行dependencies任务时，这个依赖树会打印出来，依赖树显示了你build脚本声明的顶级依赖和它们的传递依赖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/5-6.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/5-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;仔细观察你会发现有些传递依赖标注了*号，表示这个依赖被忽略了，这是因为其他顶级依赖中也依赖了这个传递的依赖，Gradle会自动分析下载最合适的依赖。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;排除传递依赖&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Gradle允许你完全控制传递依赖，你可以选择排除全部的传递依赖也可以排除指定的依赖，假设你不想使用UberJar传递的xml-api的版本而想声明一个不同版本，你可以使用exclude方法来排除它：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;org.codehaus.cargo:cargo-ant:1.3.1&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exclude&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;xml-apis&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;module:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;xml-apis&#39;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;xml-apis:xml-apis:2.0.2&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;exclude属性值和正常的依赖声明不太一样，你只需要声明group和(或)module，Gradle不允许你只排除指定版本的依赖。&lt;/p&gt;

&lt;p&gt;有时候仓库中找不到项目依赖的传递依赖，这会导致构建失败，Gradle允许你使用transitive属性来排除所有的传递依赖：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;org.codehaus.cargo:cargo-ant:1.3.1&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;transitive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 选择性的声明一些需要的库&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;动态版本声明&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你想使用一个依赖的最新版本，你可以使用latest.integration，比如声明 Cargo Ant tasks的最新版本，你可以这样写 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.codehaus
.cargo:cargo-ant:latest-integration&lt;/code&gt;，你也可以用一个+号来动态的声明：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//依赖最新的1.x版本&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;org.codehaus.cargo:cargo-ant:1.+&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Gradle的dependencies任务可以清晰的看到选择了哪个版本，这里选择了1.3.1版本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle –q dependencies
------------------------------------------------------------
Root project
------------------------------------------------------------
Listing 5.4 Excluding a single dependency
Listing 5.5 Excluding all transitive dependencies
Listing 5.6 Declaring a dependency on the latest Cargo 1.x version
Exclusions can be
declared in a shortcut
or map notation.
120 CHAPTER 5 Dependency management
cargo - Classpath for Cargo Ant tasks.
\--- org.codehaus.cargo:cargo-ant:1.+ -&amp;gt; 1.3.1
\--- ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###文件依赖&lt;/p&gt;

&lt;p&gt;如果你没有使用自动的依赖管理工具，你可能会把外部库作为源代码的一部分或者保存在本地文件系统中，当你想把项目迁移到Gradle的时候，你不想去重构，Gradle很简单就能配置文件依赖。下面这段代码复制从Maven中央仓库解析的依赖到libs/cargo目录。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copyDependenciesToLocalDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//Gradle提供的语法糖&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asFileTree&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${System.properties[&#39;user.home&#39;]}/libs/cargo&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行这个任务之后你就可以在依赖中声明Cargo库了，下面这段代码展示了怎么给cargo配置添加JAR文件依赖：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fileTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;dir:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${System.properties[&#39;user.home&#39;]}/libs/cargo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;include:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;*.jar&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;##配置远程仓库&lt;/p&gt;

&lt;p&gt;Gradle支持下面三种不同类型的仓库：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/5-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下图是配置不同仓库对应的Gradle API：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/5-9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面以Maven仓库来介绍，Maven仓库是Java项目中使用最为广泛的一个仓库，库文件一般是以JAR文件的形式存在，用XML(POM文件)来来描述库的元数据和它的传递依赖。所有的库文件都存储在仓库的指定位置，当你在构建脚本中声明了依赖时，这些属性用来找到库文件在仓库中的准确位置。group属性标识了Maven仓库中的一个子目录，下图展示了Cargo依赖属性是怎么对应到仓库中的文件的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/5-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RepositoryHandler接口提供了两个方法来定义Maven仓库，mavenCentral方法添加一个指向仓库列表的引用，mavenLocal方法引用你文件系统中的本地Maven仓库。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;添加Maven仓库&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;要使用Maven仓库你只需要调用mavenCentral方法，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;添加本地仓库&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本地仓库默认在 &lt;USER_HOME&gt;/.m2/repository目录下，只需要添加如下脚本来引用它：&lt;/USER_HOME&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mavenLocal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;添加自定义Maven仓库&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果指定的依赖不存在与Maven仓库或者你想通过建立自己的企业仓库来确保可靠性，你可以使用自定义的仓库。仓库管理器允许你使用Maven布局来配置一个仓库，这意味着你要遵守artifact的存储模式。你也可以添加验证凭证来提供访问权限，Gradle的API提供两种方法配置自定义的仓库：maven()和mavenRepo()。下面这段代码添加了一个自定义的仓库，如果Maven仓库中不存在相应的库会从自定义仓库中查找：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Custom Maven Repository&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;http://repository.forge.cloudbees.com/release/&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Gradle系列教程之任务管理</title>
   <link href="http://http://coolshell.info/blog/2015/04/gradle-task-management.html"/>
   <updated>2015-04-30T00:00:00+00:00</updated>
   <id>/blog/2015/04/gradle-task-management</id>
   <content type="html">
&lt;p&gt;Gradle有两个最基本的概念：project和task,Gradle里面的所有东西都基于这两个概念。project通常指一个项目，而task指构建过程中的任务。一次构建可以有1到n个project，每个project有1到n个task，这篇文章主要介绍Gradle任务的创建和管理。&lt;/p&gt;

&lt;p&gt;#管理任务&lt;/p&gt;

&lt;p&gt;每个新创建的任务都是org.gradle.api.DefaultTask类型，org.gradle.api.Task的标准实现，DefaultTask所有的域都是私有的，意味着他们只能通过setter和getter方法来访问，庆幸的是Groovy提供了一些语法糖来允许你通过名字来使用域。&lt;/p&gt;

&lt;p&gt;##管理项目的版本&lt;/p&gt;

&lt;p&gt;许多公司或者开源组织有他们自己的发布版本的措施，一般用主版本号和次版本号来表示，也会用SNAPSHOT来表示项目正在开发中，版本号是通过String类型来表示，如果你想准确获得项目的主版本号，那应该怎么办？使用正则表达式匹配点号然后过滤得到主版本号和次版本号？如果我们用一个类来表示是不是更简单？&lt;/p&gt;

&lt;p&gt;你可以很简单的通过类的域来设置、查询和修改你的版本号的某个部分，甚至你可以把版本信息直接保存在一个文件里，比如一个文件或者数据库里，避免通过修改构建脚本来更改版本号，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dag26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过编程来控制版本表单对于自动化项目生命周期很有必要，比如：你的代码通过了单元测试准备交付了，当前的版本是1.3-SNAPSHOT,在打包成war文件之前你想把它变成发布版本1.3然后自动部署到服务器中，这些步骤可以划分为多个任务：一个用来修改项目的版本号另一个用于打包WAR文件。&lt;/p&gt;

&lt;p&gt;##声明任务的动作(actions)&lt;/p&gt;

&lt;p&gt;动作就是在你的任务中放置构建逻辑的地方，Task接口提供了两个接口来声明任务的动作：
doFirst和doLast，当任务执行的时候，定义在闭包里的动作逻辑就按顺序执行。&lt;/p&gt;

&lt;p&gt;接下来我们会写一个简单的任务printVersion,任务的作用就是打印项目的版本号，在任务
的最后一个动作定义这个逻辑。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;0.1-SNAPSHOT&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;doLast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;前面我们讲过左移操作符是方法doLast的快捷键，他们的作用是一样的，当你执行gradle printVersion,你应该得到下面的输出：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gradle printVersion
:printVersion
Version: 0.1-SNAPSHOT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你用doFirst方法的话输出的结果是一样的：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;doFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;给已经存在的任务添加动作&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;到目前为止，你只是给printVersion这个任务添加了单个动作，要么是第一个或者最后一个，对于每个任务可以有多个动作，实际上，当任务创建的时候你可以添加任意多个动作，每一个任务都有一个动作清单，他们在运行的时候是执行的，接下来我们来修改之前的例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//任务的初始声明可以添加first和last动作&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;doFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Before reading the project version&quot;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;doLast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;//你可以在任务的动作列表的最前面添加其他任务，比如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;printVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;First action&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;由此可知，我们可以添加额外的动作给已经存在的任务，当你想添加动作的那个任务不是你自己写的时候这会非常有用，你可以添加一些自定义的逻辑，比如你可以添加doFirst动作到compile-Java任务来检查项目是否包含至少一个source文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;访问任务属性&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接下来我们来改善一下输出版本号的方法，Gradle提供一个基于SLF4J库的日子实现，除了实现了基本的日子级别（DEBUG, ERROR, INFO, TRACE, WARN)）外，还添加了额外的级别，日子实例可以通过任务的方法来直接访问，接下来，你将用QUIET级别打印项目的版本号：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quiet&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;访问任务的属性是不是很容易？接下来我将给你展示两个其他的属性，group和description，两个都是documentation任务的一部分，description属性简短的表示任务的目的，group表示任务的逻辑分组。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;group:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;versioning&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;description:&lt;/span&gt; 	&lt;span class=&quot;s1&quot;&gt;&#39;Prints project version.&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quiet&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;你也可以通过setter方法来设置属性：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;versioning&#39;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Prints project version.&#39;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;doLast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quiet&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当你运行gradle tasks,你会看到任务显示在正确的分组里和它的描述信息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gradle tasks
:tasks
...
Versioning tasks
----------------
printVersion - Prints project version.
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##定义任务依赖&lt;/p&gt;

&lt;p&gt;dependsOn方法用来声明一个任务依赖于一个或者多个任务，接下来通过一个例子来讲解运用不同的方法来应用依赖：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;first&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;second&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//声明多个依赖&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;dependsOn:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quiet&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Version: $version&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;third&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;third&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//通过任务名称来声明依赖&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;third&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependsOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;printVersion&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;你可以通过命令行调用third任务来执行这个任务依赖链：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle -q third
first
second
Version: 0.1-SNAPSHOT
third
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;仔细看这个执行顺序，你有没用发现printVersion声明了对second和first任务的依赖，但是first在second任务前执行了，Gradle里面任务的执行顺序并不是确定的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;任务依赖执行顺序&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Gradle并不保证依赖的任务能够按顺序执行，dependsOn方法只是定义这些任务应该在这个任务之前执行，但是这些依赖的任务具体怎么执行它并不关心，如果你习惯用命令式的构建工具来定义依赖（比如ant）这可能会难以理解。在Gradle里面，执行顺序是由任务的输入输出特性决定的，这样做有很多优点，比如你想修改构建逻辑的时候你不需要去了解整个任务依赖链，另一方面，因为任务不是顺序执行的，就可以并发的执行来提高性能。&lt;/p&gt;

&lt;p&gt;##终结者任务&lt;/p&gt;

&lt;p&gt;在实际情况中，你可能需要在一个任务执行之后进行一些清理工作，一个典型的例子就是Web容器在部署应用之后要进行集成测试，Gradle提供了一个finalizer任务来实现这个功能，你可以用finalizedBy方法来结束一个指定的任务：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;first&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;second&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//声明first结束后执行second任务&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;finalizedBy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;你会发现任务first结束后自动触发任务second：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle -q first
first
second
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##添加随意的代码&lt;/p&gt;

&lt;p&gt;接下来我们来学习怎么在build脚本中定义一些随机的代码，在实际情况下，如果你熟悉Groovy的语法你可以编写一些类或者方法，接下来你将会创建一个表示版本的类，在Java中一个class遵循bean的约定（POJO），就是添加setter和getter方法来访问类的域，到后面发现手工写这些方法很烦人，Groovy有个对应的概念叫POGO(plain-old Groovy object),他们的setter和getter方法在生成字节码的时候自动添加，因此运行的时候可以直接访问，看下面这个例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProjectVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProjectVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;major&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minor&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;

	&lt;span class=&quot;nf&quot;&gt;ProjectVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;major&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;major&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;major&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;minor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minor&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;release&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FALSE&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ProjectVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;major&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;major&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;release&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//只有release为false的时候才添加后缀SNAPSHOT&lt;/span&gt;
		&lt;span class=&quot;s2&quot;&gt;&quot;$major.$minor${release ? &#39;&#39; : &#39;-SNAPSHOT&#39;}&quot;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当运行这个修改的脚本之后，你可以看到printVersion的输出和之前一样，但是你还是得手工修改build脚本来更改版本号，接下来你将学习如何把版本号存储在一个文件里然后配置你的脚本去读取这个配置。&lt;/p&gt;

&lt;p&gt;##任务的配置&lt;/p&gt;

&lt;p&gt;在你写代码之前，你要新建一个属性文件version.properties,内容如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;major = 0
minor = 1
release = false
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;添加任务配置块&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接下来我们将声明一个任务loadVersion来从属性文件中读取版本号并赋给ProjectVersion实例，第一眼看起来和其他定义的任务一样，仔细一看你会主要到你没有定义动作或者使用左移操作符，在Gradle里称之为task configuration。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;versionFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;version.properties&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//配置任务没有左移操作符&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ProjectVersion&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quiet&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Reading the version file.&#39;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//如果文件不存在抛出异常&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;versionFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GradleException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Required version file does not exist:$versionFile.canonicalPath&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;versionProps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//groovy的file实现了添加方法通过新创建的流来读取&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;versionFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withInputStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;versionProps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//在Groovy中如果这是最后一个语句你可以省略return关键字&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProjectVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;versionProps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;major&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;versionProps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;minor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;versionProps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toBoolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;接下来运行printVersion，你会看到loadVersion任务先执行了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle printVersion
Reading the version file.
:printVersion
Version: 0.1-SNAPSHOT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你也许会很奇怪这个任务是怎么调用的，你没有声明依赖，也没有在命令行中调用它。&lt;strong&gt;任务配置块总是在任务动作之前执行的&lt;/strong&gt;，理解这个行为的关键就是Gradle的构建生命周期，我们来看下Gradle的构建阶段：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/4-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gradle的构建生命周期&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;无论你什么时候执行一个gradle build,都会经过三个不同的阶段：初始化、配置和执行。&lt;/p&gt;

&lt;p&gt;在初始化阶段，Gradle给你的项目创建一个Project实例，你的构建脚本只定义了单个项目，在多项目构建的上下文环境中，构建的阶段更为重要。根据你正在执行的项目，Gradle找出这个项目的依赖。&lt;/p&gt;

&lt;p&gt;下一个阶段就是配置阶段，Gradle构建一些在构建过程中需要的一些模型数据，当你的项目或者指定的任务需要一些配置的时候这个阶段很有帮助。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;记住不管你执行哪个build哪怕是gradle tasks配置代码都会执行&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在执行阶段任务按顺序执行，执行顺序是通过依赖关系决定的，标记为up-to-date的任务会跳过，比如任务B依赖于任务A，当你运行gradle B的时候执行顺序将是A-&amp;gt;B。&lt;/p&gt;

&lt;p&gt;##声明任务的输入和输出&lt;/p&gt;

&lt;p&gt;Gradle通过比较两次build之间输入和输出有没有变化来确定这个任务是否是最新的，如果从上一个执行之后这个任务的输入和输出没有发生改变这个任务就标记为up-to-date，跳过这个任务。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/4-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入可以是一个目录、一个或者多个文件或者随机的属性，任务的输出可以是路径或者文件，输入和输出在DefaultTask类中用域来表示。假设你想创建一个任务把项目的版本由SNAPSHOT改为release，下面的代码定义一个新任务给release变量赋值为true，然后把改变写入到文件中。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;task makeReleaseVersion(group: &#39;versioning&#39;, description: &#39;Makes project a release version.&#39;) &amp;lt;&amp;lt; {
	version.release = true
	//ant的propertyfile任务提供很方便的方法来修改属性文件
	ant.propertyfile(file: versionFile) {
		entry(key: &#39;release&#39;, type:&#39;string&#39;,operation: &#39;=&#39;, value: &#39;true&#39;)
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行这个任务会修改版本属性并写入到文件中。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle makeReleaseVersion
:makeReleaseVersion

$ gradle printVersion
:printVersion
Version: 0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##编写自定义的任务&lt;/p&gt;

&lt;p&gt;makeReleaseVersion的逻辑比较简单，你可能不用考虑代码维护的问题，随着构建逻辑越来越复杂，你添加了越来越多的简单的任务，这时候你就有需要用类和方法来结构化你的代码，你可以把你编写源代码的那一套代码实践搬过来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;编写自定义任务类&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;之前提到过，Gradle会给每一个任务创建一个DefaultTask类型的实例，当你要创建一个自定义的任务时，你需要创建一个继承自DefaultTask的类，看看下面这个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ReleaseVersionTask extends DefaultTask {
	//通过注解声明任务的输入和输出	
	@Input Boolean release
	@OutputFile File destFile

	ReleaseVersionTask() {
		//在构造器里设置任务的分组和描述
		group = &#39;versioning&#39;
		description = &#39;Makes project a release version.&#39;
	}
	//通过注解声明要执行的任务
	@TaskAction
	void start() {
		project.version.release = true
		ant.propertyfile(file: destFile) {
		entry(key: &#39;release&#39;, type: &#39;string&#39;, operation: &#39;=&#39;, value: &#39;true&#39;)
	}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;通过注解来表达输入和输出&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;任务输入和输出注解给你的实现添加了语法糖，他们和调用TasksInputs和TaskOutputs方法是一样的效果，你一眼就知道任务期望什么样的输入数据以及会产生什么输出。我们使用@Input注解来声明输入属性release，用@OutputFile来定义输出文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用自定义的任务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上面我们实现了自定义的动作方法，但是我们怎么使用这个方法，你需要在build脚本中创建一个ReleaseVersionTask类型的任务，通过给属性赋值来设定输入和输出：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//定义一个ReleaseVersionTask类型的任务
task makeReleaseVersion(type: ReleaseVersionTask) {
	//设定任务属性
	release = version.release
	destFile = versionFile
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;复用自定义的任务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;假设你在另一个项目中想使用前面这个自定义的任务，在另一个项目中需求又不太一样，用来表示版本的POGO有不同的域，比如下面这个：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ProjectVersion {
	Integer min
	Integer maj
	Boolean prodReady

	@Override
	String toString() {
	&quot;$maj.$min${prodReady? &#39;&#39; : &#39;-SNAPSHOT&#39;}&quot;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此外，你还想把版本文件名改为project-version.properties,需要怎么做才能复用上面那个自定义的任务呢？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;task makeReleaseVersion(type: ReleaseVersionTask) {
	release = version.prodReady
	//不同的版本文件
	destFile = file(&#39;project-version.properties&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##Gradle自带的任务类型&lt;/p&gt;

&lt;p&gt;Gradle自带的任务类型继承自DefaultTask，Gradle提供了很多自带的任务类型，这里我只介绍两个，Zip和copy用在发布项目中。&lt;/p&gt;

&lt;p&gt;//eg.使用任务类型来备份发布版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;task createDistribution(type: Zip, dependsOn: 	makeReleaseVersion) {
	//引用war任务的输出
	from war.outputs.files
	//把所有文件放进ZIP文件的src目录
	from(sourceSets*.allSource) {
	into &#39;src&#39;
	}
	//添加版本文件
	from(rootDir) {
	include versionFile.name
	}
}

task backupReleaseDistribution(type: Copy) {
		//引用createDistribution的输出
		from createDistribution.outputs.files
		into &quot;$buildDir/backup&quot;
	}

	task release(dependsOn: backupReleaseDistribution) 	&amp;lt;&amp;lt; {
		logger.quiet &#39;Releasing the project...&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;任务依赖推导&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;你可能注意到上面通过dependsOn方法来显示声明两个任务之间的依赖，可是，一些任务并不是直接依赖于其他任务(比如上面createDistribution依赖于war)。Gradle怎么知道在任务之前执行哪个任务？通过使用一个任务的输出作为另一个任务的输入，依赖就推导出来了，结果依赖的任务自动执行了，我们来看一下完整的执行图：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle release
:makeReleaseVersion
:compileJava
:processResources UP-TO-DATE
:classes
:war
:createDistribution
:backupReleaseDistribution
:release
Releasing the project...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行build之后你可以在build/distribution目录找到生成的ZIP文件，这是打包任务的默认输出目录，下面这个图是生成的目录树：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/4-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##在buildSrc目录创建代码&lt;/p&gt;

&lt;p&gt;在前面我们创建了两个类，ProjectVersion和ReleaseVersionTask，这些类可以移动到你项目的buildSrc目录，buildSrc目录是一个放置源代码的可选目录，你可以很容易的管理你的代码。Gradle采用了标准的项目布局，java代码在src/main/java目录，Groovy代码应该在src/main/groovy目录，在这些目录的任何代码都会自动编译然后放置到项目的classpath目录。这里你是在处理class，你可以把他们放到指定的包里面，假如com.manning.gia,下面显示了Groovy类在项目中的目录结构：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/4-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不过要记住把这些类放在源代码目录需要额外的工作，这和在脚本文件中定义有点不一样，你需要导入Gradle的API，看看下面这个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.manning.gia
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.TaskAction

class ReleaseVersionTask extends DefaultTask {
	(...)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;反过来，你的构建脚本需要从buildSrc中导入编译的classes(比如 com.manning.gia.ReleaseVersionTask)，下面这个是编译任务输出：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gradle makeReleaseVersion
:buildSrc:compileJava UP-TO-DATE
:buildSrc:compileGroovy
:buildSrc:processResources UP-TO-DATE
:buildSrc:classes
:buildSrc:jar
:buildSrc:assemble
:buildSrc:compileTestJava UP-TO-DATE
:buildSrc:compileTestGroovy UP-TO-DATE
:buildSrc:processTestResources UP-TO-DATE
:buildSrc:testClasses UP-TO-DATE
:buildSrc:test
:buildSrc:check
:buildSrc:build
:makeReleaseVersion UP-TO-DATE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;到此为止你学习了简单任务的创建，自定义的task类，指定Gradle API提供的task类型，查看了任务动作和任务配置的区别，以及他们的使用情形，任务配置和任务动作是在不同阶段执行的。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Java虚拟机简介</title>
   <link href="http://http://coolshell.info/blog/2015/04/java-virtual-mechine.html"/>
   <updated>2015-04-18T00:00:00+00:00</updated>
   <id>/blog/2015/04/java-virtual-mechine</id>
   <content type="html">
&lt;p&gt;Java虚拟机是整个Java平台的基础，是Java语言用于实现与硬件、操作系统无关的关键，Java虚拟机类似一个微型的计算机，它有自己的指令集和运行时的内存区域。java虚拟机和java语言并没有必然的联系，它只与特定的二进制文件–class文件相关联，只要符合java虚拟机规范的class文件都能在虚拟机上运行。&lt;/p&gt;

&lt;p&gt;下面讲到虚拟机的特性时，都只限于 SE 7，因为前不久出了SE8，虚拟机的有些特性发生了改变，以后再来阐述。
这个系列将分为几个部分来阐述：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Java虚拟机结构简介&lt;/li&gt;
  &lt;li&gt;Java虚拟机编译器&lt;/li&gt;
  &lt;li&gt;Class文件格式&lt;/li&gt;
  &lt;li&gt;加载、链接和初始化&lt;/li&gt;
  &lt;li&gt;虚拟机指令集&lt;/li&gt;
  &lt;li&gt;SE 8 的新特性&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;#Java虚拟机结构简介&lt;/p&gt;

&lt;p&gt;##Class文件格式&lt;/p&gt;

&lt;p&gt;编译后Java虚拟机采用了一种与平台无关的二进制格式来表示，为了确保class文件能在不同的平台上运行，所以虚拟机也约定了一些惯例，比如字节序。具体的请参考第三部分。&lt;/p&gt;

&lt;p&gt;##数据类型&lt;/p&gt;

&lt;p&gt;与Java语言的数据类型相似，Java虚拟机可以操作的数据类型分为2类：原生类型(primitive type)和引用类型，可用于变量复制、参数传递、方法返回和运算操作。&lt;/p&gt;

&lt;p&gt;Java虚拟机希望在程序运行之前尽可能多的进行类型检查，使得虚拟机在运行期间无需进行这些操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原生类型&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;整数类型：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;byte类型：8位有符号整数，默认为0&lt;/li&gt;
  &lt;li&gt;char类型：16位&lt;strong&gt;无符号&lt;/strong&gt;整数，默认为Unicode的null（’\u0000’）&lt;/li&gt;
  &lt;li&gt;short类型：16位有符号整数，默认为0&lt;/li&gt;
  &lt;li&gt;int类型：32位有符号整数，默认为0&lt;/li&gt;
  &lt;li&gt;long类型：64位有符号整数，默认为0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;浮点数类型：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;float单精度浮点数：默认值为正数0&lt;/li&gt;
  &lt;li&gt;double双精度浮点数：默认为正数0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特殊的类型：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;boolean类型： 默认为false，虚拟机对boolean类型没有提供任何专用的字节码指令，在java语言中有关boolean类型的运算在编译之后都转换成int类型来代替，对于boolean类型的数组，虚拟机的newarray指令可以创建这种数组，在Oracle公司的虚拟机里，boolean数组会编译成byte数组，每个boolean元素占8位。&lt;/li&gt;
  &lt;li&gt;返回地址：作为一条字节码指令的操作数，这是唯一一个在虚拟机支持的类型当中不能直接与java语言的数据类型相对应的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;引用类型&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Java虚拟机有三种引用类型：类类型、数组类型和接口类型，这些引用类型的值分别由类实例、数组实例和实现某种接口的类实例创建。&lt;/p&gt;

&lt;p&gt;##运行时数据区&lt;/p&gt;

&lt;p&gt;###PC程序计数器&lt;/p&gt;

&lt;p&gt;每一个虚拟机线程都有自己的pc，在任何时刻，一个虚拟机线程只会执行一个方法的代码，这个方法称为该线程的当前方法，如果这个方法不是native的，pc寄存器就保存虚拟机正在执行的字节码指令的地址，如果方法是native的，那么pc寄存器的值是undefined,pc寄存器的容量至少应当保存一个returnAddress类型的数据或者一个与平台相关的本地指针的值。&lt;/p&gt;

&lt;p&gt;###虚拟机栈&lt;/p&gt;

&lt;p&gt;每一个虚拟机线程都有自己的虚拟机栈，这个栈与线程同时创建，用于存储栈帧(frame),虚拟机栈的作用就是用于存储一些局部变量和过程调用的返回结果，在方法调用和返回中起了重要的作用。栈容量只能由-Xss参数指定，由于Java虚拟机栈会出现StackOverflowError和OutOfMemoryError两种异常，所以分别使用两个例子演示这两种情况：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;java虚拟机栈深度溢出：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;单线程的环境下，无论是由于栈帧太大，还是虚拟机栈容量太小，当内存无法再分配的时候，虚拟机总抛出StackOverflowError异常。使用-Xss128k将java虚拟机栈大小设置为128kb，例子代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaVMStackOF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stackLeak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;statckLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;stackLeak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;JavaVMStackOF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavaVMStackOF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;oom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stackLeak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行一段时间后，产生StackOverflowError异常。Java虚拟机栈溢出一般会产生在方法递归调用过多而java虚拟机栈内存不够的情况下。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;java虚拟机栈内存溢出：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;多线程环境下，能够创建的线程最大内存=物理内存-最大堆内存-最大方法区内存，在java虚拟机栈内存一定的情况下，单个线程占用的内存越大，所能创建的线程数目越小，所以在多线程条件下很容易产生java虚拟机栈内存溢出的异常。&lt;/p&gt;

&lt;p&gt;使用-Xss2m参数设置java虚拟机栈内存大小为2MB，例子代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaVMStackOOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dontStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stackLeakByThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;dontStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;JavaVMStackOOM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavaVMStackOOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;oom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stackLeakByThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();.&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    
    
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行一段时间之后，java虚拟机栈就会因为内存太小无法创建线程而产生OutOfMemoryError。&lt;/p&gt;

&lt;p&gt;###Java堆&lt;/p&gt;

&lt;p&gt;在java虚拟机中，堆是各个线程共享的运行时内存区域，所有的对象都是在堆中创建。Java堆在虚拟机启动的时候被创建，它存储了垃圾收集器来管理对象，这些受管理的对象无需也无法显式的销毁，你想一个对象尽快被销魂，只能通过把所有的对象引用设置为null，等内存不足的时候垃圾收集器会标记这个不再被引用的对象然后回收该对对象占有的内存。当对象数量达到堆最大容量时产生OutOfMemoryError异常。&lt;/p&gt;

&lt;p&gt;想要方便快速地产生堆溢出，要使用如下java虚拟机参数：-Xms10m(最小堆内存为10MB)，-Xmx10m(最大堆内存为10MB，最小堆内存和最大堆内存相同是为了避免堆动态扩展)，-XX:+HeapDumpOnOutOfMemoryError可以让java虚拟机在出现内存溢出时产生当前堆内存快照以便进行异常分析。&lt;/p&gt;

&lt;p&gt;例子代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HeapOOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OOMObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OOMObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OOMObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OOMObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###方法区&amp;amp;&amp;amp;运行时常量池&lt;/p&gt;

&lt;p&gt;方法区也是供各个线程共享的内存区域，用于存储加载的类的结构信息，比如：运行时常量池、字段、方法数据等。方法区在虚拟机启动时创建，简单的虚拟机实现可以选择在这个区域不进行垃圾收集。运行时常量池用于保存加载的class文件的数字字面量和符号引用，在加载类和接口到虚拟机之后，就创建对应的运行时常量池。可以使用-XX:PermSize=10m和-XX:MaxPermSize=10m将永久代最大内存和最小内存设置为10MB大小，并且由于永久代最大内存和最小内存大小相同，因此无法扩展。&lt;/p&gt;

&lt;p&gt;String的intern()方法用于检查常量池中如果有等于此String对象的字符串存在，则直接返回常量池中的字符串对象，否则，将此String对象所包含的字符串添加到运行时常量池中，并返回此String对象的引用。因此String的intern()方法特别适合演示运行时常量池溢出，例子代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RuntimeConstantPoolOOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;  
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;intern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
    
     &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行一段时间，永久代内存不够，运行时常量池因无法再添加常量而产生OutOfMemoryError。&lt;/p&gt;

&lt;p&gt;##栈帧&lt;/p&gt;

&lt;p&gt;栈帧是用来存储数据和部分过程调用结果的数据结构，有时也会用来处理动态链接、方法返回值和异常分派。&lt;/p&gt;

&lt;p&gt;栈帧随着方法调用而创建，随着方法结束而销毁–无论是正常结束还是异常完成都算方法结束，每一个栈帧都有自己的局部变量表和操作数栈(operand stack)和&lt;strong&gt;指向当前方法所属类的运行时常量池的引用&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;局部变量表和操作数栈的容量在编译器确定，保存在方法的code属性提供给栈帧使用，在给定的一个线程中，只有目前那个正在执行的方法的栈帧是活动的，这个栈帧称为当前栈帧，这个栈帧对应的方法称为当前方法，定义这个方法的类称为当前类。对局部变量表和操作数栈的各种操作，都是指对当前栈帧的局部变量表和操作数栈进行的操作。&lt;/p&gt;

&lt;p&gt;如果当前方法调用了其他方法时，一个新的栈帧随之创建，随着程序的控制权转移交到新的方法而成为新的当前栈帧，当方法返回之时，当前栈帧把执行结果返回给前一个栈帧，随之丢弃当前栈帧，前一个栈帧重新成为当前栈帧。&lt;/p&gt;

&lt;p&gt;###局部变量表&lt;/p&gt;

&lt;p&gt;一个局部变量可以保存一个类型为boolean、byte、char、short、int、float、refrence或返回地址的数据，两个局部变量可以保存一个类型为long或者double的数据。&lt;/p&gt;

&lt;p&gt;局部变量表使用索引来定位访问，long和double占用两个连续的局部变量，这两种类型的数据使用两个局部变量中较小的索引来访问，Java虚拟机使用局部变量表来完成方法调用时的参数传递，当调用一个方法时，他的参数会传递至从0开始的连续的局部变量表的位置上。当调用的是实例方法时，第0个局部变量一定是用来存储被调用方法所在对象的引用(java语言的this关键字)。&lt;/p&gt;

&lt;p&gt;###操作数栈&lt;/p&gt;

&lt;p&gt;每个栈帧内部都包含一个称为操作数栈的先进后出的结构，同样操作数栈的长度由编译器决定，并且通过方法的code属性保存及提供给栈帧使用。
栈帧在刚刚创建的时候，操作数栈是空的，java虚拟机提供一些字节码指令来从局部变量表或者对象的字段中复制常量或者变量值到操作数栈中，也提供一些指令用于从操作数栈中取走数据、操作数据以及把操作结果重新入栈，每个操作数栈的位置报以保存一个Java虚拟机定义的任何数据类型的值，包括long和double。在操作数栈中的数据必须正确操作，不可以入栈两个int类型的数据然后当成long类型区操作，也不能入栈两个float类型的数据然后使用iadd指令对他们求和。&lt;/p&gt;

&lt;p&gt;###动态链接&lt;/p&gt;

&lt;p&gt;每个栈帧内部都包含一个指向当前方法所属的类的运行时常量池的引用，动态链接的作用就是将这些符号引用所表示的方法转换成实际方法的引用，类加载的过程将变量访问转换为这些变量的存储结构所在的运行时内存的位置的正确偏移量。&lt;/p&gt;

&lt;p&gt;###方法正常调用完成&lt;/p&gt;

&lt;p&gt;方法正常调用完成是指在方法的执行过程中，没有抛出任何异常，如果当前方法正常完成，它很可能会返回一个值给他的调用者，使用哪一个返回指令取决于方法返回值的数据类型。在这样的情况下，当前栈帧(被调用者)承担着回复调用者状态的责任，其状态包括调用者的局部变量表，操作数栈以及PC，使得调用者的代码在被调用者返回后能够继续执行。&lt;/p&gt;

&lt;p&gt;##对象的表示&lt;/p&gt;

&lt;p&gt;Java虚拟机并不强制规定对象的内部结构应该如何表示。在Oracle的某些虚拟机实现中，指向对象的引用实际上一个指向句柄(Handler)的指针，这个句柄包含两部分，一部分是指向在堆中分配的对象数据，另一部分是指向常量池中该对象所属类的相关信息。&lt;/p&gt;

&lt;p&gt;##字节码指令&lt;/p&gt;

&lt;p&gt;大部分的指令都没有支持整数类型byte、char和short，甚至没有任何指令支持boolean类型，编译器会在编译器或者运行期把byte和short类型的数据进行符号扩展成int类型数据，把boolean和char类型的数据进行零位扩展成int类型数据。&lt;/p&gt;

&lt;p&gt;Java虚拟机支持数值类型之间进行相互转换，包括宽化类型转换和窄化类型转换，这里的宽和窄是指该类型能表示的数值范围大小，比如float的范围比int大。&lt;/p&gt;

&lt;p&gt;从int转换成long或者double不会丢失精度，但是从int或者long转换成float，或者long转换成double可能会丢失精度(可能丢失最低几个有效位的数值)。窄化类型的转换可能导致转换结果产生不同的正负号，这种转换仅仅是把数据的高位丢弃，正数int转换成short就可能变成了负数。&lt;/p&gt;

&lt;p&gt;将浮点数转换成整数，很有可能浮点数的范围超过了整数能表示的范围，这时候就转换成整数类型所能表示的最大或者最小值，NaN转换成int或者long类型的0。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>android实用小技巧</title>
   <link href="http://http://coolshell.info/blog/2015/04/android-tips.html"/>
   <updated>2015-04-16T01:52:18+00:00</updated>
   <id>/blog/2015/04/android-tips</id>
   <content type="html">&lt;p&gt;
本文是一篇译文,讲述的是Android开发过程中遇到的一些实用的小技巧,或者一些实用的API,作者介绍的非常全面，推荐大家收藏起来，平常写Android程序也用的上。&lt;/p&gt;

&lt;p&gt;###第一部分&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#startActivities(android.content.Intent[]&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity.startActivities()&lt;/a&gt;) 常用于在应用程序中间启动其他的Activity.&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/text/TextUtils.html#isEmpty(java.lang.CharSequence&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TextUtils.isEmpty()&lt;/a&gt;) 简单的工具类,用于检测是否为空&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Html.fromHtml()&lt;/a&gt;) 用于生成一个Html,参数可以是一个字符串.个人认为它不是很快,所以我不怎么经常去用.（我说不经常用它是为了重点突出这句话：请多手动构建 Spannable 来替换 Html.fromHtml），但是它对渲染从 web 上获取的文字还是很不错的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/widget/TextView.html#setError%28java.lang.CharSequence%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TextView.setError()&lt;/a&gt; 在验证用户输入的时候很棒&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/os/Build.VERSION_CODES.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Build.VERSION_CODES&lt;/a&gt; 这个标明了当前的版本号,在处理兼容性问题的时候经常会用到.点进去可以看到各个版本的不同特性&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/util/Log.html#getStackTraceString(java.lang.Throwable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Log.getStackTraceString()&lt;/a&gt;) 方便的日志类工具,方法Log.v()、Log.d()、Log.i()、Log.w()和Log.e()都是将信息打印到LogCat中，有时候需要将出错的信息插入到数据库或一个自定义的日志文件中，那么这种情况就需要将出错的信息以字符串的形式返回来，也就是使用static String getStackTraceString(Throwable tr)方法的时候.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/LayoutInflater.html#from%28android.content.Context%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LayoutInflater.from()&lt;/a&gt; 顾名思义,用于Inflate一个layout,参数是layout的id.这个经常写Adapter的人会用的比较多.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/ViewConfiguration.html#getScaledTouchSlop%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewConfiguration.getScaledTouchSlop()&lt;/a&gt; 使用 ViewConfiguration 中提供的值以保证所有触摸的交互都是统一的。这个方法获取的值表示:用户的手滑动这个距离后,才判定为正在进行滑动.当然这个值也可以自己来决定.但是为了一致性,还是使用标准的值较好.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/telephony/PhoneNumberUtils.html#convertKeypadLettersToDigits%28java.lang.String%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhoneNumberUtils.convertKeypadLettersToDigits&lt;/a&gt; 顾名思义.将字母转换为数字,类似于T9输入法,&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/content/Context.html#getCacheDir%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Context.getCacheDir()&lt;/a&gt; 获取缓存数据文件夹的路径,很简单但是知道的人不多,这个路径通常在SD卡上(这里的SD卡指的是广义上的SD卡,包括外部存储和内部存储)Adnroid/data/您的应用程序包名/cache/  下面.测试的时候,可以去这里面看是否缓存成功.缓存在这里的好处是:不用自己再去手动创建文件夹,不用担心用户把自己创建的文件夹删掉,在应用程序卸载的时候,这里会被清空,使用第三方的清理工具的时候,这里也会被清空.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/animation/ArgbEvaluator.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ArgbEvaluator&lt;/a&gt; 用于处理颜色的渐变。就像 Chris Banes 说的一样，这个类会进行很多自动装箱的操作，所以最好还是去掉它的逻辑自己去实现它。这个没用过,不明其所以然,回头再补充.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/ContextThemeWrapper.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ContextThemeWrapper&lt;/a&gt; 方便在运行的时候修改主题.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/widget/Space.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Space&lt;/a&gt; space是Android 4.0中新增的一个控件，它实际上可以用来分隔不同的控件，其中形成一个空白的区域.这是一个轻量级的视图组件，它可以跳过Draw，对于需要占位符的任何场景来说都是很棒的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/animation/ValueAnimator.html#reverse%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ValueAnimator.reverse()&lt;/a&gt; 这个方法可以很顺利地取消正在运行的动画.我超喜欢.&lt;/p&gt;

&lt;p&gt;###第二部分&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/text/format/DateUtils.html#formatDateTime%28android.content.Context,%20long,%20int%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DateUtils.formatDateTime()&lt;/a&gt; 用来进行区域格式化工作,输出格式化和本地化的时间或者日期.&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/AlarmManager.html#setInexactRepeating(int, long, long, android.app.PendingIntent&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AlarmManager.setInexactRepeating&lt;/a&gt;) 通过闹铃分组的方式省电,即使你只调用了一个闹钟,这也是一个好的选择,（可以确保在使用完毕时自动调用 AlarmManager.cancel ()。原文说的比较抽象,这里详细说一下:setInexactRepeating指的是设置非准确闹钟,使用方法:alarmManager.setInexactRepeating(AlarmManager.RTC, startTime,intervalL, pendingIntent),非准确闹钟只能保证大致的时间间隔，但是不一定准确，可能出现设置间隔为30分钟，但是实际上一次间隔20分钟，另一次间隔40分钟。它的最大的好处是可以合并闹钟事件，比如间隔设置每30分钟一次，不唤醒休眠，在休眠8小时后已经积累了16个闹钟事件，而在手机被唤醒的时候，非准时闹钟可以把16个事件合并为一个, 所以这么看来,非准时闹钟一般来说比较节约能源.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/text/format/Formatter.html#formatFileSize(android.content.Context, long&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Formatter.formatFileSize()&lt;/a&gt;) 一个区域化的文件大小格式化工具。通俗来说就是把大小转换为MB,G,KB之类的字符串.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/ActionBar.html#hide(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ActionBar.hide()&lt;/a&gt;)/&lt;a href=&quot;http://developer.android.com/reference/android/app/ActionBar.html#show(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;.show()&lt;/a&gt;) 顾名思义,隐藏和显示ActionBar,可以优雅地在全屏和带Actionbar之间转换.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/text/util/Linkify.html#addLinks(android.text.Spannable, int&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linkify.addLinks()&lt;/a&gt;)  在Text上添加链接.很实用.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/text/StaticLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StaticLayout&lt;/a&gt; 在自定义 View 中渲染文字的时候很实用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#onBackPressed(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity.onBackPressed()&lt;/a&gt;) 很方便的管理back键的方法,有时候需要自己控制返回键的事件的时候,可以重写一下.比如加入 “点两下back键退出” 功能.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/GestureDetector.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GestureDetector&lt;/a&gt; 用来监听和相应对应的手势事件,比如点击,长按,慢滑动,快滑动,用起来很简单,比你自己实现要方便许多.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/graphics/DrawFilter.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DrawFilter&lt;/a&gt; 可以让你在不调用onDrew方法的情况下,操作canvas,比了个如,你可以在创建自定义 View 的时候设置一个 DrawFilter，给父 View 里面的所有 View 设置反别名。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/ActivityManager.html#getMemoryClass(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ActivityManager.getMemoryClass()&lt;/a&gt;) 告诉你你的机器还有多少内存,在计算缓存大小的时候会比较有用.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/ViewStub.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewStub&lt;/a&gt; 它是一个初始化不做任何事情的 View，但是之后可以载入一个布局文件。在慢加载 View 中很适合做占位符。唯一的缺点就是不支持标签，所以如果你不太小心的话，可能会在视图结构中加入不需要的嵌套。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/os/SystemClock.html#sleep(long&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SystemClock.sleep()&lt;/a&gt;) 这个方法在保证一定时间的 sleep 时很方便，通常我用来进行 debug 和模拟网络延时。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/util/DisplayMetrics.html#density&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DisplayMetrics.density&lt;/a&gt; 这个方法你可以获取设备像素密度,大部分时候最好让系统来自动进行缩放资源之类的操作,但是有时候控制的效果会更好一些.(尤其是在自定义View的时候).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/util/Pair.html#create(A, B&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pair.create()&lt;/a&gt;) 方便构建类和构造器的方法。&lt;/p&gt;

&lt;p&gt;###第三部分&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/net/UrlQuerySanitizer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UrlQuerySanitizer&lt;/a&gt;——使用这个工具可以方便对 URL 进行检查。&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/Fragment.html#setArguments%28android.os.Bundle%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fragment.setArguments&lt;/a&gt;——因为在构建 Fragment 的时候不能加参数，所以这是个很好的东西，可以在创建 Fragment 之前设置参数（即使在 configuration 改变的时候仍然会导致销毁/重建）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/DialogFragment.html#setShowsDialog%28boolean%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DialogFragment.setShowsDialog ()&lt;/a&gt;—— 这是一个很巧妙的方式，DialogFragment 可以作为正常的 Fragment 显示！这里可以让 Fragment 承担双重任务。我通常在创建 Fragment 的时候把 onCreateView ()和 onCreateDialog ()都加上，就可以创建一个具有双重目的的 Fragment。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/FragmentManager.html#enableDebugLogging%28boolean%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FragmentManager.enableDebugLogging ()&lt;/a&gt;——在需要观察 Fragment 状态的时候会有帮助。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/support/v4/content/LocalBroadcastManager.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LocalBroadcastManager&lt;/a&gt;——这个会比全局的 broadcast 更加安全，简单，快速。像 &lt;a href=&quot;http://square.github.io/otto/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;otto&lt;/a&gt; 这样的 Event buses 机制对你的应用场景更加有用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/telephony/PhoneNumberUtils.html#formatNumber%28java.lang.String%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhoneNumberUtils.formatNumber ()&lt;/a&gt;——顾名思义，这是对数字进行格式化操作的时候用的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/graphics/Region.html#op%28android.graphics.Region,%20android.graphics.Region,%20android.graphics.Region.Op%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Region.op()&lt;/a&gt;——我发现在对比两个渲染之前的区域的时候很实用，如果你有两条路径，那么怎么知道它们是不是会重叠呢？使用这个方法就可以做到。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/Application.html#registerActivityLifecycleCallbacks%28android.app.Application.ActivityLifecycleCallbacks%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Application.registerActivityLifecycleCallbacks&lt;/a&gt;——虽然缺少官方文档解释，不过我想它就是注册 Activity 的生命周期的一些回调方法（顾名思义），就是一个方便的工具。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Types&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;versionNameSuffix&lt;/a&gt;——这个 gradle 设置可以让你在基于不同构建类型的 manifest 中修改版本名这个属性，例如，如果需要在在 debug 版本中以”-SNAPSHOT”结尾，那么就可以轻松的看出当前是 debug 版还是 release 版。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/database/CursorJoiner.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CursorJoiner&lt;/a&gt;——如果你是只使用一个数据库的话，使用 SQL 中的 join 就可以了，但是如果收到的数据是来自两个独立的 ContentProvider，那么 CursorJoiner 就很实用了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.genymotion.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Genymotion&lt;/a&gt;——一个非常快的 Android 模拟器，本人一直在用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/guide/practices/screens_support.html#qualifiers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;-nodpi&lt;/a&gt;——在没有特别定义的情况下，很多修饰符(-mdpi,-hdpi,-xdpi等等)都会默认自动缩放 assets/dimensions，有时候我们需要保持显示一致，这种情况下就可以使用 -nodpi。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/content/BroadcastReceiver.html#setDebugUnregister%28boolean%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BroadcastRecevier.setDebugUnregister ()&lt;/a&gt;——又一个方便的调试工具。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#recreate%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity.recreate ()&lt;/a&gt;——强制让 Activity 重建。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/content/pm/PackageManager.html#checkSignatures%28java.lang.String,%20java.lang.String%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PackageManager.checkSignatures ()&lt;/a&gt;——如果同时安装了两个 app 的话，可以用这个方法检查。如果不进行签名检查的话，其他人可以轻易通过使用一样的包名来模仿你的 app。&lt;/p&gt;

&lt;p&gt;###第四部分&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#isChangingConfigurations%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Activity.isChangingConfigurations ()&lt;/a&gt;——如果在 Activity 中 configuration 会经常改变的话，使用这个方法就可以不用手动做保存状态的工作了。&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/content/SearchRecentSuggestionsProvider.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SearchRecentSuggestionsProvider&lt;/a&gt;——可以创建最近提示效果的 provider，是一个简单快速的方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/ViewTreeObserver.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewTreeObserver&lt;/a&gt;——这是一个很棒的工具。可以进入到 VIew 里面，并监控 View 结构的各种状态，通常我都用来做 View 的测量操作（自定义视图中经常用到）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.timroes.de/2013/09/12/speed-up-gradle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;org.gradle.daemon=true&lt;/a&gt;——这句话可以帮助减少 Gradle 构建的时间，仅在命令行编译的时候用到，因为 Android Studio 已经这样使用了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/database/DatabaseUtils.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DatabaseUtils&lt;/a&gt;——一个包含各种数据库操作的使用工具。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/widget/LinearLayout.html#attr_android:weightSum&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android:weightSum (LinearLayout)&lt;/a&gt;——如果想使用 layout weights，但是却不想填充整个 LinearLayout 的话，就可以用 weightSum 来定义总的 weight 大小。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/View.html#attr_android:duplicateParentState&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android:duplicateParentState (View)&lt;/a&gt;——此方法可以使得子 View 可以复制父 View 的状态。比如如果一个 ViewGroup 是可点击的，那么可以用这个方法在它被点击的时候让它的子 View 都改变状态。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/ViewGroup.html#attr_android:clipChildren&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android:clipChildren (ViewGroup)&lt;/a&gt;——如果此属性设置为不可用，那么 ViewGroup 的子 View 在绘制的时候会超出它的范围，在做动画的时候需要用到。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/widget/ScrollView.html#attr_android:fillViewport&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android:fillViewport (ScrollView)&lt;/a&gt;——在这片文章中有详细介绍&lt;a href=&quot;http://www.curious-creature.org/2010/08/15/scrollviews-handy-trick/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章链接&lt;/a&gt;，可以解决在 ScrollView 中当内容不足的时候填不满屏幕的问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/guide/topics/resources/drawable-resource.html#Bitmap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android:tileMode (BitmapDrawable)&lt;/a&gt;——可以指定图片使用重复填充的模式。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/R.attr.html#exitFadeDuration&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android:enterFadeDuration/android:exitFadeDuration (Drawables)&lt;/a&gt;——此属性在 Drawable 具有多种状态的时候，可以定义它展示前的淡入淡出效果。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/widget/ImageView.html#attr_android:scaleType&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android:scaleType (ImageView)&lt;/a&gt;——定义在 ImageView 中怎么缩放/剪裁图片，一般用的比较多的是“centerCrop”和“centerInside”。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/training/improving-layouts/reusing-layouts.html#Merge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Merge&lt;/a&gt;——此标签可以在另一个布局文件中包含别的布局文件，而不用再新建一个 ViewGroup，对于自定义 ViewGroup 的时候也需要用到；可以通过载入一个带有标签的布局文件来自动定义它的子部件。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/util/AtomicFile.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AtomicFile&lt;/a&gt;——通过使用备份文件进行文件的原子化操作。这个知识点之前我也写过，不过最好还是有出一个官方的版本比较好。&lt;/p&gt;

&lt;p&gt;###第五部分&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewDragHelper&lt;/a&gt; ——视图拖动是一个比较复杂的问题。这个类可以帮助解决不少问题。如果你需要一个例子，&lt;a href=&quot;https://developer.android.com/reference/android/support/v4/widget/DrawerLayout.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DrawerLayout&lt;/a&gt;就是利用它实现扫滑。Flavient Laurent 还写了一些关于这方面的&lt;a href=&quot;http://flavienlaurent.com/blog/2013/08/28/each-navigation-drawer-hides-a-viewdraghelper/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;优秀文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/widget/PopupWindow.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PopupWindow&lt;/a&gt;——Android到处都在使用PopupWindow ，甚至你都没有意识到（标题导航条ActionBar，自动补全AutoComplete，编辑框错误提醒Edittext Errors）。这个类是创建浮层内容的主要方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/ActionBar.htmlgetThemedContext%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Actionbar.getThemrContext()&lt;/a&gt;——导航栏的主题化是很复杂的（不同于Activity其他部分的主题化）。你可以得到一个上下文（Context），用这个上下文创建的自定义组件可以得到正确的主题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/media/ThumbnailUtils.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ThumbnailUtils&lt;/a&gt;——帮助创建缩略图。通常我都是用现有的图片加载库（比如，Picasso 或者 Volley），不过这个ThumbnaiUtils可以创建视频缩略图。&lt;strong&gt;译者注：&lt;/strong&gt;该API从V8才开始支持。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/Context.htmlgetExternalFilesDir%28java.lang.String%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Context.getExternalFilesDir()&lt;/a&gt;———— 申请了SD卡写权限后，你可以在SD的任何地方写数据，把你的数据写在设计好的合适位置会更加有礼貌。这样数据可以及时被清理，也会有更好的用户体验。此外，Android 4.0 Kitkat中在这个文件夹下写数据是不需要权限的，每个用户有自己的独立的数据存储路径。&lt;strong&gt;译者注：&lt;/strong&gt;该API从V8才开始支持。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/util/SparseArray.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SparseArray&lt;/a&gt;——Map的高效优化版本。推荐了解姐妹类SparseBooleanArray、SparseIntArray和SparseLongArray。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.htmlsetComponentEnabledSetting%28android.content.ComponentName,%20int,%20int%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PackageManager.setComponentEnabledSetting()&lt;/a&gt;——可以用来启动或者禁用程序清单中的组件。对于关闭不需要的功能组件是非常赞的，比如关掉一个当前不用的广播接收器。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.htmlyieldIfContendedSafely%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SQLiteDatabase.yieldIfContendedSafely()&lt;/a&gt;——让你暂时停止一个数据库事务， 这样你可以就不会占用太多的系统资源。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/os/Environment.html#getExternalStoragePublicDirectory%28java.lang.String%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Environment.getExternalStoragePublicDirectory()&lt;/a&gt;——还是那句话，用户期望在SD卡上得到统一的用户体验。用这个方法可以获得在用户设备上放置指定类型文件（音乐、图片等）的正确目录。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/view/View.htmlgenerateViewId%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;View.generateViewId()&lt;/a&gt;——每次我都想要推荐动态生成控件的ID。需要注意的是，不要和已经存在的控件ID或者其他已经生成的控件ID重复。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/ActivityManager.htmlclearApplicationUserData%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ActivityManager.clearApplicationUserData()&lt;/a&gt;—— 一键清理你的app产生的用户数据，可能是做用户退出登录功能，有史以来最简单的方式了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/content/Context.htmlcreateConfigurationContext%28android.%E2%80%94%E2%80%94ontent.res.Configuration%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Context.createConfigurationContext()&lt;/a&gt; ——自定义你的配置环境信息。我通常会遇到这样的问题：强制让一部分显示在某个特定的环境下（倒不是我一直这样瞎整，说来话长，你很难理解）。用这个实现起来可以稍微简单一点。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/ActivityOptions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ActivityOptions&lt;/a&gt; ——方便的定义两个Activity切换的动画。 使用&lt;a href=&quot;http://developer.android.com/reference/android/support/v4/app/ActivityOptionsCompat.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ActivityOptionsCompat&lt;/a&gt; 可以很好解决旧版本的兼容问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/widget/AdapterViewFlipper.htmlfyiWillBeAdvancedByHostKThx%28%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AdapterViewFlipper.fyiWillBeAdvancedByHostKThx()&lt;/a&gt;——仅仅因为很好玩，没有其他原因。在整个安卓开源项目中（AOSP the Android ——pen Source Project Android开放源代码项目）中还有其他很有意思的东西（比如&lt;br /&gt;&lt;a href=&quot;http://developer.android.com/reference/android/hardware/SensorManager.htmlGRAVITY_DEATH_STAR_I&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GRAVITY_DEATH_STAR_I&lt;/a&gt;）。不过，都不像这个这样，这个确实有用&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/view/ViewParent.htmlrequestDisallowInterceptTouchEvent%28boolean%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewParent.requestDisallowInterceptTouchEvent()&lt;/a&gt; ——Android系统触摸事件机制大多时候能够默认处理，不过有时候你需要使用这个方法来剥夺父级控件的控制权（顺便说一下，如果你想对Android触摸机制了解更多，&lt;a href=&quot;https://www.youtube.com/watch?v=EZAoJU-nUyI&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个演讲&lt;/a&gt;会令你惊叹不已。）&lt;/p&gt;

&lt;p&gt;原文作者:&lt;a href=&quot;http://blog.danlew.net/about/&quot;&gt;http://blog.danlew.net/about/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文地址：&lt;a href=&quot;http://coolshell.info/blog/2015/04/android-tips.html&quot;&gt;http://coolshell.info/blog/2015/04/android-tips.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文地址：&lt;a href=&quot;http://coolshell.info/blog/2015/04/android-tips.html&quot;&gt;http://coolshell.info/blog/2015/04/android-tips.html&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>网络传输基础</title>
   <link href="http://http://coolshell.info/blog/2015/04/web-transmission-basis.html"/>
   <updated>2015-04-16T00:00:00+00:00</updated>
   <id>/blog/2015/04/web-transmission-basis</id>
   <content type="html">&lt;p&gt;示例：Web服务器向Http客户端传送数据的过程:&lt;/p&gt;

&lt;p&gt;在详细阐述网络传输过程之前，先来看一个最常见的例子，下图显示了一个网络服务器向客户端传送数据的完整过程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://community.emc.com/servlet/JiveServlet/downloadImage/2-831148-90202/image002.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;需要传送的数据是网络服务器的HTML页面。&lt;/li&gt;
  &lt;li&gt;应用协议HTTP报文首部添加到HTML数据之前。报文头信息包括：服务器所使用的HTTP版本（1.0/1.1），以及表明它包含发给网络客户端信息的状态编码（比如200表示Ok）。&lt;/li&gt;
  &lt;li&gt;HTTP应用层协议将HTML格式的网页数据发送给传输层，传输层添加TCP首部信息。TCP传输层用于管理网络服务器和客户端之间的会话，TCP是面向连接的，通过拥赛控制、滑动窗口、超时重传等机制保证数据有效的传输给客户端。&lt;/li&gt;
  &lt;li&gt;IP首部添加到TCP首部之前。IP层指定适当的源和目的IP地址。这些信息就构成了IP报文（IP Packet）。&lt;/li&gt;
  &lt;li&gt;以太网协议首部添加到IP报文的两端之后，就形成了数据链路帧(frame)。上述帧发送至通向网络客户端的路径上的最近一个路由器（默认网关）。每经过一个路由器会移除以太网信息，观察IP报文，判定最佳路径，将报文插入一个新的帧（下一个路由器的MAC地址），并发送至目标路径上下一个相邻路由器。每一个路由器在转发之前都移除并添加新的数据链路层信息。&lt;/li&gt;
  &lt;li&gt;数据通过互联网络传输，互联网络包含媒介和中间设备。&lt;/li&gt;
  &lt;li&gt;客户端接收到包含数据的数据链路帧，处理各层协议头，之后以与添加时相反的顺序移除协议头。首先处理并移除以太网信息，之后是IP协议信息，接下来TCP信息，最后是HTTP信息。&lt;/li&gt;
  &lt;li&gt;之后，将网页信息传递给客户端网页浏览器，浏览器把HTML网页渲染呈现给用户。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###数据封装:&lt;/p&gt;

&lt;p&gt;消息要在网络中传输，必须对它进行编码，以特定的格式进行封装，同时需要适当地封装以足够的控制和地址信息，以使它能够从发送方移动到接收方。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;消息大小&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;理论上，视频或邮件信息是能够以大块非中断型流从网络源地址传送到目的地址，但这也意味着同一时刻同一网络其他设备就无法收发消息。这种大型数据流会造成显著延时。并且，如果传输过程中连接断开，整个数据流都会丢失需要全部重传。因此更好的方法是将数据流分割（segmentation）为较小的，便于管理的片段，能够带来两点好处：&lt;/p&gt;

&lt;p&gt;· 发送较小片段，网络上同时可有多个会话交错进行。这种在网络上将不同会话片段交错进行的过程称为多路传输（multiplexing）。
· 分割可提高网络通讯的可靠性。各消息片段从源地址到目的地址无需经过相同路径，如果一条路径被堵塞或断开，其余消息可从替换路径到达目的地址。如果部分消息到不了目的地址，那只需重传丢失部分。&lt;/p&gt;

&lt;p&gt;通过对片段打上标签的方式来保证顺序以及在接收时重组。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://community.emc.com/servlet/JiveServlet/downloadImage/2-831148-90202/image003.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;协议数据单元（Protocol Data Unit, PDU）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;应用层数据在传输过程中沿着协议栈向下传递，每一层协议都会向其中添加首部信息，TCP首部和IP首部都是20字节的长度。这就是封装的过程。
数据片段在各层网络结构中采用的形式就称为协议数据单元（PDU）。封装过程中，下一层对从上一层收到的PDU进行封装。在处理的每一个阶段PDU都有不同的名字来反应它的功能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://community.emc.com/servlet/JiveServlet/downloadImage/2-831148-90203/image004.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PDU按照TCP/IP协议的命名规范：
· 数据（Data）：应用层PDU的常用术语
· 分段（Segment）：传输层PDU
. 数据报(Packet): 网络成PDU
· 以太网帧（Frame）：链路层PDU
· 比特（Bits）：在介质上物理传输数据所使用的PDU。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;封装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;封装是指在传输之前为数据添加额外的协议头信息的过程。在绝大多数数据通信过程中，源数据在传输前都会封装以数层协议。在网络上发送消息时，主机上的协议栈从上至下进行操作。&lt;/p&gt;

&lt;p&gt;以网络服务器为例，HTTP应用层协议发送HTML格式网页数据到传输层，应用层数据被分成TCP分段。各TCP分段被打上标签（主要是端口号，HTTP默认端口为80），称为首部（header），表明接收方哪一个进程应当接收此消息。同时也包含使得接收方能够按照原有的格式来重组数据的信息。&lt;/p&gt;

&lt;p&gt;传输层将网页HTML数据封装成分段并发送至网络层，执行IP层协议。整个TCP分段封装成IP报文，也就是再添上IP首部。IP首部包括源和目的IP地址，以及发送报文到目的地址所必须的信息，包括一些控制字段。&lt;/p&gt;

&lt;p&gt;之后，IP报文发送到链路层，封装以帧头和帧尾。每个帧头都包含源和目的物理地址。物理地址唯一指定了本地网络上的设备。帧尾包含差错校正信息。最后，由服务器网卡将比特编码传输给介质。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解封装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接收主机以相反的方式（从下至上）进行操作称为解封装。解封装是接收设备移除一层或多层协议头的过程。数据在协议栈中向上移动直到终端应用层伴随着解封装。&lt;/p&gt;

&lt;p&gt;###访问本地资源：&lt;/p&gt;

&lt;p&gt;访问本地网络资源需要两种类型的地址：网络层地址和数据链路层地址。网络层和数据链路层负责将数据从发送设备传输至接收设备。两层协议都有源和目的地址，但两种地址的目的不同。&lt;/p&gt;

&lt;p&gt;示例：客户端PC1与FTP在同一IP网络的通信&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://community.emc.com/servlet/JiveServlet/downloadImage/2-831148-90204/image005.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;网络地址&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;网络层地址或IP地址包含两个部分：网络号和主机号。路由器使用网络前缀部分将报文转发给适当的网络。最后一个路由器使用主机部分将报文发送给目标设备。同一本地网络中，网络前缀部分是相同的，只有主机设备地址部分不同。&lt;/p&gt;

&lt;p&gt;源IP地址：发送设备，即客户端PC1的IP地址：192.168.1.110
目的IP地址：接收设备，即FTP服务器：192.168.1.9&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数据链路地址&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;数据链路地址（MAC）的目的是在&lt;strong&gt;同一网络中&lt;/strong&gt;将数据链路帧从一个网络接口发送至另一个网络接口。以太网LAN和无线网LAN是两种不同物理介质的网络示例，分别有自己的数据链路协议。
当IP报文的发送方和接收方位于同一网络，数据链路帧直接发送到接收设备（通过ARP来获取目的IP的MAC地址）。以太网上数据链路地址就是以太网MAC地址。MAC地址是物理植入网卡的48比特地址。
源MAC地址：发送IP报文的PC1以太网卡MAC地址，AA-AA-AA-AA-AA-AA。
目的MAC地址：当发送设备与接收设备位于同一网络，即为接收设备的数据链路地址。本例中，FTP MAC地址：CC-CC-CC-CC-CC-CC。
源和目的MAC地址添加到以太网帧中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://community.emc.com/servlet/JiveServlet/downloadImage/2-831148-90205/image006.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MAC与IP地址&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;发送方必须知道接收方的物理和逻辑地址。发送方主机能够以多种方式学习到接收方的IP地址：比如浏览器缓存、getHostByName系统调用、域名系统（Domain Name System, DNS），或通过应用手动输入，如用户指定FTP地址。&lt;/p&gt;

&lt;p&gt;以太网MAC地址是怎么识别的呢？发送方主机使用地址解析协议（Address Resolution Protocol, ARP）以检测本地网络的所有MAC地址。如下图所示，发送主机在整个LAN发送ARP请求消息，这是一条广播消息。ARP请求包含目标设备的IP地址，LAN上的每一个设备都会检查该ARP请求，看看是否包含它自身的IP地址。只有符合该IP地址的设备才会发送ARP响应。ARP响应包含ARP请求中IP地址相对应的MAC地址。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://community.emc.com/servlet/JiveServlet/downloadImage/2-831148-90206/670-270/image007.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;访问远程资源：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;默认网关&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当主机发送消息到远端网络，必须使用路由器，也称为默认网关。默认网关就是位于发送主机同一网络上的路由器的接口IP地址。有一点很重要：本地网络上的所有主机都能够配置自己的默认网关地址。如果该主机的TCP/IP设置中没有配置默认网关地址，或指定了错误的默认网关地址，则远端网络消息无法被送达。
如下图所示，LAN上的主机PC 1使用IP地址为192.168.1.1的R1作为默认网关，如果PDU的目的地址位于另一个网络，则主机将PDU发送至路由器上的默认网关。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://community.emc.com/servlet/JiveServlet/downloadImage/2-831148-90207/image008.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;与远端网络设备通讯&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下图显示了客户端主机PC 1与远端IP网络服务器进行通讯的网络层地址与数据链路层地址：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://community.emc.com/servlet/JiveServlet/downloadImage/2-831148-90208/image009.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;网络地址&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当报文的发送方与接收方位于不同网络，源和目的IP地址将会代表不同网络上的主机。
源IP地址：发送设备即客户端主机PC 1的IP地址：192.168.1.110。
目的IP地址：接收设备即网络服务器的IP地址：172.16.1.99。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数据链路地址&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当报文的发送方与接收方位于不同网络，以太网数据链路帧无法直接被发送到目的主机。以太网帧必须先发送给路由器或默认网关。本例中，默认网关是R1，R1的接口IP地址与PC 1属于同一网络，因此PC 1能够直接达到路由器。
源MAC地址：发送设备即PC 1的MAC地址，PC1的以太网接口MAC地址为：AA-AA-AA-AA-AA-AA。
目的MAC地址：当报文的发送方与接收方位于不同网络，这一值为路由器或默认网关的以太网MAC地址。本例中，即R1的以太网接口MAC地址，即：11-11-11-11-11-11。
IP报文封装成的以太网帧先被传输至R1，R1再转发给目的地址即网络服务器。R1可以转发给另一个路由器，如果目的服务器所在网路连接至R1，则直接发送给服务器。&lt;/p&gt;

&lt;p&gt;发送设备如何确定路由器的MAC地址？每一个设备通过自己的TCP/IP设置中的默认网关地址得知路由器的IP地址。之后，它通过ARP来得知默认网关的MAC地址，该MAC地址随后添加到帧中。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>优化java代码建议(1)</title>
   <link href="http://http://coolshell.info/blog/2015/04/java-code-opt-one.html"/>
   <updated>2015-04-12T13:05:13+00:00</updated>
   <id>/blog/2015/04/java-code-opt-one</id>
   <content type="html">&lt;p&gt;假设你要统计一个地区的人口平均年龄，你可能写出下面这段代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//人口数量50万&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peopleNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peopleNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peopleNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;heights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//计算时间&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;平均高度是： &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;average&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;运行时间： &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ms&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	    &lt;span class=&quot;c1&quot;&gt;//计算平均值&lt;/span&gt;
	    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;average&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//遍历求和&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个程序把50万人的身高存入一个ArrayList中，然后通过foreach遍历求和，再计算平均值，输出结果是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;平均高度是： 154
运行时间： 47ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;仅仅是一个算术平均值就花费了47ms，如果是加权平均值等算法，那花的时间肯定更长了，这段代码也没什么好优化的，唯一剩下的就是元素的遍历，List的遍历可以优化吗？&lt;/p&gt;

&lt;p&gt;我们之道List的遍历还有另外一种方法，通过下标来索引，代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;average1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//遍历求和&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;运行结果是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;平均身高是： 154
运行时间： 16ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到运行时间大幅下降，效率提高了65%，为什么性能得到这么大幅度的提升？&lt;/p&gt;

&lt;p&gt;这是因为Arraylist实现了RandomAccess接口（随机存取接口），这就标志这ArrayList是一个可以随机存取的列表，实现RandomAccess接口表明这个类可以随机存取，标志着这个List的元素之间&lt;strong&gt;没有关联&lt;/strong&gt;，两个相邻的元素之间没有相互的依赖关系和索引关系，可以随机访问和存储。&lt;/p&gt;

&lt;p&gt;Java中的foreach语法是iterator的变形用法，也就是说foreach和下面的代码等价：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();){&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们再来想想什么是迭代器，迭代器是23中设计模式中的一种，提供一种方法能够遍历容器的各个元素，同时又无需暴露该对象的实现细节，也就是说需要先创建一个迭代器容器，然后屏蔽内部遍历细节，对外提供hasNext、next方法，问题是ArrayList实现了RandomAccess接口，表明元素之间本来没有关系，可视为了使用迭代器就需要强制建立一种相互“知晓”的一种关系，比如上一个元素可以判断是否有下一个元素，以及下一个元素是什么，这就是通过foreach遍历耗时的原因。&lt;/p&gt;

&lt;p&gt;但是有些List实现类不是随机存取的，比如LinkedList类，也是一个列表，但它实现了双向链表，每个数据节点node都有三个数据项：前一个节点的引用、本节点元素、下一个节点的引用，也就是说LinkedList的两个元素之间是有关联的，我知道你的存在，你知道我的存在，这时候使用foreach来遍历效率就会更高，我们把代码中的ArrayList修改成LinkedList之后再运行下，结果如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;平均身高是： 154
运行时间： 16ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;确实如此，也是16ms，你可能也想用测试一下下标访问方法遍历LinkedList的元素，其实不用测试，效率非常低下。&lt;/p&gt;

&lt;p&gt;明白了随机存取和有序存取列表的区别，在遍历列表时就应该采用不同的遍历方式。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>一些强大的Vim插件</title>
   <link href="http://http://coolshell.info/blog/2015/03/vim-plugins.html"/>
   <updated>2015-03-20T01:20:26+00:00</updated>
   <id>/blog/2015/03/vim-plugins</id>
   <content type="html">
&lt;p&gt;除了一些常用的插件比如ctags，taglist，bufexplorer,winmamager之外，这里介绍一些很强大的插件。&lt;/p&gt;

&lt;p&gt;1.&lt;em&gt;Vundle&lt;/em&gt; &lt;a href=&quot;https://github.com/gmarik/Vundle.vim&quot;&gt;Github主页&lt;/a&gt;，一个强大的插件管理器&lt;/p&gt;

&lt;p&gt;###Vundle可以：&lt;/p&gt;

&lt;p&gt;1.在Vimrc文件里跟踪和配置你的插件&lt;/p&gt;

&lt;p&gt;2.只需敲一条命令就可以安装、更新、搜索、清除插件&lt;/p&gt;

&lt;p&gt;###安装Vundle&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;配置Vundle插件：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; nocompatible              &quot; be iMproved&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; required
    &lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; off                  &quot; required
    
    &lt;span class=&quot;c&quot;&gt;&quot; set the runtime path to include Vundle and initialize&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; rtp&lt;span class=&quot;p&quot;&gt;+=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.vim/&lt;/span&gt;bundle/Vundle&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#begin&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; alternatively, pass a path where Vundle should install plugins&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot;call vundle#begin(&#39;~/some/path/here&#39;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot;在下面添加你需要安装的插件&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; let Vundle manage Vundle, required&lt;/span&gt;
    Plugin &lt;span class=&quot;s1&quot;&gt;&#39;gmarik/Vundle.vim&#39;&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;&quot; The following are examples of different formats supported.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; Keep Plugin commands between vundle#begin/end.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot;在Github仓库的插件&lt;/span&gt;
    Plugin &lt;span class=&quot;s1&quot;&gt;&#39;tpope/vim-fugitive&#39;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; http://vim-scripts.org/vim/scripts.html网站上的插件直接写插件名称&lt;/span&gt;
    Plugin &lt;span class=&quot;s1&quot;&gt;&#39;L9&#39;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; Git plugin not hosted on GitHub&lt;/span&gt;
    Plugin &lt;span class=&quot;s1&quot;&gt;&#39;git://git.wincent.com/command-t.git&#39;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; 本机目录下的插件&lt;/span&gt;
    Plugin &lt;span class=&quot;s1&quot;&gt;&#39;file:///home/gmarik/path/to/plugin&#39;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; The sparkup vim script is in a subdirectory of this repo called vim.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; Pass the path to set the runtimepath properly.&lt;/span&gt;
    Plugin &lt;span class=&quot;s1&quot;&gt;&#39;rstacruz/sparkup&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;rtp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;vim/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; Avoid a name conflict with L9&lt;/span&gt;
    Plugin &lt;span class=&quot;s1&quot;&gt;&#39;user/L9&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;newL9&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;&quot; 所有的插件需要在这一行之前添加&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; vundle#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;            &quot; required
    &lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; plugin indent &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;    &quot; required
    &lt;span class=&quot;c&quot;&gt;&quot; To ignore plugin indent changes, instead use:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot;filetype plugin on&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###如何使用Vundle&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;    &lt;span class=&quot;c&quot;&gt;&quot; Brief help&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; :PluginList       - lists configured plugins&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&quot; 使用:h vundle 显示帮助文档&lt;/span&gt;

      &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;2.&lt;em&gt;neocomplete&lt;/em&gt; &lt;a href=&quot;https://github.com/Shougo/neocomplete.vim&quot;&gt;github主页&lt;/a&gt;，一个比VIm自带补全更强大的自动补全插件，支持更多的特性。&lt;/p&gt;

&lt;p&gt;###安装&lt;/p&gt;

&lt;p&gt;确保你的系统安装了下列之一：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vim-nox&lt;/li&gt;
  &lt;li&gt;vim-gtk&lt;/li&gt;
  &lt;li&gt;vim-gnome&lt;/li&gt;
  &lt;li&gt;vim-athena&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后再Vundle中添加一句：Plugin ‘Shougo/neocomplete.vim’，重新打开Vim就自动安装了&lt;/p&gt;

&lt;p&gt;###ScreenShots&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/2135f9b37963594325b304a7a57163b5b6ab8b11/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3231343438382f3632333135312f32383461643836652d636635622d313165322d383238652d3235376433316266303537322e706e67&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/4a4d1893ce150863dd815fa6967e5f526ac84727/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f3231343438382f3632333439362f39346564313961322d636636382d313165322d386433332d3361616438613339643763312e676966&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###配置&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;        &lt;span class=&quot;c&quot;&gt;&quot;Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot; Disable AutoComplPop.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:acp_enableAtStartup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot; Use neocomplete.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:neocomplete&lt;/span&gt;#enable_at_startup &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot; Use smartcase.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:neocomplete&lt;/span&gt;#enable_smart_case &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot; Set minimum syntax keyword length.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:neocomplete&lt;/span&gt;#sources#syntax#min_keyword_length &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:neocomplete&lt;/span&gt;#lock_buffer_name_pattern &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\*ku\*&#39;&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;&quot; Define dictionary.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:neocomplete&lt;/span&gt;#sources#dictionary#dictionaries &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;            \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;default&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;            \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;vimshell&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; $HOME&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/.vimshell_hist&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;            \&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;scheme&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; $HOME&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/.gosh_completions&#39;&lt;/span&gt;
&lt;span class=&quot;se&quot;&gt;                \&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;&quot; Define keyword.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;exists&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;g:neocomplete#keyword_patterns&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:neocomplete&lt;/span&gt;#keyword_patterns &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:neocomplete&lt;/span&gt;#keyword_patterns&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\h\w*&#39;&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;&quot; Plugin key-mappings.&lt;/span&gt;
        inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;expr&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;     neocomplete#undo_completion&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;expr&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;     neocomplete#complete_common_string&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;&quot; Recommended key-mappings.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot; &amp;lt;CR&amp;gt;: close popup and save indent.&lt;/span&gt;
        inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;=&amp;lt;&lt;/span&gt;SID&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;my_cr_function&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s:my_cr_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; neocomplete#close_popup&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;\&amp;lt;CR&amp;gt;&quot;&lt;/span&gt;
          &lt;span class=&quot;c&quot;&gt;&quot; For no inserting &amp;lt;CR&amp;gt; key.&lt;/span&gt;
          &lt;span class=&quot;c&quot;&gt;&quot;return pumvisible() ? neocomplete#close_popup() : &quot;\&amp;lt;CR&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot; &amp;lt;TAB&amp;gt;: completion.&lt;/span&gt;
        inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;expr&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;TAB&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  pumvisible&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; ? &lt;span class=&quot;s2&quot;&gt;&quot;\&amp;lt;C-n&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;\&amp;lt;TAB&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot; &amp;lt;C-h&amp;gt;, &amp;lt;BS&amp;gt;: close popup and delete backword char.&lt;/span&gt;
        inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;expr&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; neocomplete#smart_close_popup&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&amp;lt;C-h&amp;gt;&quot;&lt;/span&gt;
        inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;expr&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;BS&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; neocomplete#smart_close_popup&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&amp;lt;C-h&amp;gt;&quot;&lt;/span&gt;
        inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;expr&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  neocomplete#close_popup&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        inoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;expr&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;  neocomplete#cancel_popup&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot; Close popup by &amp;lt;Space&amp;gt;.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;Space&amp;gt; pumvisible() ? neocomplete#close_popup() : &quot;\&amp;lt;Space&amp;gt;&quot;&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;&quot; For cursor moving in insert mode(Not recommended)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;Left&amp;gt;  neocomplete#close_popup() . &quot;\&amp;lt;Left&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;Right&amp;gt; neocomplete#close_popup() . &quot;\&amp;lt;Right&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;Up&amp;gt;    neocomplete#close_popup() . &quot;\&amp;lt;Up&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;Down&amp;gt;  neocomplete#close_popup() . &quot;\&amp;lt;Down&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot; Or set this.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;let g:neocomplete#enable_cursor_hold_i = 1&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot; Or set this.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;let g:neocomplete#enable_insert_char_pre = 1&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;&quot; AutoComplPop like behavior.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;let g:neocomplete#enable_auto_select = 1&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;&quot; Shell like behavior(not recommended).&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;set completeopt+=longest&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;let g:neocomplete#enable_auto_select = 1&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;let g:neocomplete#disable_auto_complete = 1&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;inoremap &amp;lt;expr&amp;gt;&amp;lt;TAB&amp;gt;  pumvisible() ? &quot;\&amp;lt;Down&amp;gt;&quot; : &quot;\&amp;lt;C-x&amp;gt;\&amp;lt;C-u&amp;gt;&quot;&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;&quot; Enable omni completion.&lt;/span&gt;
        autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; css &lt;span class=&quot;k&quot;&gt;setlocal&lt;/span&gt; omnifunc&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;csscomplete#CompleteCSS
        autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; html&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;markdown &lt;span class=&quot;k&quot;&gt;setlocal&lt;/span&gt; omnifunc&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;htmlcomplete#CompleteTags
        autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; javascript &lt;span class=&quot;k&quot;&gt;setlocal&lt;/span&gt; omnifunc&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;javascriptcomplete#CompleteJS
        autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; python &lt;span class=&quot;k&quot;&gt;setlocal&lt;/span&gt; omnifunc&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;pythoncomplete#Complete
        autocmd &lt;span class=&quot;nb&quot;&gt;FileType&lt;/span&gt; xml &lt;span class=&quot;k&quot;&gt;setlocal&lt;/span&gt; omnifunc&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;xmlcomplete#CompleteTags
        
        &lt;span class=&quot;c&quot;&gt;&quot; Enable heavy omni completion.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;exists&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;g:neocomplete#sources#omni#input_patterns&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:neocomplete&lt;/span&gt;#sources#omni#input_patterns &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;let g:neocomplete#sources#omni#input_patterns.php = &#39;[^. \t]-&amp;gt;\h\w*\|\h\w*::&#39;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;let g:neocomplete#sources#omni#input_patterns.c = &#39;[^.[:digit:] *\t]\%(\.\|-&amp;gt;\)&#39;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot;let g:neocomplete#sources#omni#input_patterns.cpp = &#39;[^.[:digit:] *\t]\%(\.\|-&amp;gt;\)\|\h\w*::&#39;&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;&quot; For perlomni.vim setting.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&quot; https://github.com/c9s/perlomni.vim&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:neocomplete&lt;/span&gt;#sources#omni#input_patterns&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;perl &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;\h\w*-&amp;gt;\h\w*\|\h\w*::&#39;&lt;/span&gt;
         &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;3.&lt;em&gt;CtrlP插件&lt;/em&gt; &lt;a href=&quot;https://github.com/kien/ctrlp.vim&quot;&gt;github主页&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;快速查找文件、缓冲区、tag的Vim插件，可以同时打开多个文件，创建文件和目录&lt;/p&gt;

&lt;p&gt;基本操作：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在Vim中按下Ctrl+p打开Ctrlp插件
&amp;lt;c-d&amp;gt;在路径搜索和文件名搜索之间切换
 &amp;lt;c-r&amp;gt;在字符串搜索和正则表达式搜索中切换
&amp;lt;c-f&amp;gt;和&amp;lt;c-b&amp;gt;forward和backward，搜索结果在不同搜索模式中切换
&amp;lt;c-j&amp;gt;&amp;lt;c-k&amp;gt;在结果中切换
&amp;lt;c-n&amp;gt;&amp;lt;c-p&amp;gt;在搜索历史中切换
&amp;lt;c-t&amp;gt;在新Tab中打开选中的文件
&amp;lt;c-v&amp;gt;在垂直分屏中打开选中的文件
&amp;lt;c-s&amp;gt;在水平分屏中打开选中的文件
&amp;lt;c-y&amp;gt;创建新的文件和目录
&amp;lt;c-z&amp;gt;标记将要打开的文件
&amp;lt;c-o&amp;gt;打开被&amp;lt;c-z&amp;gt;标记的文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4&lt;em&gt;surround&lt;/em&gt; &lt;a href=&quot;https://github.com/tpope/vim-surround&quot;&gt;github主页&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大多数编程语言的语法都用到了配对符号surrounding: (), [], {}, &amp;lt;&amp;gt;, ‘’, “”，标记语言xml html 等更是完全依赖与这种语法。正常输入时，所有的编辑器都能胜任，大部分会在你输入一个括号时帮你补全另一半。vim 也有这样的插件auto-pair, 但是这个不是重点，真正的难题是当你需要为已一些存在的代码加上括号，删除一对括号但保留其中的内容，或者把一对()改成[]。&lt;/p&gt;

&lt;p&gt;使用surround，你将很容易添加和修改配对符号，比如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;	     Old text                  Command		 New text &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&quot;Hello *world!&quot;				 ds&quot;         Hello world!&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;*&lt;span class=&quot;m&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/2					cs])        (123+456)/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&quot;Look ma, I&#39;m *HTML!&quot;			cs&quot;&amp;lt;q&amp;gt;      &amp;lt;q&amp;gt;Look ma, I&#39;m HTML!&amp;lt;/q&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; *&lt;span class=&quot;k&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;						ysW&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      my $str &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; *whee&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;;				vlllls&lt;span class=&quot;s1&quot;&gt;&#39;     my $str = &#39;&lt;/span&gt;whee&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&#39;;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Yo&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;/div&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;				dst         Yo&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Yo&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;*&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;				cst&amp;lt;p&amp;gt;      &amp;lt;p&amp;gt;Yo!&amp;lt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面*代表当前光标位置，添加替换时使用后半括号)]}，添加的括号和内容间就没有空格（如第2个示例），反之会在内容前后添加一个空格（如第4个实例）。第6个示例中的t代表一对HTML或者xml tag。其他表示范围的符号：w代表word, W代表WORD(被空格分开的连续的字符窜），p代表paragraph。&lt;/p&gt;

&lt;p&gt;###命令列表&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;        Normal &lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;-----------&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;ds&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; delete &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; surrounding
    &lt;span class=&quot;k&quot;&gt;cs&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; change &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; surrounding
    ys  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; add &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; surrounding
    yS  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; add &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; surrounding and place the surrounded text &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; line &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; indent it
    yss &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; add &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; surrounding &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; the whole line
    ySs &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; add &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; surrounding &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; the whole line&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; place it &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; line &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; indent it
    ySS &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; same &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; ySs
    
    Visual &lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;-----------&lt;/span&gt;
    s   &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; visual &lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; add &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; surrounding
    S   &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; visual &lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; add &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; surrounding but place text &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; line &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; indent it
    
    Insert &lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;-----------&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CTRL&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;s&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; insert &lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; add &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; surrounding
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CTRL&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;s&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;CTRL&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;s&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; insert &lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; add &lt;span class=&quot;k&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; line &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; surrounding &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; indent
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CTRL&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;s &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; same &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CTRL&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;s&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CTRL&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;S &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; same &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CTRL&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;s&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;CTRL&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;s&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;5.&lt;em&gt;syntastic&lt;/em&gt;  &lt;a href=&quot;https://github.com/scrooloose/syntastic#installation&quot;&gt;githun主页&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;来看一下官方给的图片：
&lt;img src=&quot;http://foocoder.qiniudn.com/blog/syntasticsyntastic.png?token=hYfsyKwhHPe-Ga-1Hypx5F8CwimEywvTI8XdNpEm:z6zQYbdezgOYcKfzok7LEkuRDkg=:eyJTIjoiZm9vY29kZXIucWluaXVkbi5jb20vYmxvZy9zeW50YXN0aWNzeW50YXN0aWMucG5nIiwiRSI6MTQwMDA2ODU2N30=&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;图片很清楚的介绍了插件功能：&lt;/li&gt;
  &lt;li&gt;用location list 列出所有错误。&lt;/li&gt;
  &lt;li&gt;命令行窗口显示当前错误。&lt;/li&gt;
  &lt;li&gt;错误标记，有警告和错误。&lt;/li&gt;
  &lt;li&gt;鼠标悬停可以出现错误提示框&lt;/li&gt;
  &lt;li&gt;状态栏标记。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###配置&lt;/p&gt;

&lt;p&gt;当然也可以做一些简单的配置，比如设置为每次打开buffer就执行语法检查，而不只是在保存时：
    let g:syntastic_check_on_open = 1
如果想使用多个检查器，可以这样写：
    let g:syntastic_php_checkers = [‘php’, ‘phpcs’, ‘phpmd’]&lt;/p&gt;

&lt;p&gt;###错误跳转&lt;/p&gt;

&lt;p&gt;syntastic使用location list来显示所有的错误，location list和quificfix 类似，包含了位置信息。
调起这个location list
    :Errors 或者 :lopen
使用:lne[xt]和:lp[revious]就可以在错误间跳转。当然，如果用的多，可以做个mapping,更多内容可以参考帮助文档:help syntastic.&lt;/p&gt;

&lt;p&gt;6.&lt;em&gt;fugitive&lt;/em&gt;&lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;github主页&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you don’t know GIT, learn it right now!If you use GIT and VIM, use Fugitive right now!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;fugitive.vim插件是由Tim Pope创建的VIM插件。该插件与命令行git工具相辅相成，可以无缝的插入到工作流程中。&lt;/p&gt;

&lt;p&gt;在VIM的命令行中，%符号具有特殊的含义：他将扩展为当前文件的全路径。可以使用该命令来运行使用文件名作为参数的任意git命令，从而使得命令作用于当前的文件。但是fugitive也提供了一些便利的方法，其中的一些总结如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;      git	             fugitive	      action
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Git add %	        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Gwrite  	     Stage the current &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; the index
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Git checkout %	    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Gread	         Revert current &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; last checked &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; version
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Git rm %	        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Gremove	     Delete the current &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; and the corresponding Vim buffer
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Git mv %	        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Gmove	         Rename the current &lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; and the corresponding Vim buffer
     &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Android Studio多渠道打包和代码混淆教程</title>
   <link href="http://http://coolshell.info/blog/2015/03/android-studio-prefrence.html"/>
   <updated>2015-03-18T00:00:00+00:00</updated>
   <id>/blog/2015/03/android-studio-prefrence</id>
   <content type="html">&lt;p&gt;###什么是Gradle
Gradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，取而代之的是一种基于Groovy的领域特定（DSL）语言。Android Studio中新建项目成功后自动下载Gradle。
Gradle有几个基本组件：&lt;/p&gt;

&lt;p&gt;1.整个项目的gradle配置文件build.gradle&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Top-level build file where you can add configuration options common to all sub-projects/modules.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;com.android.tools.build:gradle:1.1.0&#39;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// NOTE: Do not place your application dependencies here; they belong&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// in the individual module build.gradle files&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;allprojects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;内容主要包含了两个方面：一个是声明仓库的源，我这里用的是mavenCentral(), jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优。另一个是声明了android gradle plugin的版本，android studio 1.1正式版必须要求支持gradle plugin 1.1的版本。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2.app文件夹下这个Module的gradle配置文件，也可以算是整个项目最主要的gradle配置文件&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;com.android.application&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;com.android.tools.build:gradle:1.1.0&#39;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buildToolsVersion&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;21.1.2&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;defaultConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;applicationId&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.lippi.recorder&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;targetSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;versionCode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;versionName&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1.4&#39;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// dex突破65535的限制&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;multiDexEnabled&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// AndroidManifest.xml 里面UMENG_CHANNEL的value为 ${UMENG_CHANNEL_VALUE}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;manifestPlaceholders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;UMENG_CHANNEL_VALUE:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;channel_name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;manifest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcFile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;src/main/AndroidManifest.xml&#39;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcDirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/main/java&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcDirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/main/resources&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;aidl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcDirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/main/aidl&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;renderscript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcDirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/maom&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcDirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/main/res&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcDirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;src/main/assets&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;jniLibs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcDir&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;src/main/jniLibs&#39;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Move the tests to tests/java, tests/res, etc...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;instrumentTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRoot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;tests&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Move the build types to build-types/&amp;lt;type&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This moves them out of them default location under src/&amp;lt;type&amp;gt;/... which would&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// conflict with src/ being used by the main source set.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Adding new build types or product flavors should be accompanied&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// by a similar customization.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRoot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;build-types/debug&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRoot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;build-types/release&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lintOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;abortOnError&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//签名&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signingConfigs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;storeFile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/lippi/.android/debug.keystore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;relealse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//这样写就得把demo.jk文件放在项目目录&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;storeFile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;recorder.jks&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;storePassword&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;recorder&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;keyAlias&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;recorder&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;keyPassword&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;recorder&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;buildTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 显示Log&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buildConfigField&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;boolean&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;LOG_DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;versionNameSuffix&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-debug&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;minifyEnabled&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;zipAlignEnabled&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;shrinkResources&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;signingConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signingConfigs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;release&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 不显示Log&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buildConfigField&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;boolean&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;LOG_DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;false&quot;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//混淆&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;minifyEnabled&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//Zipalign优化&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;zipAlignEnabled&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 移除无用的resource文件&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;shrinkResources&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;proguardFiles&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDefaultProguardFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;proguard-android.txt&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;proguard.cfg&#39;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//签名&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;signingConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signingConfigs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;relealse&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//渠道Flavors，配置不同风格的app&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;productFlavors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GooglePlay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;xiaomi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;umeng&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_360&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;baidu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wandoujia&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//批量配置&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;productFlavors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flavor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flavor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;manifestPlaceholders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;UMENG_CHANNEL_VALUE:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;compileOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sourceCompatibility&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavaVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_1_7&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;targetCompatibility&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavaVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_1_7&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;applicationVariants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;variant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputFile&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.apk&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.apk&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-${defaultConfig.versionName}.apk&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fileTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;include:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;*.jar&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;dir:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;libs&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;org.apache.commons:commons-math:2.1&#39;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;org.slf4j:slf4j-log4j12:1.7.5&#39;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;文件开头apply plugin是最新gradle版本的写法，以前的写法是apply plugin: ‘android’, 如果还是以前的写法，请改正过来。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;buildToolsVersion这个需要你本地安装该版本才行，很多人导入新的第三方库，失败的原因之一是build version的版本不对，这个可以手动更改成你本地已有的版本或者打开 SDK Manager 去下载对应版本。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;applicationId代表应用的包名，也是最新的写法，这里就不在多说了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;android 5.0开始默认安装jdk1.7才能编译&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;minifyEnabled（混淆）也是最新的语法，很早之前是runProguard,这个也需要更新下。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;proguardFiles这部分有两段，前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，免去了我们很多事，这个文件的目录在 &lt;strong&gt;/tools/proguard/proguard-android.txt&lt;/strong&gt; , 后一部分是我们项目里的自定义的混淆文件，目录就在 &lt;strong&gt;app/proguard-rules.txt&lt;/strong&gt; , 如果你用Studio 1.0创建的新项目默认生成的文件名是 &lt;strong&gt;proguard-rules.pro&lt;/strong&gt; , 这个名字没关系，在这个文件里你可以声明一些第三方依赖的一些混淆规则,后面会具体讲到。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;compile project(‘:extras:ShimmerAndroid’)这一行是因为项目中存在其他Module，你可以理解成Android Library，由于Gradle的普及以及远程仓库的完善，这种依赖渐渐的会变得非常不常见，但是你需要知道有这种依赖的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;3.gradle目录下有个 wrapper 文件夹，里面可以看到有两个文件，我们主要看下 gradle-wrapper.properties 这个文件的内容：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt; 
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dec&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CST&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2014&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;distributionBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GRADLE_USER_HOME&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;distributionPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dists&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;zipStoreBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GRADLE_USER_HOME&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;zipStorePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dists&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;distributionUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//services.gradle.org/distributions/gradle-2.2.1-all.zip&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;可以看到里面声明了gradle的目录与下载路径以及当前项目使用的gradle版本，这些默认的路径我们一般不会更改的，这个文件里指明的gradle版本不对也是很多导包不成功的原因之一&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;4.settings.gradle&lt;/p&gt;

&lt;p&gt;这个文件是全局的项目配置文件，里面主要声明一些需要加入gradle的module&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include &#39;:recorder&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;文件中recorder是项目的module，如果还有其他module按照相同的格式加上去。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;##Gradle多渠道打包&lt;/p&gt;

&lt;p&gt;由于国内Android市场众多渠道，为了统计每个渠道的下载及其它数据统计，就需要我们针对每个渠道单独打包，如果让你打几十个市场的包岂不烦死了，不过有了Gradle，这再也不是事了。
以友盟统计为例，在AndroidManifest.xml里面会有这么一段：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UMENG_CHANNEL&quot;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Channel_ID&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;里面的Channel_ID就是渠道标示。我们的目标就是在编译的时候这个值能够自动变化。
*   第一步 在AndroidManifest.xml里配置PlaceHolder&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UMENG_CHANNEL&quot;&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${UMENG_CHANNEL_VALUE}&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;第二步 在build.gradle  设置productFlavors&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;productFlavors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xiaomi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_360&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baidu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wandoujia&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

&lt;span class=&quot;n&quot;&gt;productFlavors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;flavor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flavor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;manifestPlaceholders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;UMENG_CHANNEL_VALUE:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后直接执行&lt;code class=&quot;highlighter-rouge&quot;&gt; ./gradlew assembleRelease &lt;/code&gt;然后就等待打包完成吧。&lt;/p&gt;

&lt;p&gt;assemble 这个命令，会结合 Build Type 创建自己的task，如:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;./gradlew assembleDebug&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;./gradlew assembleRelease&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除此之外 assemble 还能和 Product Flavor 结合创建新的任务，其实 assemble 是和 Build Variants 一起结合使用的，而 Build Variants = Build Type + Product Flavor ， 举个例子大家就明白了：&lt;/p&gt;

&lt;p&gt;如果我们想打包wandoujia渠道的release版本，执行如下命令就好了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew assembleWandoujiaRelease
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果我们只打wandoujia渠道版本，则：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew assembleWandoujia
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此命令会生成wandoujia渠道的Release和Debug版本&lt;/p&gt;

&lt;p&gt;同理我想打全部Release版本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew assembleRelease
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这条命令会把Product Flavor下的所有渠道的Release版本都打出来。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;##代码混淆&lt;/p&gt;

&lt;p&gt;下面是常见的的proguard.cfg配置项：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    #指定代码的压缩级别
    -optimizationpasses 5
    
    #包明不混合大小写
    -dontusemixedcaseclassnames
    
    #不去忽略非公共的库类
    -dontskipnonpubliclibraryclasses
    
     #优化  不优化输入的类文件
    -dontoptimize
    
     #预校验
    -dontpreverify
    
     #混淆时是否记录日志
    -verbose
    
     # 混淆时所采用的算法
    -optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
    
    #保护注解
    -keepattributes *Annotation*
    
    # 保持哪些类不被混淆
    -keep public class * extends android.app.Fragment
    -keep public class * extends android.app.Activity
    -keep public class * extends android.app.Application
    -keep public class * extends android.app.Service
    -keep public class * extends android.content.BroadcastReceiver
    -keep public class * extends android.content.ContentProvider
    -keep public class * extends android.app.backup.BackupAgentHelper
    -keep public class * extends android.preference.Preference
    -keep public class com.android.vending.licensing.ILicensingService
    #如果有引用v4包可以添加下面这行
    -keep public class * extends android.support.v4.app.Fragment
    
    
    
    #忽略警告
    -ignorewarning
    
    ##记录生成的日志数据,gradle build时在本项目根目录输出##
    
    #apk 包内所有 class 的内部结构
    -dump class_files.txt
    #未混淆的类和成员
    -printseeds seeds.txt
    #列出从 apk 中删除的代码
    -printusage unused.txt
    #混淆前后的映射
    -printmapping mapping.txt
    
    ########记录生成的日志数据，gradle build时 在本项目根目录输出-end######
    
    
    #####混淆保护自己项目的部分代码以及引用的第三方jar包library#######
    
    #-libraryjars libs/umeng-analytics-v5.2.4.jar
    
    #三星应用市场需要添加:sdk-v1.0.0.jar,look-v1.0.1.jar
    #-libraryjars libs/sdk-v1.0.0.jar
    #-libraryjars libs/look-v1.0.1.jar
    
    #如果不想混淆 keep 掉
    -keep class com.lippi.recorder.iirfilterdesigner.** {*; }
    #友盟
    -keep class com.umeng.**{*;}
    #项目特殊处理代码
    
    #忽略警告
    -dontwarn com.lippi.recorder.utils**
    #保留一个完整的包
    -keep class com.lippi.recorder.utils.** {
        *;
     }
    
    -keep class  com.lippi.recorder.utils.AudioRecorder{*;}
    
    
    #如果引用了v4或者v7包
    -dontwarn android.support.**
    
    ####混淆保护自己项目的部分代码以及引用的第三方jar包library-end####
    
    -keep public class * extends android.view.View {
        public &amp;lt;init&amp;gt;(android.content.Context);
        public &amp;lt;init&amp;gt;(android.content.Context, android.util.AttributeSet);
        public &amp;lt;init&amp;gt;(android.content.Context, android.util.AttributeSet, int);
        public void set*(...);
    }
    
    #保持 native 方法不被混淆
    -keepclasseswithmembernames class * {
        native &amp;lt;methods&amp;gt;;
    }
    
    #保持自定义控件类不被混淆
    -keepclasseswithmembers class * {
        public &amp;lt;init&amp;gt;(android.content.Context, android.util.AttributeSet);
    }
    
    #保持自定义控件类不被混淆
    -keepclassmembers class * extends android.app.Activity {
       public void *(android.view.View);
    }
    
    #保持 Parcelable 不被混淆
    -keep class * implements android.os.Parcelable {
      public static final android.os.Parcelable$Creator *;
    }
    
    #保持 Serializable 不被混淆
    -keepnames class * implements java.io.Serializable
    
    #保持 Serializable 不被混淆并且enum 类也不被混淆
    -keepclassmembers class * implements java.io.Serializable {
        static final long serialVersionUID;
        private static final java.io.ObjectStreamField[] serialPersistentFields;
        !static !transient &amp;lt;fields&amp;gt;;
        !private &amp;lt;fields&amp;gt;;
        !private &amp;lt;methods&amp;gt;;
        private void writeObject(java.io.ObjectOutputStream);
        private void readObject(java.io.ObjectInputStream);
        java.lang.Object writeReplace();
        java.lang.Object readResolve();
    }
    
    #保持枚举 enum 类不被混淆 如果混淆报错，建议直接使用上面的 -keepclassmembers class * implements java.io.Serializable即可
    #-keepclassmembers enum * {
    #  public static **[] values();
    #  public static ** valueOf(java.lang.String);
    #}
    
    -keepclassmembers class * {
        public void *ButtonClicked(android.view.View);
    }
    
    #不混淆资源类
    -keepclassmembers class **.R$* {
        public static &amp;lt;fields&amp;gt;;
    }
    
    #避免混淆泛型 如果混淆报错建议关掉
    #–keepattributes Signature
    
    #移除log 测试了下没有用还是建议自己定义一个开关控制是否输出日志
    #-assumenosideeffects class android.util.Log {
    #    public static boolean isLoggable(java.lang.String, int);
    #    public static int v(...);
    #    public static int i(...);
    #    public static int w(...);
    #    public static int d(...);
    #    public static int e(...);
    #}
    
    #如果用用到Gson解析包的，直接添加下面这几行就能成功混淆，不然会报错。
    #gson
    #-libraryjars libs/gson-2.2.2.jar
    -keepattributes Signature
    # Gson specific classes
    -keep class sun.misc.Unsafe { *; }
    # Application classes that will be serialized/deserialized over Gson
    -keep class com.google.gson.examples.android.model.** { *; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;参考文献：&lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/tips&quot;&gt;Android Tools Project Site&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>在Ubuntu下安装和编译LaTex</title>
   <link href="http://http://coolshell.info/blog/2015/03/install-texlive-in-ubuntu.html"/>
   <updated>2015-03-15T00:00:00+00:00</updated>
   <id>/blog/2015/03/install-texlive-in-ubuntu</id>
   <content type="html">
&lt;p&gt;&lt;strong&gt;LaTex简介?&lt;/strong&gt;
&lt;p&gt;1、LaTeX 是由美国计算机学家Lamport博士于1985年开发成功的。&lt;/p&gt;
&lt;p&gt;2、它是当今世界上最流行和使用最为广泛,
以 TeX 为引擎的高质量格式化排版系统。&lt;/p&gt;
&lt;p&gt;3、它构筑在 TeX 的基础之上,并且加进了很多新功能,
使得使用者可以更为方便的利用 TeX 的强大功能。
即使使用者并不是很了解 TeX,也可以在很短的时间内制成高质量的文件。&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;LaTex有很多发行版，Linux下的发行版为TexLive，本文安装环境为 Ubuntu 14.04.1 64 位系统，软件版本为 TeXLive 2014，更详细的教程请看官方 &lt;a href=&quot;http://tug.org/texlive/doc/texlive-zh-cn/texlive-zh-cn.pdf&quot;&gt;TeXLive 指南&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;安装前准备&lt;/h2&gt;

&lt;h4&gt;下载 TeXLive 2014 镜像文件&lt;/h4&gt;

&lt;p&gt;下载地址：&lt;a href=&quot;http://www.ctan.org/tex-archive/systems/texlive/Images&quot;&gt;TeXLive 2014&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐厦门大学开源软件镜像，下载速度很可观:
         &lt;a href=&quot;http://mirrors.xmu.edu.cn/CTAN/systems/texlive/Images/&quot;&gt;TEXLive&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;删除旧版&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get purge tex-common
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;安装 Perl::TK 模块&lt;/h4&gt;

&lt;p&gt;install-tl 是一个 Perl 脚本，要在专家 GUI 模式下安装，需要加入 XFT 支持的 Perl::TK 模块，可用以下方法添加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install perl-tk
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;安装主程序&lt;/h2&gt;

&lt;h4&gt;挂载 iso 镜像文件&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mount -o loop path_to.iso /mnt
$ cd /mnt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;启动安装程序&lt;/h3&gt;

&lt;p&gt;在加入了 XFT 支持的 Perl::TK 模块后，可以用以下方法启动专家 GUI 模式进行安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo ./install-tl -gui
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在图形界面中将 &lt;code&gt;Create symlinks in system directories&lt;/code&gt; 选项更改为 &lt;code&gt;Yes&lt;/code&gt;，点击 &lt;code&gt;Install TeX Live&lt;/code&gt; 开始安装。&lt;/p&gt;

&lt;h2&gt;配置环境变量&lt;/h2&gt;

&lt;p&gt;可根据安装结束时的文本提示进行相应的环境变量配置，我在安装时进行了如下配置。&lt;/p&gt;

&lt;p&gt;在 ～/.bashrc 和 ～/.profile 文件结尾添加如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 自己为texlive配置的环境变量
PATH=/usr/local/texlive/2014/bin/x86_64-linux:$PATH; export PATH
MANPATH=/usr/local/texlive/2014/texmf-dist/doc/man:$MANPATH; export MANPATH
INFOPATH=/usr/local/texlive/2014/texmf-dist/doc/info:$INFOPATH; export INFOPATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了配置全局的环境变量，可在 /etc/manpath.config 文件的 &lt;em&gt;# set up PATH to MANPATH mapping.&lt;/em&gt; 下添加:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MANPATH_MAP /usr/local/texlive/2014/bin/x86_64-linux /usr/local/texlive/2014/texmf-dist/doc/man
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后注销即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;如果环境变量配置出错导致无法登录，可以参见最下面的Linux配置环境变量后无法登录的解决方案&amp;lt;/a&amp;gt;&lt;/p&gt;

&lt;h2&gt;测试安装是否成功&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先确认你可以执行 tex 程序:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;  tex --version&lt;br /&gt;
    TeX 3.14159265 (TeX Live ...)&lt;br /&gt;
    Copyright ... D.E. Knuth.&lt;br /&gt;
    ...&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你安装了 xetex 包,可以按如下步骤测试它能否访问系统字体（会生成文件，可在无用目录下执行）:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;  xetex opentype-info.tex&lt;br /&gt;
    This is XeTeX, Version 3.14...&lt;br /&gt;
    ...&lt;br /&gt;
    Output written on opentype-info.pdf (1 page).&lt;br /&gt;
    Transcript written on opentype-info.log.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;如果你收到 “Invalid fontname ‘Latin Modern Roman/ICU’...” 这样的错误信息,就说明需要配置系统才能找到 TEX Live 自带的字体。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;XeTEX 和 LuaTEX 的系统字体配置&lt;/p&gt;

&lt;p&gt;XeTEX 和 LuaTEX 可以使用任何系统安装的字体,而不只是 TEX 目录树中的那些。它们使用类似但不完全一致的方式实现这一功能。&lt;/p&gt;

&lt;p&gt;在 Windows 下 TEX Live 提供的字体会自动为 XeTEX 所用。但如果你在 Unix 兼容的系统中安装了 xetex 软件包,则需要把系统配置一番 XeTEX 才能找到随 TEX Live 安装的那些字体。&lt;/p&gt;

&lt;p&gt;要在整个系统中使用 TEX Live 的字体 (假定你有足够的权限),请依照下面的步骤来做:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将 texlive-fontconfig.conf 文件复制到 /etc/fonts/conf.d/09-texlive.conf。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ sudo cp /usr/local/texlive/2014/texmf-var/fonts/conf/texlive-fontconfig.conf /etc/fonts/conf.d/09-texlive.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行 fc-cache -fsv。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;如果你没有足够的权限执行上述操作,或者只需要把 TEX Live 字体提供给你自己,可以这么做:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将 texlive-fontconfig.conf 文件复制到 ~/.fonts.conf,其中 ~ 是你的主目录。&lt;/li&gt;
&lt;li&gt;运行 fc-cache -fv。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;此时执行第2步，问题已经解决。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;中文字体安装与配置&lt;/h2&gt;

&lt;h4&gt;中文字体安装&lt;/h4&gt;

&lt;p&gt;先写一个简单的测试 tex 文件。起名为 test.tex&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\documentclass[UTF8]{ctexart}
\begin{document}
我爱中国！
\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后执行如下命令编译&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xelatex test.tex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;系统会报错，大致信息如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;! fontspec error: &quot;font-not-found&quot;

! The font &quot;SimSun&quot; cannot be found.
! See the fontspec documentation for further information.
 
! For immediate help type H 
!...............................................
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面就要解决这个问题，错误里说了，&quot;font-not-found&quot;!&lt;/p&gt;

&lt;p&gt;首先创建字体文件夹&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /usr/share/fonts/winfonts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后把 Windows 下的六种中意字体复制到该文件夹，比如从Windows的C:/Windows/Fonts下拷贝最常使用的几种字体：
msyh.ttf（微软雅黑）  simfang.ttf（仿宋）  simhei.ttf（黑体）  simkai.ttf（楷体）  simsun.ttc（宋体）,并更改字体权限&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chmod 644 /usr/share/fonts/winfonts/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;刷新字体库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkfontscale
$ sudo mkfontdir
$ sudo fc-cache -fsv
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;xeLaTeX 中文字体配置&lt;/h4&gt;

&lt;p&gt;如果使用 xeLaTeX 的话，需要 xeCJK 宏包的支持，需要修改 /usr/local/texlive/2014/texmf-dist/tex/latex/ctex/fontset 下的 ctex-xecjk-winfonts.def 文件。&lt;/p&gt;

&lt;p&gt;下面，打开新的终端，执行如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ fc-list :lang=zh-cn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出大约如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSimSun,新宋体:style=Regular  
KaiTi,楷             体:style=Regular,Normal,obyčejné,Standard,Κανονικά,Normaali,Normál,Normale,Standaard,Normalny,Обычный,Normálne,Navadno,Arrunta  
SimSun,宋体:style=RegularUnibit:style=Regular   WenQuanYi Zen Hei,文泉驛正黑,文泉驿正黑:style=Regular  
......
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面需要做的就是将 ctex-xecjk-winfonts.def 中的字体名字改成上面四行的行首的内容，注意，要将原文件中的 [SIMKAI.TTF] 中括号同时删去。&lt;/p&gt;

&lt;p&gt;重新编译以下，发现成功了。&lt;/p&gt;

&lt;p&gt;另外，若想添加 Adobe 字体，设置方法与 Windows 字体大致相同，此处不再赘述。&lt;/p&gt;

&lt;h4&gt;pdfLaTeX 中文字体配置&lt;/h4&gt;

&lt;p&gt;在上边添加了 Windows 字体的基础之上可以为 pdfLaTeX 添加中文字体支持&lt;/p&gt;

&lt;p&gt;在 /usr/local/texlive/2014/texmf.cnf 文件中设置 OSFONTDIR 变量，即添加如下信息：
    自己为pdflatex设置的OSFONTDIR变量指向中文字体文件
    OSFONTDIR=/usr/share/fonts/winfonts

	&lt;h4&gt;论文中正常显示中文&lt;/h4&gt;

新建一个.tex文件，在文件里面添加下面两句就能正常显示中文了：
	\usepackage{xeCJK}
	\setCJKmainfont{STSong}
	
&lt;h2&gt;LaTeX 学习文档下载：&lt;/h2&gt;
[http://download.csdn.net/detail/longerzone/4703133](http://download.csdn.net/detail/longerzone/4703133)

&lt;h2&gt;Linux 配置环境变量后无法登录的解决方案&lt;/h2&gt;
&lt;section&gt;
&lt;h2&gt;Linux 的环境变量读取机制&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;在登陆时，操作系统定制用户环境时读取的第一个文件是 /etc/profile，此文件为系统的每个用户设置环境信息，当用户第一次登陆时，该文件被执行。&lt;/li&gt;
&lt;li&gt;在登陆时操作系统读取的第二个文件是 /etc/environment，系统在读取用户自己的 profile 前，设置环境文件的环境变量。&lt;/li&gt;
&lt;li&gt;在登陆时用到的第三个文件是 ～/.profile 文件，每个用户都可使用该文件输入专用于自己使用的 shell 信息，该文件仅仅执行一次。默认情况下，它设置一些环境变量，执行用户的 .bashrc 文件。/etc/bashrc 为每一个运行 bash shell 的用户执行此文件，当 bash shell 被打开时，该文件被读取。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;无法登录的原因&lt;/h2&gt;

&lt;p&gt;由上可知，系统启动时会先读取 /etc/profile，然后读取 /etc/environment，最后才是 ～/.profile 文件，而在 /etc/environment 中也设置有环境变量 PATH，如果你在 ~/.profile 中也设置了环境变量 PATH，那么就会覆盖原来的 /etc/environment 中设置的环境变量 PATH。&lt;/p&gt;

&lt;p&gt;因此，～/.profile 文件中的环境变量设置一定不可大意，且在其设置的环境变量中要重新载入之前的环境变量，即添加 $PATH，且以冒号分割。&lt;/p&gt;

&lt;p&gt;比如以我安装的 TeXLive 为例，正确的环境变量设置应该为:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATH=/usr/local/texlive/2014/bin/x86_64-linux:$PATH; export PATH
MANPATH=/usr/local/texlive/2014/texmf-dist/doc/man:$MANPATH; export MANPATH
INFOPATH=/usr/local/texlive/2014/texmf-dist/doc/info:$INFOPATH; export INFOPATH
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解决方法一&lt;/h2&gt;

&lt;p&gt;在登录界面可以通过 &lt;code&gt;Ctrl + Alt + F1～F6&lt;/code&gt; 的方式进入命令行，再通过 &lt;code&gt;Ctrl + Alt + F7&lt;/code&gt; 的方式进入图形界面。&lt;/p&gt;

&lt;p&gt;因此我们可以进入图形界面登录 root 账户，将之前修改的环境变量删除或者更正即可。&lt;/p&gt;

&lt;p&gt;注意事项：我们在登录不同的账户时，&lt;strong&gt;～&lt;/strong&gt; 所对应的目录是不同的，例如 John 用户对应 /home/John/，而 root 用户对应 /root/，因此在以 root 用户登陆时，一定要注意环境变量文件的路径。&lt;/p&gt;

&lt;h2&gt;解决方法二&lt;/h2&gt;

&lt;p&gt;若命令行下打开文件乱码，可考虑新建用户并登录，然后以 root 权限修改之前用户的配置文件，关于如何新建用户此处不再赘述。&lt;/p&gt;
 
  
&lt;/section&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>利用github-pages建立个人博客</title>
   <link href="http://http://coolshell.info/blog/2015/03/github-pages-blog.html"/>
   <updated>2015-03-01T00:00:00+00:00</updated>
   <id>/blog/2015/03/github-pages-blog</id>
   <content type="html">
&lt;p&gt;##前言&lt;/p&gt;

&lt;p&gt;Github很好的将代码和社区联系在了一起，于是发生了很多有趣的事情，世界也因为他美好了一点点。Github作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如jQuery、Twitter等。为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，Github替你想到了这一点，他提供了Github Pages的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。&lt;/p&gt;

&lt;p&gt;Github Pages有以下几个优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;轻量级的博客系统，没有麻烦的配置&lt;/li&gt;
  &lt;li&gt;使用标记语言，比如Markdown 无需自己搭建服务器&lt;/li&gt;
  &lt;li&gt;根据Github的限制，对应的每个站有300MB空间&lt;/li&gt;
  &lt;li&gt;可以绑定自己的域名&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然他也有缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用Jekyll模板系统，相当于静态页发布，适合博客，文档介绍等。&lt;/li&gt;
  &lt;li&gt;动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。&lt;/li&gt;
  &lt;li&gt;基于Git，很多东西需要动手，不像Wordpress有强大的后台&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以Github Pages是我认为此需求最完美的解决方案了。&lt;/p&gt;

&lt;p&gt;##购买、绑定独立域名&lt;/p&gt;

&lt;p&gt;虽说Godaddy曾支持过SOPA，并且首页放着极其不专业的大胸美女，但是作为域名服务商他做的还不赖，选择它最重要的原因是他支持支付宝，没有信用卡有时真的很难过。&lt;/p&gt;

&lt;p&gt;域名的购买不用多讲，注册、选域名、支付，有网购经验的都毫无压力，优惠码也遍地皆是。域名的配置需要提醒一下，因为伟大英明的GFW的存在，我们必须多做些事情。&lt;/p&gt;

&lt;p&gt;流传Godaddy的域名解析服务器被墙掉，导致域名无法访问，后来这个事情在BeiYuu也发生了，不得已需要把域名解析服务迁移到国内比较稳定的服务商处，这个迁移对于域名来说没有什么风险，最终的控制权还是在Godaddy那里，你随时都可以改回去。&lt;/p&gt;

&lt;p&gt;我们选择DNSPod的服务，他们的产品做得不错，易用、免费，收费版有更高端的功能，暂不需要。注册登录之后，按照DNSPod的说法，只需三步（我们插入一步）：&lt;/p&gt;

&lt;p&gt;首先添加域名记录，可参考DNSPod的帮助文档：&lt;a href=&quot;https://www.dnspod.cn/Support&quot;&gt;https://www.dnspod.cn/Support&lt;/a&gt;
在DNSPod自己的域名下添加一条A记录，地址就是Github Pages的服务IP地址：&lt;code class=&quot;highlighter-rouge&quot;&gt;192.30.252.153&lt;/code&gt;
在域名注册商处修改DNS服务:去Godaddy修改Nameservers为这两个地址： &lt;code class=&quot;highlighter-rouge&quot;&gt;f1g1ns1.dnspod.net、f1g1ns2.dnspod.net&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;##配置和使用Github&lt;/p&gt;

&lt;p&gt;git是版本管理的未来，他的优点我不再赘述，相关资料很多。推荐这本&lt;a href=&quot;http://git-scm.com/book/zh&quot;&gt;Git中文教程&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;要使用Git，需要安装它的客户端，推荐在Linux下使用Git，会比较方便。下载地址在这里：&lt;a href=&quot;http://code.google.com/p/msysgit/downloads/list&quot;&gt;http://code.google.com/p/msysgit/downloads/lis
&lt;/a&gt;。其他系统的安装也可以参考官方的安装教程。&lt;/p&gt;

&lt;p&gt;安装完成后，还需要最后一步设置，在命令行输入：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global user.name &quot;Your Name&quot;
$ git config --global user.email &quot;email@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###检查SSH keys的设置&lt;/p&gt;

&lt;p&gt;首先我们需要检查你电脑上现有的ssh key：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~/.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ssh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果显示“No such file or directory”，跳到第三步，否则继续。&lt;/p&gt;

&lt;p&gt;###备份和移除原来的ssh key设置&lt;/p&gt;

&lt;p&gt;因为已经存在key文件，所以需要备份旧的数据并删除：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ls
config  id_rsa  id_rsa.pub  known_hosts
mkdir key_backup
cp id_rsa&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; key_backup
rm id_rsa&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###生成新的SSH Key&lt;/p&gt;

&lt;p&gt;输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh-keygen -t rsa -C &lt;span class=&quot;s2&quot;&gt;&quot;邮件地址@youremail.com&quot;&lt;/span&gt;
Generating public/private rsa key pair.
Enter file &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/	your_user_directory/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&amp;lt;回车就好&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后系统会要你输入加密串（Passphrase）：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&amp;lt;输入加密串&amp;gt;
Enter same passphrase again:&amp;lt;再次输入加密串&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后看到ssh key success，就成功设置ssh key了.&lt;/p&gt;

&lt;p&gt;###添加SSH Key到GitHub&lt;/p&gt;

&lt;p&gt;在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。&lt;/p&gt;

&lt;p&gt;用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。&lt;/p&gt;

&lt;p&gt;在GitHub的主页上点击设置按钮： github account setting&lt;/p&gt;

&lt;p&gt;选择SSH Keys项，把复制的内容粘贴进去，然后点击Add Key按钮即可： 
&lt;img src=&quot;/images/images/githubpages/bootcamp_1_ssh.jpg&quot; alt=&quot;set ssh keys&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PS：如果需要配置多个GitHub账号，可以参看这个&lt;a href=&quot;http://ju.outofmemory.cn/entry/16775&quot;&gt;多个github帐号的SSH key切换&lt;/a&gt;，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global --unset user.email&lt;/code&gt;删除用户账户设置，在每一个repo下面使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --local user.email &#39;你的github邮箱@mail.com&#39; &lt;/code&gt;命令单独设置用户账户信息&lt;/p&gt;

&lt;p&gt;###测试一下&lt;/p&gt;

&lt;p&gt;可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh -T git@github.com

    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果是下面的反应：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不要紧张，输入yes就好，然后会看到：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hi &amp;lt;em&amp;gt;username&amp;lt;/em&amp;gt;! You&#39;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###设置你的账号信息&lt;/p&gt;

&lt;p&gt;现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。&lt;/p&gt;

&lt;p&gt;Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git config --global user.name &lt;span class=&quot;s2&quot;&gt;&quot;你的名字&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git config --global user.email &lt;span class=&quot;s2&quot;&gt;&quot;your_email@youremail.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;好了，你已经可以成功连接GitHub了。&lt;/p&gt;

&lt;p&gt;##快速开始&lt;/p&gt;

&lt;p&gt;###帐号注册&lt;/p&gt;

&lt;p&gt;在创建博客之前，当然必须有GitHub的帐号，该帐号将用来创建项目，默认的域名&lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.com/projectName&lt;/code&gt;中的username也要用到这个帐号。&lt;/p&gt;

&lt;p&gt;注意：下面涉及到的一些命令凡是更用户名和项目名有关的一律会用这里的username和projectName代替，注意替换
访问：&lt;a href=&quot;http://www.github.com/&quot;&gt;http://www.github.com/ &lt;/a&gt;sign up for free的意思就是“免费注册登录”，注册你的username和邮箱，邮箱十分重要，GitHub上很多通知都是通过邮箱的。比如你的主页上传并构建成功会通过邮箱通知，更重要的是，如果构建失败的话也会在邮件中说明原因。&lt;/p&gt;

&lt;p&gt;###创建项目仓库&lt;/p&gt;

&lt;p&gt;在创建博客之前，还需要用已有的帐号创建一个项目，上面那个链接的projectName将是这里即将创建的项目名称。在Git中，项目被称为仓库(Repository)，仓库顾名思义，当然可以包含代码或者非代码。将来我们的网页或者模板实际上都是保存在这个仓库中的。&lt;/p&gt;

&lt;p&gt;登录后，访问&lt;a href=&quot;https://github.com/new&quot;&gt;https://github.com/new&lt;/a&gt;，创建仓库如下图：
&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-02-img0.png&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建了仓库后，我们就需要管理它，无论是管理本地仓库还是远程仓库都需要Git客户端。Git客户端实际上十分强大，它本身就可以offline的创建本地仓库，而本地仓库和远程仓库之间的同步也是通过Git客户端完成的。&lt;/p&gt;

&lt;p&gt;这里省略了windows下安装和使用Git客户端的基本技巧，您应该已经掌握此技能了。虽然，您仍然可以按照本教程的指引完成一个简单的网站，但是后期的维护工作无论如何都不能少了这项技能。&lt;/p&gt;

&lt;p&gt;下面的步骤假设您已经安装好了Git客户端，安装和使用技巧请参见：Git学习资源&lt;/p&gt;

&lt;p&gt;###本地编辑及上传&lt;/p&gt;

&lt;p&gt;在磁盘上创建一个目录，该目录与上面的项目名同名，在该目录下启用Git Bash命令行，并输入如下命令&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$git&lt;/span&gt; init

    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;该命令实际上是在该目录下初始化一个本地的仓库，会在目录下新建一个.git的隐藏文件夹，可以看成是一个仓库数据库。&lt;/p&gt;

&lt;p&gt;创建一个没有父节点的分支gh-pages，并自动切换到这个分支上。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$git&lt;/span&gt; checkout --orphan gh-pages

    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在Git中，分支(branch)的概念非常重要，Git之所以强大，很大程度上就是因为它强大的分支体系。这里的分支名字必须是gh-pages，因为github规定，只有该分支中的页面，才会生成网页文件。&lt;/p&gt;

&lt;p&gt;在该目录下手动创建如下文件和文件夹，最终形成这样的结构：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-02-img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;_includes：默认的在模板中可以引用的文件的位置，后面会提到&lt;/li&gt;
  &lt;li&gt;_layouts：默认的公共页面的位置，后面会提到&lt;/li&gt;
  &lt;li&gt;_posts：博客文章默认的存放位置&lt;/li&gt;
  &lt;li&gt;.gitignore：git将忽略这个文件中列出的匹配的文件或文件夹，不将这些纳入源码管理&lt;/li&gt;
  &lt;li&gt;_config.yml：关于jekyll模板引擎的配置文件&lt;/li&gt;
  &lt;li&gt;index.html：默认的主页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在_layouts目录下创建一个default.html，在其中输入如下内容，注意：文件本身要以UTF-8 without BOM的格式保存，以防止各种编码问题，建议使用notepad++或者VIM编辑&lt;/p&gt;

&lt;p&gt;default.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
　&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content-type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=utf-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
　&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;一步步在GitHub上创建博客主页(2)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
　
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;编辑index.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: default
title: test title
---
&amp;lt;p&amp;gt;Hello world!&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再次打开Git Bash，先后输入如下命令：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;first post&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git remote add origin https://github.com/username/projectName.git
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git push origin gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;据网友反应，如果是初次安装git的话，在commit的时候会提示需要配置username和email，请读者注意根据提示配置一下，至于username和email可以随便填&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将当前的改动暂存在本地仓库&lt;/li&gt;
  &lt;li&gt;将暂存的改动提交到本地仓库，并写入本次提交的注释是”first post“&lt;/li&gt;
  &lt;li&gt;将远程仓库在本地添加一个引用：origin&lt;/li&gt;
  &lt;li&gt;向origin推送gh-pages分支，该命令将会将本地分支gh-pages推送到github的远程仓库，并在远程仓库创建一个同名的分支。该命令后会提示输入用户名和密码。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在，你只需要稍等半分钟时间，访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://username.github.com/projectName&lt;/code&gt;就可以看到生成的博客了&lt;/p&gt;

&lt;p&gt;另外上面提到的，如果生成失败，Github会向你的邮箱发送一封邮件说明，请注意查收。&lt;/p&gt;

&lt;p&gt;##域名扫盲&lt;/p&gt;

&lt;p&gt;说实话，虽然明白什么是域名以及域名解析的原理，但是在实际的互联网环境中，域名的问题其实比理论上说的要复杂些。这里对一些概念稍作整理。&lt;/p&gt;

&lt;p&gt;###A（Address）记录&lt;/p&gt;

&lt;p&gt;是用来指定主机名（或域名）对应的IP地址记录。用户可以将该域名下的网站服务器指向到自己的web server上。同时也可以设置您域名的二级域名。&lt;/p&gt;

&lt;p&gt;###CNAME&lt;/p&gt;

&lt;p&gt;也被称为规范名字。这种记录允许您将多个名字映射到同一台计算机。 通常用于同时提供WWW和MAIL服务的计算机。例如，有一台计算机名为&lt;code class=&quot;highlighter-rouge&quot;&gt;“host.mydomain.com”&lt;/code&gt;（A记录）。 它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL。 这两个别名的全称就是&lt;code class=&quot;highlighter-rouge&quot;&gt;“www.mydomain.com”&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;“mail.mydomain.com”&lt;/code&gt;。实际上他们都指向&lt;code class=&quot;highlighter-rouge&quot;&gt;“host.mydomain.com”&lt;/code&gt;。 同样的方法可以用于当您拥有多个域名需要指向同一服务器IP，此时您就可以将一个域名做A记录指向服务器IP然后将其他的域名做别名到之前做A记录的域名上，那么当您的服务器IP地址变更时您就可以不必麻烦的一个一个域名更改指向了 只需要更改做A记录的那个域名其他做别名的那些域名的指向也将自动更改到新的IP地址上了。&lt;/p&gt;

&lt;p&gt;###TTL&lt;/p&gt;

&lt;p&gt;TTL值全称是“生存时间（Time To Live)”，简单的说它表示DNS记录在DNS服务器上缓存时间。要理解TTL值，请先看下面的一个例子：
假设，有这样一个域名&lt;code class=&quot;highlighter-rouge&quot;&gt;myhost.cnMonkey.com&lt;/code&gt;（其实，这就是一条DNS记录，通常表示在abc.com域中有一台名为myhost的主机）对应IP地 址为1.1.1.1，它的TTL为10分钟。这个域名或称这条记录存储在一台名为dns.cnMonkey.com的DNS服务器上。
现在有一个用户键入一下地址（又称URL）：&lt;code class=&quot;highlighter-rouge&quot;&gt;http://myhost.cnMonkey.com&lt;/code&gt; 这时会发生什么呢？
该 访问者指定的DNS服务器（或是他的ISP,互联网服务商, 动态分配给他的)8.8.8.8就会试图为他解释myhost.cnMonkey.com，当然8.8.8.8这台DNS服务器由于没有包含 myhost.cnMonkey.com这条信息，因此无法立即解析，但是通过全球DNS的递归查询后，最终定位到dns.cnMonkey.com这台DNS服务器， dns.cnMonkey.com这台DNS服务器将myhost.cnMonkey.com对应的IP地址1.1.1.1告诉8.8.8.8这台DNS服务器，然有再由 8.8.8.8告诉用户结果。8.8.8.8为了以后加快对myhost.cnMonkey.com这条记录的解析，就将刚才的1.1.1.1结果保留一段时间，这 就是TTL时间，在这段时间内如果用户又有对myhost.cnMonkey.com这条记录的解析请求，它就直接告诉用户1.1.1.1，当TTL到期则又会重复 上面的过程。&lt;/p&gt;

&lt;p&gt;###域名分级&lt;/p&gt;

&lt;p&gt;子域名是个相对的概念，是相对父域名来说的。域名有很多级，中间用点分开。例如中国国家顶级域名CN，所有以 CN 结尾的域名便都是它的子域。例如：www.zzy.cn 便是 zzy.cn 的子域，而 zzy.cn 是 cn 的子域。&lt;/p&gt;

&lt;p&gt;“二级域名”：目前有很多用户认为“二级域名”是自己所注册域名的下一级域名，实际上这里所谓的“二级域名”并非真正的“二级”，而应该称为“次级”(相对次级)&lt;/p&gt;

&lt;p&gt;例如您注册的域名是abc.cn来说：CN为顶级域，abc.cn为二级域，www.abc.cn、mail.abc.cn、help.zzy.cn为三级域。&lt;/p&gt;

&lt;p&gt;还有一些特殊的二级域被用来作顶级域使用，例如：com.cn、net.cn、org.cn、gov.cn（包括地区域名bj.cn、fj.cn等）。那么此时用户所注册的就应该是三级域了，例如114.com.cn。（备注：www.gov.cn实际上是以gov.cn为后缀的www域名，就是说如果您在域名Whois信息查询中输入gov.cn是查询不到注册信息的因为gov.cn是作为顶级域来使用的域名后缀，真正开放注册的是www.gov.cn）。然而当前有很多用户还是习惯地将可以允许用户注册的域名称为顶级域名，而所注册域名的下一级域名称为“二级域名”，其实从严格意义上来讲这是不对的，所以我们前面会说“子域名”、“二级域名”是相对的概念，准确的应该称为“次级域名”。&lt;/p&gt;

&lt;p&gt;###域名购买&lt;/p&gt;

&lt;p&gt;众所周知，域名是要购买的，国内用域名访问主机大概是要备案的，有些麻烦。所以现在很多人从国外的域名注册商那儿买域名，比如goddady。如果是新手想在国外买域名的话，最好准备一张VISA信用卡，并用paypal来支付（可以省手续费）。goddady现在也支持支付宝，支付起来也很方便。&lt;/p&gt;

&lt;p&gt;###绑定域名到GitHub-Page&lt;/p&gt;

&lt;p&gt;其实十分简单，假设我们购买了域名&lt;a href=&quot;coolshell.info&quot;&gt;coolshell.info&lt;/a&gt;，想用coolshell.info访问你的站点&lt;code class=&quot;highlighter-rouge&quot;&gt;http://username.github.com/projectname&lt;/code&gt;，你可以参考这个链接：&lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&quot;&gt;Setting up a custom domain with Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在你的域名提供商那边，设置一条A记录：&lt;/p&gt;

&lt;p&gt;colshell.info  204.232.175.78（注意：这个IP难保不会变，所以要及时关注上面这个链接中给出的IP，并及时更新A记录）。下面这个截图是goddady上的A记录配置：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-03-img0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后在你的gh-pages分支的根目录中创建一个CNAME文件，其中只能有一行，就是coolshell.info，用Git客户端上传更改，大约等十几分钟就能生效了。&lt;/p&gt;

&lt;p&gt;可以先ping一下coolshell.info，如果返回的IP地址更配置的A记录一样的话，说明域名已经注册好了，就等GitHub生效了。不过别急，你还需要把_config.yml中的baseurl设置如下&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	baseurl : /
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;或者是&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	baseurl :
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这取决于你的模板如何引用baseurl，总之指向根目录就好了。&lt;/p&gt;

&lt;p&gt;刚开始的时候我比较困惑的是，为什么A记录都指向的是同一个IP，GitHub是如何知道应该返回哪个用户的页面的。其实很简单，秘密就是上面提到的CNAME文件，GitHub应该会缓存所有gh-pages分支中的CNAME文件，用户对域名的请求被定向到GitHub住服务器的IP地址后，再根据用户请求的域名，判断对应哪个gh-pages，而且它会自动带上项目名，所以baseurl需要改为根目录。&lt;/p&gt;

&lt;p&gt;##jekyll的安装&lt;/p&gt;

&lt;p&gt;前几篇介绍了GitHub-Page的基本原理和使用方法，还介绍了如何将购买的域名绑定博客主页。然而，当需要正儿八经的将一个博客构建起来，不仅要知道如何上传我们的文件，还要能够高效的更好的设计博客。因此，必须能够在上传之前在本地完成测试；另一方面，完全靠html来编辑博客，显然工作量太大，随着博客越来越复杂，简直不可能维护，因此，需要用jekyll这个模板引擎来帮忙。本篇先介绍如何搭建一个本地的测试环境。&lt;/p&gt;

&lt;p&gt;###更新&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;根据网友的反应，需要注意的是Ruby的版本和RubyDevKit的版本要对应，不要装错；&lt;/li&gt;
  &lt;li&gt;另外，目前新版的Ruby自带gem了，所以gem安装可以跳过；&lt;/li&gt;
  &lt;li&gt;由于国内的网络（你们懂的），gem官方的源基本上是没法用了，参考文中的链接，使用淘宝的镜像比较靠谱；&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;jekyll有一个问题，可能需要修改下面这个文件，否则会出现GBK错误
&lt;code class=&quot;highlighter-rouge&quot;&gt;D:\Ruby193\lib\ruby\gems\1.9.1\gems\jekyll-1.2.1\lib\jekyll\convertible.rb&lt;/code&gt;
将它改成
&lt;code class=&quot;highlighter-rouge&quot;&gt;self.content = File.read(File.join(base, name),:encoding =&amp;gt; &quot;utf-8&quot;)&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;D:\Ruby193\lib\ruby\gems\1.9.1\gems\jekyll-1.2.1\lib\jekyll\tags\include.rb&lt;/code&gt;中的最后几行的地方改成
&lt;code class=&quot;highlighter-rouge&quot;&gt;File.read_with_options(file,:encoding =&amp;gt; &quot;utf-8&quot;)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;最新的jekyll修改了命令行参数，需使用如下命令行 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve --safe --watch&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;jekyll 1.4.3在windows下本地生成的时候可能会出现&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;fileutils.rb:247:in mkdir Invalid argument&#39;&lt;/code&gt;的错误&lt;/li&gt;
  &lt;li&gt;jekyll 1.4.3在–watch参数的情况下可能会出现&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;cannot load such file -- wdm (LoadError)&#39;&lt;/code&gt;的错误，用gem安装wdm就好了： 	gem install wdm&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###Ruby安装&lt;/p&gt;

&lt;p&gt;jekyll本身基于Ruby开发，因此，想要在本地构建一个测试环境需要具有Ruby的开发和运行环境。在windows下，可以使用Rubyinstaller安装&lt;/p&gt;

&lt;p&gt;ruby安装说明：&lt;a href=&quot;http://www.ruby-lang.org/zh_cn/downloads/&quot;&gt;http://www.ruby-lang.org/zh_cn/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ruby安装下载(windows)：&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;http://rubyinstaller.org/downloads/&lt;/a&gt;
windows的安装还是一如既往的“无脑”，不多说了。&lt;/p&gt;

&lt;p&gt;如果想要快速体验ruby开发，可以参考：&lt;a href=&quot;https://www.ruby-lang.org/zh_cn/documentation/quickstart/&quot;&gt;20分钟体验 Ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###RubyDevKit安装&lt;/p&gt;

&lt;p&gt;从这个页面下载DevKit：&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;http://rubyinstaller.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载下来的是一个很有意思的sfx文件，如果你安装有7-zip吧，可以直接双击，它会自解压到你所选择的目录。&lt;/p&gt;

&lt;p&gt;解压完成之后，用cmd进入到刚才解压的目录下，运行下面命令，该命令会生成config.yml。（这种安装方式让我想起了，linux下安装三步走&lt;code class=&quot;highlighter-rouge&quot;&gt;config-&amp;gt;make-&amp;gt;make install中的config&lt;/code&gt;）&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ruby&lt;/span&gt; dk.rb init
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;config.yml文件实际上是检测系统安装的ruby的位置并记录在这个文件中，以便稍后使用。但上面的命令只针对使用rubyinstall安装的ruby有效，如果是其他方式安装的话，需要手动修改config.yml。我生成的config.yml文件内容如下：（注意路径用的是linux的斜杠方向）&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# This configuration file contains the absolute path locations of all&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# installed Rubies to be enhanced to work with the DevKit. This config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# file is generated by the &#39;ruby dk.rb init&#39; step and may be modified&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# before running the &#39;ruby dk.rb install&#39; step. To include any installed&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Rubies that were not automagically discovered, simply add a line below&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the triple hyphens with the absolute path to the Ruby root directory.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Example:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ---&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - C:/ruby19trunk&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - C:/ruby192dev&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
---
- C:/Ruby193&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后，执行如下命令，执行安装：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ruby&lt;/span&gt; setup.rb
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果没有setup.rb的话，执行：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	&lt;span class=&quot;nv&quot;&gt;$ruby&lt;/span&gt; dk.rb install
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###Rubygems&lt;/p&gt;

&lt;p&gt;Rubygems是类似Radhat的RPM、centOS的Yum、Ubuntu的apt-get的应用程序打包部署解决方案。Rubygems本身基于Ruby开发，在Ruby命令行中执行。我们需要它主要是因为jekyll的执行需要依赖很多Ruby应用程序，如果一个个手动安装比较繁琐。jekyll作为一个Ruby的应用，也实现了Rubygems打包标准。只要通过简单的命令就可以自动下载其依赖。&lt;/p&gt;

&lt;p&gt;gems下载地址：&lt;a href=&quot;http://rubyforge.org/frs/?group_id=126&quot;&gt;http://rubyforge.org/frs/?group_id=126&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解压后，用cmd进入到解压后的目录，执行命令即可：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ruby&lt;/span&gt; setup.rb
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;就像yum仓库一样，仓库本身有很多，如果希望加快应用程序的下载速度，特别绕过“天朝”的网络管理制度，可以选择国内的仓库镜像，taobao有一个：&lt;a href=&quot;http://ruby.taobao.org/&quot;&gt;http://ruby.taobao.org/&lt;/a&gt;。配置方法这个链接里面很完全。&lt;/p&gt;

&lt;p&gt;###安装jekyll&lt;/p&gt;

&lt;p&gt;有了上面的基础，安装jekyll就十分轻松了，在此之前，建议国内用户换成淘宝服务器，速度更快：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem sources --remove http://rubygems.org/
    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem sources -a http://ruby.taobao.org/
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;执行下面gem命令即可全自动搞定：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	&lt;span class=&quot;nv&quot;&gt;$gem&lt;/span&gt; install jekyll
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;jekyll依赖的组件如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;directory_watcher&lt;/li&gt;
  &lt;li&gt;liquid&lt;/li&gt;
  &lt;li&gt;open4&lt;/li&gt;
  &lt;li&gt;maruku&lt;/li&gt;
  &lt;li&gt;classifier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;测试jekyll服务&lt;/p&gt;

&lt;p&gt;安装好之后就可以测试我们的环境了。用cmd进入到上一节我们创建的目录，执行下面命令：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$jekyll&lt;/span&gt; --server --safe
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;jekyll此时会在localhost的4000端口监听http请求，用浏览器访问&lt;a href=&quot;http://localhost:4000/index.html&quot;&gt;http://localhost:4000/index.html&lt;/a&gt;，之前的页面出现了！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;
jekyll最新的动态和文档现在可以在&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyllrb&lt;/a&gt;上找到&lt;/p&gt;

&lt;p&gt;##jekyll介绍&lt;/p&gt;

&lt;p&gt;在前几篇中，多多少少对jekyll有所涉及，在这篇中将带读者进一步了解jekyll以及模板引擎liquid。&lt;/p&gt;

&lt;p&gt;jekyll是一个基于ruby开发的，专用于构建静态网站的程序。它能够将一些动态的组件：模板、liquid代码等构建成静态的页面集合，Github-Page全面引入jekyll作为其构建引擎，这也是学习jekyll的主要动力。同时，除了jekyll引擎本身，它还提供一整套功能，比如web server。我们用jekyll –server启动本地调试就是此项功能。读者可能已经发现，在启动server后，之前我们的项目目录下会多出一个_site目录。jekyll默认将转化的静态页面保存在_site目录下，并以某种方式组织。使用jekyll构建博客是十分适合的，因为其内建的对象就是专门为blog而生的，在后面的逐步介绍中读者会体会到这一点。但是需要强调的是，jekyll并不是博客软件，跟workpress之类的完全两码事，它仅仅是个一次性的模板解析引擎，它不能像动态服务端脚本那样处理请求。&lt;/p&gt;

&lt;p&gt;更多关于jekyll请看&lt;a href=&quot;https://github.com/jekyll/jekyll/wiki/Liquid-Extensions&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###jekyll是如何工作的&lt;/p&gt;

&lt;p&gt;在jekyll解析你的网站结构前，需要确保网站目录像下面那样：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 20011-10-25-open-source-is-good.html
|   |-- 20011-04-26-hello-world.html
|-- _site
|-- index.html
|-- images
   |-- css
       |-- style.css
   |-- javascripts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;_config.yml：保存配置，该配置将影响jekyll构造网站的各种行为。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_includes：该目录下的文件可以用来作为公共的内容被其他文章引用，就跟C语言include头文件的机制完全一样，jekyll在解析时会对&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;file.ext&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;标记扩展成对应的在_includes文件夹中的文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_layouts：该目录下的文件作为主要的模板文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_posts：文章或网页应当放在这个目录中，但需要注意的是，文章的文件名必须是YYYY-MM-DD-title&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_site：上面提到过，这是jekyll默认的转化结果存放的目录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;images：这个目录没有强制的要求，主要目的是存放你的资源文件，图片、样式表、脚本等。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###一个例子&lt;/p&gt;

&lt;p&gt;完成一个例子总是最快的入门方式。&lt;/p&gt;

&lt;p&gt;对于基于静态页面的网站，你显然不希望每篇文章都要写html、head等与文章本身无关的重复的东西，那么容易想到的是将这些东西作为模板提取出来，以便复用，_layouts文件夹中的文件可以作为这样的模板。现在我们在_layouts文件夹中创建一个模板文件，default.html：&lt;/p&gt;

&lt;p&gt;default.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My blog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Blog Post --&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Title --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;post-area post&quot;&gt;

 	&lt;div class=&quot;post-list-body&quot;&gt;
        	&lt;div class=&quot;all-posts&quot; post-cate=&quot;All&quot;&gt;
 		&lt;header&gt;
		&lt;h1&gt;
		  谈谈缓存和基本的缓存算法
		  &lt;div class=&quot;post-date&quot;&gt;&lt;a href=&quot;https://github.com/LippiOuYang/LippiOuYang.github.io/edit/master/_posts/2015-02-04-cache.md&quot; target=&quot;_blank&quot;&gt;纠错&lt;/a&gt;&amp;nbsp;&amp;nbsp;
			&lt;span class=&quot;glyphicon glyphicon-time&quot;&gt;&lt;/span&gt;
			04 Feb 2015
		  &lt;/div&gt;
		&lt;/h1&gt;
 		&lt;/header&gt;
		&lt;!-- Author --&gt;
		&lt;hr /&gt;
		 &lt;article&gt;
		&lt;p&gt;很久很久以前，在还没有缓存的时候……用户经常是去请求一个对象，而这个对象是从数据库去取，然后，这个对象变得越来越大，这个用户每次的请求时间也越来越长了，这也把数据库弄得很痛苦，他无时不刻不在工作。所以，这个事情就把用户和数据库弄得很生气，接着就有可能发生下面两件事情：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用户很烦，在抱怨，甚至不去用这个应用了（这是大多数情况下都会发生的）&lt;/li&gt;
  &lt;li&gt;数据库为打包回家，离开这个应用，然后，就出现了大麻烦（没地方去存储数据了）（发生在极少数情况下）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;####上帝派来了缓存####&lt;/p&gt;

&lt;p&gt;在几年之后，IBM（60年代）的研究人员引进了一个新概念，它叫“缓存”。&lt;/p&gt;

&lt;p&gt;###什么是缓存？&lt;/p&gt;

&lt;p&gt;通俗来说，缓存是“存贮数据（使用频繁的数据）的临时地方，因为取原始数据的代价太大了，所以我可以取得快一些。”&lt;/p&gt;
&lt;p&gt;我们都听说过线程池、对象池，缓存可以认为是数据的池，这些数据是从数据库里的真实数据复制出来的，并且为了能别取回，被标上了标签（键 ID）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://img2.tuicool.com/QNvequ.jpg&quot;&gt;!&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;命中：&lt;/h4&gt;
&lt;p&gt;当客户发起一个请求（我们说他想要查看一个产品信息），我们的应用接受这个请求，并且如果是在第一次检查缓存的时候，需要去数据库读取产品信息。&lt;/p&gt;
&lt;p&gt;如果在缓存中，一个条目通过一个标记被找到了，这个条目就会被使用、我们就叫它缓存命中。所以，命中率也就不难理解了。&lt;/p&gt;
&lt;h4&gt;Cache Miss：&lt;/h4&gt;
&lt;p&gt;但是这里需要注意两点：&lt;/p&gt;
&lt;p&gt;１. 如果还有缓存的空间，那么，没有命中的对象会被存储到缓存中来。&lt;/p&gt;
&lt;p&gt;２. 如果缓存慢了，而又没有命中缓存，那么就会按照某一种策略，把缓存中的旧对象踢出，而把新的对象加入缓存池。而这些策略统称为*替代策略*（缓存算法），这些策略会决定到底应该提出哪些对象。&lt;/p&gt;
&lt;h4&gt;存储成本：&lt;/h4&gt;
&lt;p&gt;当没有命中时，我们会从数据库取出数据，然后放入缓存。而把这个数据放入缓存所需要的时间和空间，就是存储成本。&lt;/p&gt;
&lt;h4&gt;索引成本：&lt;/h4&gt;
&lt;p&gt;和存储成本相仿。&lt;/p&gt;
&lt;h4&gt;失效：&lt;/h4&gt;
&lt;p&gt;当存在缓存中的数据需要更新时，就意味着缓存中的这个数据失效了。&lt;/p&gt;
&lt;h4&gt;替代策略：&lt;/h4&gt;
&lt;p&gt;当缓存没有命中时，并且缓存容量已经满了，就需要在缓存中踢出一个老的条目，加入一条新的条目，而到底应该踢出什么条目，就由替代策略决定。&lt;/p&gt;
&lt;h4&gt;最优替代策略：&lt;/h4&gt;
&lt;p&gt;最优的替代策略就是想把缓存中最没用的条目给踢出去，但是未来是不能够被预知的，所以这种策略是不可能实现的。但是有很多策略，都是朝着这个目前去努力。&lt;/p&gt;
&lt;h1&gt;缓存算法&lt;/h1&gt;
&lt;p&gt;没有人能说清哪种缓存算法优于其他的缓存算法&lt;/p&gt;
&lt;h4&gt;Least Frequently Used（LFU）：&lt;/h4&gt;
&lt;p&gt;大家好，我是 LFU，我会计算为每个缓存对象计算他们被使用的频率。我会把最不常用的缓存对象踢走。&lt;/p&gt;
&lt;h4&gt;Least Recently User（LRU）：&lt;/h4&gt;
&lt;p&gt;我是 LRU 缓存算法，我把最近最少使用的缓存对象给踢走。&lt;/p&gt;
&lt;p&gt;我总是需要去了解在什么时候，用了哪个缓存对象。如果有人想要了解我为什么总能把最近最少使用的对象踢掉，是非常困难的。&lt;/p&gt;
&lt;p&gt;浏览器就是使用了我（LRU）作为缓存算法。新的对象会被放在缓存的顶部，当缓存达到了容量极限，我会把底部的对象踢走，而技巧就是：我会把最新被访问的缓存对象，放到缓存池的顶部。&lt;/p&gt;
&lt;p&gt;所以，经常被读取的缓存对象就会一直呆在缓存池中。有两种方法可以实现我，array 或者是 linked list。&lt;/p&gt;
&lt;p&gt;我的速度很快，我也可以被数据访问模式适配。我有一个大家庭，他们都可以完善我，甚至做的比我更好（我确实有时会嫉妒，但是没关系）。我家庭的一些成员包括 LRU2 和 2Q，他们就是为了完善 LRU 而存在的。&lt;/p&gt;
&lt;h4&gt;Least Recently Used 2（LRU2）：&lt;/h4&gt;
&lt;p&gt;我是 Least Recently Used 2，有人叫我最近最少使用 twice，我更喜欢这个叫法。我会把被两次访问过的对象放入缓存池，当缓存池满了之后，我会把有两次最少使用的缓存对象踢走。因为需要跟踪对象2次，访问负载就会随着缓存池的增加而增加。如果把我用在大容量的缓存池中，就会有问题。另外，我还需要跟踪那么不在缓存的对象，因为他们还没有被第二次读取。我比LRU好，而且是 adoptive to access 模式 。&lt;/p&gt;
&lt;h4&gt;Two Queues（2Q）：&lt;/h4&gt;
&lt;p&gt;我是 Two Queues；我把被访问的数据放到 LRU 的缓存中，如果这个对象再一次被访问，我就把他转移到第二个、更大的 LRU 缓存。&lt;/p&gt;
&lt;p&gt;我踢走缓存对象是为了保持第一个缓存池是第二个缓存池的1/3。当缓存的访问负载是固定的时候，把 LRU 换成 LRU2，就比增加缓存的容量更好。这种机制使得我比 LRU2 更好，我也是 LRU 家族中的一员，而且是 adoptive to access 模式 。&lt;/p&gt;
&lt;h4&gt;Adaptive Replacement Cache（ARC）：&lt;/h4&gt;
&lt;p&gt;我是 ARC，有人说我是介于 LRU 和 LFU 之间，为了提高效果，我是由2个 LRU 组成，第一个，也就是 L1，包含的条目是最近只被使用过一次的，而第二个 LRU，也就是 L2，包含的是最近被使用过两次的条目。因此， L1 放的是新的对象，而 L2 放的是常用的对象。所以，别人才会认为我是介于 LRU 和 LFU 之间的，不过没关系，我不介意。&lt;/p&gt;
&lt;p&gt;我被认为是性能最好的缓存算法之一，能够自调，并且是低负载的。我也保存着历史对象，这样，我就可以记住那些被移除的对象，同时，也让我可以看到被移除的对象是否可以留下，取而代之的是踢走别的对象。我的记忆力很差，但是我很快，适用性也强。&lt;/p&gt;
&lt;h4&gt;Most Recently Used（MRU）：&lt;/h4&gt;
&lt;p&gt;我是 MRU，和 LRU 是对应的。我会移除最近最多被使用的对象，你一定会问我为什么。好吧，让我告诉你，当一次访问过来的时候，有些事情是无法预测的，并且在缓存系统中找出最少最近使用的对象是一项时间复杂度非常高的运算，这就是为什么我是最好的选择。&lt;/p&gt;
&lt;p&gt;我是数据库内存缓存中是多么的常见！每当一次缓存记录的使用，我会把它放到栈的顶端。当栈满了的时候，你猜怎么着？我会把栈顶的对象给换成新进来的对象！&lt;/p&gt;
&lt;h4&gt;First in First out（FIFO）：&lt;/h4&gt;
&lt;p&gt;我是先进先出，我是一个低负载的算法，并且对缓存对象的管理要求不高。我通过一个队列去跟踪所有的缓存对象，最近最常用的缓存对象放在后面，而更早的缓存对象放在前面，当缓存容量满时，排在前面的缓存对象会被踢走，然后把新的缓存对象加进去。我很快，但是我并不适用。&lt;/p&gt;
&lt;h4&gt;Second Chance：&lt;/h4&gt;
&lt;p&gt;大家好，我是 second chance，我是通过 FIFO 修改而来的，被大家叫做 second chance 缓存算法，我比 FIFO 好的地方是我改善了 FIFO 的成本。我是 FIFO 一样也是在观察队列的前端，但是很FIFO的立刻踢出不同，我会检查即将要被踢出的对象有没有之前被使用过的标志（1一个 bit 表示），没有没有被使用过，我就把他踢出；否则，我会把这个标志位清除，然后把这个缓存对象当做新增缓存对象加入队列。你可以想象就这就像一个环队列。当我再一次在队头碰到这个对象时，由于他已经没有这个标志位了，所以我立刻就把他踢开了。我在速度上比 FIFO 快。&lt;/p&gt;
&lt;h4&gt;CLock：&lt;/h4&gt;
&lt;p&gt;我是 Clock，一个更好的 FIFO，也比 second chance 更好。因为我不会像 second chance 那样把有标志的缓存对象放到队列的尾部，但是也可以达到 second chance 的效果。&lt;/p&gt;
&lt;p&gt;我持有一个装有缓存对象的环形列表，头指针指向列表中最老的缓存对象。当缓存 miss 发生并且没有新的缓存空间时，我会问问指针指向的缓存对象的标志位去决定我应该怎么做。如果标志是0，我会直接用新的缓存对象替代这个缓存对象；如果标志位是1，我会把头指针递增，然后重复这个过程，知道新的缓存对象能够被放入。我比 second chance 更快。&lt;/p&gt;
&lt;h4&gt;Simple time-based：&lt;/h4&gt;
&lt;p&gt;我是 simple time-based 缓存算法，我通过绝对的时间周期去失效那些缓存对象。对于新增的对象，我会保存特定的时间。我很快，但是我并不适用。&lt;/p&gt;
&lt;h4&gt;Extended time-based expiration：&lt;/h4&gt;
&lt;p&gt;我是 extended time-based expiration 缓存算法，我是通过相对时间去失效缓存对象的；对于新增的缓存对象，我会保存特定的时间，比如是每5分钟，每天的12点。&lt;/p&gt;
&lt;h4&gt;Sliding time-based expiration：&lt;/h4&gt;
&lt;p&gt;我是 sliding time-based expiration，与前面不同的是，被我管理的缓存对象的生命起点是在这个缓存的最后被访问时间算起的。我很快，但是我也不太适用。&lt;/p&gt;
&lt;h4&gt;其他的缓存算法还考虑到了下面几点：&lt;/h4&gt;
&lt;p&gt;成本：如果缓存对象有不同的成本，应该把那些难以获得的对象保存下来。&lt;/p&gt;
&lt;p&gt;容量：如果缓存对象有不同的大小，应该把那些大的缓存对象清除，这样就可以让更多的小缓存对象进来了。&lt;/p&gt;
&lt;p&gt;时间：一些缓存还保存着缓存的过期时间。电脑会失效他们，因为他们已经过期了。&lt;/p&gt;
&lt;p&gt;根据缓存对象的大小而不管其他的缓存算法可能是有必要的。&lt;/p&gt;

&lt;p&gt;在这一部分中，我们来看看如何实现这些著名的缓存算法。以下的代码只是示例用的，如果你想自己实现缓存算法，可能自己还得加上一些额外的工作。&lt;/p&gt;

&lt;h4&gt;Random Cache&lt;/h4&gt;
&lt;p&gt;我是随机缓存，我随意的替换缓存实体，没人敢抱怨。你可以说那个被替换的实体很倒霉。通过这些行为，我随意的去处缓存实体。我比 FIFO 机制好，在某些情况下，我甚至比 LRU 好，但是，通常LRU都会比我好。&lt;/p&gt;

&lt;h4&gt;看看缓存元素（缓存实体）&lt;/h4&gt;
&lt;p&gt;public class CacheElement&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;private Object objectValue;&lt;/p&gt;
&lt;p&gt;private Object objectKey;&lt;/p&gt;
&lt;p&gt;private int index;&lt;/p&gt;
&lt;p&gt;private int hitCount; // getters and setters&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;这个缓存实体拥有缓存的key和value，这个实体的数据结构会被以下所有缓存算法用到。&lt;/p&gt;
&lt;h4&gt;缓存算法的公用代码&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// get the entry from the table&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// If we have the entry already in our table&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// then get it and replace only its value.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;err&quot;&gt;｝&lt;/span&gt;
 	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面的代码会被所有的缓存算法实现用到。这段代码是用来检查缓存元素是否在缓存中了，如果是，我们就替换它，但是如果我们找不到这个 key 对应的缓存，我们会怎么做呢？那我们就来深入的看看会发生什么吧！&lt;/p&gt;

&lt;h4&gt;看看随机缓存的实现&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Just replace the value.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// If we haven&#39;t filled the cache yet, put it at the end.&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Otherwise, replace a random entry.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextFloat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;看看FIFO缓算法的实现&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 	 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Objectkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 	 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Just replace the value.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 	 &lt;span class=&quot;c1&quot;&gt;// If we haven&#39;t filled the cache yet, put it at the end.&lt;/span&gt;
 	 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Otherwise, replace the current pointer,&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// entry with the new one.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// in order to make Circular FIFO&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;看看LFU缓存算法的实现&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHitCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHitCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 	 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Just replace the value.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removeLfuElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeLfuElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getElementsFromTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leastElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leastHit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leastElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;leastHit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowestElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lowestElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;lowestElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHitCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowestElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHitCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;lowestElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 	 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowestElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最重点的代码，就应该是 leastHit 这个方法，这段代码就是把&lt;/p&gt;
&lt;p&gt;hitCount 最低的元素找出来，然后删除，给新进的缓存元素留位置。&lt;/p&gt;
&lt;h4&gt;看看LRU缓存算法实现&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;moveToFront&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;nextIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;prevIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// Only the head has a prev entry that is an invalid index&lt;/span&gt;
 	 &lt;span class=&quot;c1&quot;&gt;// so we don&#39;t check.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prevIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// Make sure index is valid. If it isn&#39;t, we&#39;re at the tail&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// and don&#39;t set prev[next].&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 	 &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   	 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Just replace the value, but move it to the front.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;moveToFront&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// If we haven&#39;t filled the cache yet, place in next available&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// spot and move to front.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_numEntries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;moveToFront&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// We replace the tail of the list.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;moveToFront&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这段代码的逻辑如 LRU算法 的描述一样，把再次用到的缓存提取到最前面，而每次删除的都是最后面的元素。&lt;/p&gt;
&lt;h4&gt;结论&lt;/h4&gt;
&lt;p&gt;我们已经看到 LFU缓存算法 和 LRU缓存算法的实现方式，至于如何实现，采用数组还是 LinkedHashMap，都由你决定，不够我一般是小的缓存容量用数组，大的用 LinkedHashMap。&lt;/p&gt;

&lt;p3&gt;几个著名Java开源缓存框架介绍&lt;/p3&gt;
&lt;p&gt;1.OSCache&lt;/p&gt;

&lt;p&gt;　　OSCache是个一个广泛采用的高性能的J2EE缓存框架，OSCache能用于任何Java应用程序的普通的缓存解决方案。 OSCache有以下特点：缓存任何对象，你可以不受限制的缓存部分jsp页面或HTTP请求，任何java对象都可以缓存。拥有全面的API–OSCache API给你全面的程序来控制所有的OSCache特性。永久缓存–缓存能随意的写入硬盘，因此允许昂贵的创建(expensive-to-create)数据来保持缓存，甚至能让应用重启。支持集群–集群缓存数据能被单个的进行参数配置，不需要修改代码。缓存记录的过期–你可以有最大限度的控制缓存对象的过期，包括可插入式的刷新策略(如果默认性能不需要时)。&lt;/p&gt;

&lt;p&gt;2.Java Caching system&lt;/p&gt;

&lt;p&gt;　　JSC(Java Caching system)是一个用分布式的缓存系统，是基于服务器的java应用程序。它是通过提供管理各种动态缓存数据来加速动态web应用。 JCS和其他缓存系统一样，也是一个用于高速读取，低速写入的应用程序。动态内容和报表系统能够获得更好的性能。如果一个网站，有重复的网站结构，使用间歇性更新方式的数据库(而不是连续不断的更新数据库)，被重复搜索出相同结果的，就能够通过执行缓存方式改进其性能和伸缩性。&lt;/p&gt;

&lt;p&gt;3.EHCache&lt;/p&gt;

&lt;p&gt;　　EHCache 是一个纯java的在进程中的缓存，它具有以下特性：快速，简单，为Hibernate2.1充当可插入的缓存，最小的依赖性，全面的文档和测试。&lt;/p&gt;

&lt;p&gt;4.JCache&lt;/p&gt;

&lt;p&gt;　　JCache是个开源程序，正在努力成为JSR-107开源规范，JSR-107规范已经很多年没改变了。这个版本仍然是构建在最初的功能定义上。&lt;/p&gt;

&lt;p&gt;5.ShiftOne&lt;/p&gt;

&lt;p&gt;　　ShiftOne Java Object Cache是一个执行一系列严格的对象缓存策略的Java lib，就像一个轻量级的配置缓存工作状态的框架。&lt;/p&gt;

&lt;p&gt;6.SwarmCache&lt;/p&gt;

&lt;p&gt;　　SwarmCache是一个简单且有效的分布式缓存，它使用IP multicast与同一个局域网的其他主机进行通讯，是特别为集群和数据驱动web应用程序而设计的。SwarmCache能够让典型的读操作大大超过写操作的这类应用提供更好的性能支持。 SwarmCache使用JavaGroups来管理从属关系和分布式缓存的通讯。&lt;/p&gt;

&lt;p&gt;7.TreeCache / JBossCache&lt;/p&gt;

&lt;p&gt;　　JBossCache是一个复制的事务处理缓存，它允许你缓存企业级应用数据来更好的改善性能。缓存数据被自动复制，让你轻松进行JBoss服务器之间的集群工作。JBossCache能够通过JBoss应用服务或其他J2EE容器来运行一个MBean服务，当然，它也能独立运行。 JBossCache包括两个模块：TreeCache和TreeCacheAOP。 TreeCache –是一个树形结构复制的事务处理缓存。TreeCacheAOP –是一个“面向对象”缓存，它使用AOP来动态管理POJO(Plain Old Java Objects) 注：AOP是OOP的延续，是Aspect Oriented Programming的缩写，意思是面向方面编程。&lt;/p&gt;

&lt;p&gt;8.WhirlyCache&lt;/p&gt;

&lt;p&gt;　　Whirlycache是一个快速的、可配置的、存在于内存中的对象的缓存。它能够通过缓存对象来加快网站或应用程序的速度，否则就必须通过查询数据库或其他代价较高的处理程序来建立。&lt;/p&gt;

		  &lt;/article&gt;
		&lt;hr /&gt;
	&lt;br /&gt;
        &lt;p&gt;
          本作品由 &lt;a href=&quot;mailto:ouyanglip@gmail.com&quot;&gt;Lippi.OuYang&lt;/a&gt; 创作，采用
          &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/cn/&quot; title=&quot;查看协议详细信息&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 3.0 许可协议&lt;/a&gt;
          进行许可。
        &lt;/p&gt;
	&lt;div style=&quot;margin-top:10px;margin-bottom:10px&quot;&gt;
	  
	  &lt;span class=&quot;next&quot;&gt;
	    上篇：
	    &lt;a href=&quot;/blog/2014/12/c-code-opt.html&quot;&gt;
	      C代码优化小贴士
	    &lt;/a&gt;
	  &lt;/span&gt;
	   
	  
	  &lt;span class=&quot;prev&quot;&gt;
	    下篇：
	    &lt;a href=&quot;/blog/2015/03/github-pages-blog.html&quot;&gt;
	      利用github-pages建立个人博客
	    &lt;/a&gt;
	  &lt;/span&gt;
	  
	&lt;/div&gt;
	&lt;/div&gt;
	
        
	&lt;div post-cate=&quot;java&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/08/volley-source-code.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Volley源码分析&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Aug 27, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/07/hibernate-cache-guide.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Hibernate缓存配置笔记&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jul 24, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/06/java-lambda-expression.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Java Lambda简明教程&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jun 3, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/04/java-virtual-mechine.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Java虚拟机简介&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Apr 18, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/04/java-code-opt-one.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;优化java代码建议(1)&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Apr 12, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/02/cache.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;谈谈缓存和基本的缓存算法&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Feb 4, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/12/improve-webServer-performance.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;谈谈如何提高web服务器并发性能&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Dec 5, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/11/java-inner-class.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;java中内部类&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Nov 14, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/11/java-concurrent-collections.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;java同步容器与并发容器&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Nov 8, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/09/returning-null.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;关于返回 Null 值的问题&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Sep 18, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/08/why-jdk-string-is-final.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;为什么 jdk 中把 String 类设计成 final&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Aug 29, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/08/78-golden-rules-of-the-java-programming.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;java编程的78条黄金法则&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Aug 16, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/08/java-multithread.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;java并发和多线程&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Aug 2, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/07/android-UI-Thread.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Android UI线程和子线程、Service通信&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jul 19, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/07/android-networkOnMainThreadException.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;从android.os.NetworkOnMainThreadException引发的思考&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jul 18, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/06/26-methods-to-improve-java-performance.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Java编程Tips&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jun 18, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/06/15/in-the-rain.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;在雨中&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jun 14, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;c&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/12/c-code-opt.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;C代码优化小贴士&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Dec 27, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/08/libevent.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;处理并发之二：libevent的eventbuffer&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Aug 24, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/08/linux-epoll.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;处理并发之一：LINUX Epoll机制介绍&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Aug 23, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/07/c-advaced-programming.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;C语言高级编程指南&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jul 5, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;programming&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/03/install-texlive-in-ubuntu.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;在Ubuntu下安装和编译LaTex&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Mar 15, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/03/github-pages-blog.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;利用github-pages建立个人博客&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Mar 1, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/07/qualified-programmer-should-read-what-books.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;一个合格的程序员应该读过哪些书&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jul 15, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/07/c-advaced-programming.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;C语言高级编程指南&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jul 5, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;jekyll&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/07/use-jekyll-build-blog-on-github.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;使用jekyll在Github上搭建博客&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jul 15, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/07/markdown-syntax.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Markdown 语法 (简体中文版)&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jul 11, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/07/markdown-basics.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;markdown 快速入门&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jul 10, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;other&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/03/vim-plugins.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;一些强大的Vim插件&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Mar 20, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/03/install-texlive-in-ubuntu.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;在Ubuntu下安装和编译LaTex&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Mar 15, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/03/github-pages-blog.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;利用github-pages建立个人博客&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Mar 1, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/07/qualified-programmer-should-read-what-books.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;一个合格的程序员应该读过哪些书&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jul 15, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;reprints&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/09/returning-null.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;关于返回 Null 值的问题&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Sep 18, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/08/why-jdk-string-is-final.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;为什么 jdk 中把 String 类设计成 final&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Aug 29, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/08/78-golden-rules-of-the-java-programming.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;java编程的78条黄金法则&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Aug 16, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/07/use-jekyll-build-blog-on-github.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;使用jekyll在Github上搭建博客&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jul 15, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/07/qualified-programmer-should-read-what-books.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;一个合格的程序员应该读过哪些书&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jul 15, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;Android&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/09/android-studio-plugins.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;提高效率的Android Studio插件&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Sep 9, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/10/android-opensource.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;值得推荐的android开源框架&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Oct 1, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;web&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/04/web-transmission-basis.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;网络传输基础&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Apr 16, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/11/web-server.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;也谈如何构建高性能服务端程序&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Nov 19, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/10/xmpp-analise.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;XMPP协议分析-具体分析&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Oct 31, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/10/androidDP-project.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Androidpn 消息推送总结&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Oct 31, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/10/how-to-use-smack.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Smack开发手册&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Oct 30, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/10/androidDP-introduction.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;AndroidPN消息推送&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Oct 30, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/10/xmpp.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;XMPP协议分析-原理&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Oct 28, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/10/jsp-jfreechart.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;使用Jfreechart生成曲线显示到JSP中&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Oct 22, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/10/how-http-works.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;当我们打开网页时发生了什么&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Oct 11, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;book&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/11/how-to-evaluate-the-hackers-and-painters.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;如何评价『黑客与画家』&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Nov 1, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;algorithm&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/12/skip-list.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;skip list跳跃表实现&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Dec 18, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/11/graph.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;计算机算法--图算法介绍&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Nov 29, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/11/leveldb.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;leveldb原理剖析&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Nov 18, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;c/c++&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2014/12/c-open-project.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;值得推荐的C/C++框架和库&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Dec 13, 2014&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;android&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/08/volley-source-code.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Volley源码分析&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Aug 27, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/05/android-links.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;安卓开发者必备的42个链接&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;May 19, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/05/define-custom-view.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Android自定义视图教程&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;May 17, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/03/android-studio-prefrence.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Android Studio多渠道打包和代码混淆教程&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Mar 18, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;Gradle&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/05/gradle-dependency-management.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Gradle系列教程之依赖管理&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;May 5, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/04/gradle-task-management.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Gradle系列教程之任务管理&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Apr 30, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;lambda&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/06/java-lambda-expression.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Java Lambda简明教程&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jun 3, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;gradle&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/08/dagger-dependency-injection.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Dagger依赖注入浅析&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Aug 13, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/07/gradle-tasks-guide.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;彻底理解Gradle的任务&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jul 27, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;Latex&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/08/latex-fonts-settings.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Latex中英文环境设置&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Aug 22, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;Unix/Linux&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2016/02/baidu-spider-forbidden.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;解决百度爬虫无法抓取github pages&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Feb 18, 2016&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2016/01/apache-configuration-in-ubuntu.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Ubuntu下Apache服务器的配置&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jan 20, 2016&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2016/01/tmux-guide.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;终端复用软件之tmux简介&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Jan 19, 2016&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2015/08/linux-zsh.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Zsh-Linux下最好的Shell简介&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Aug 23, 2015&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;Git&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2016/02/git-guide.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;Git操作手册|命令速查表&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Feb 20, 2016&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	&lt;div post-cate=&quot;hi&quot;&gt;
          &lt;ul class=&quot;posts&quot;&gt;
            
              
                
              
            
              
                
		&lt;li&gt;
                  &lt;a href=&quot;/blog/2016/02/hi.html&quot; class=&quot;post-list-item&quot;&gt;
                    &lt;h2&gt;hi&lt;/h2&gt;
                    &lt;span class=&quot;date&quot;&gt;Feb 22, 2016&lt;/span&gt;
                  &lt;/a&gt;
		&lt;/li&gt;
                
              
            
          &lt;/ul&gt;
	&lt;/div&gt;
        
	 &lt;/div&gt;

&lt;/div&gt;


&lt;!-- Blog Comments --&gt;
&lt;div class=&quot;media&quot;&gt;
  &lt;!-- UY BEGIN 
&lt;div id=&quot;uyan_frame&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://v2.uyan.cc/code/uyan.js?uid=2023801&quot;&gt;&lt;/script&gt;
UY END --&gt;

&lt;!-- 多说评论框 start --&gt;
  &lt;div class=&quot;post-comment&quot;&gt;
            &lt;span&gt;Comments&lt;/span&gt;
	&lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;/blog/2015/02/cache&quot; data-title=&quot;谈谈缓存和基本的缓存算法&quot; data-url=&quot;LippiOuYang.github.io/blog/2015/02/cache.html&quot;&gt;
	&lt;/div&gt;
 &lt;/div&gt;
&lt;!-- 多说评论框 end --&gt;
&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var duoshuoQuery = {short_name:&quot;lippiouyang&quot;};
	(function() {
		var ds = document.createElement(&#39;script&#39;);
		ds.type = &#39;text/javascript&#39;;ds.async = true;
		ds.src = (document.location.protocol == &#39;https:&#39; ? &#39;https:&#39; : &#39;http:&#39;) + &#39;//static.duoshuo.com/embed.js&#39;;
		ds.charset = &#39;UTF-8&#39;;
		(document.getElementsByTagName(&#39;head&#39;)[0] 
		 || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(ds);
	})();
	&lt;/script&gt;
&lt;!-- 多说公共JS代码 end --&gt;
 
&lt;/div&gt; 
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;default.html包含了每个html都需要的一些标记，以及一个个liquid标记。&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;是liquid中用来表示“内容”的标记，其中的对象在解析时会被替换成文件到页面中&lt;/p&gt;

&lt;p&gt;content：表示在这里的地方用子页面的内容替换。&lt;/p&gt;

&lt;p&gt;现在我们来实现一个主页，在根目录下，创建一个index.html&lt;/p&gt;

&lt;p&gt;index.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: default
---
&amp;lt;h1&amp;gt;Hello jekyll&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the index page&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;除了普通的html标记外，开头这一段称为YAML格式，以一行“—”开头，一行“—”结尾，在虚线的中间以key-value的形式对一些全局变量进行赋值。&lt;/p&gt;

&lt;p&gt;layout变量表示该文章应当使用_layouts/default这个文件作为父模板，并将index.html中的内容替换父模板中的&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;标记。&lt;/p&gt;

&lt;p&gt;在根目录中启动jekyll –server，并访问http://localhost:4000/index.html，你将得到下面页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-05-img0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;该页面的Html源码如下，可以看到，index.html中的内容替换了default.html中的&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My blog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello jekyll&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is the index page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在请观察一下_site中的index.html，就是上面的Html代码！OK，现在你明白jekyll的工作方式了吧，它仅仅一次性的完成静态页面的转化，其余的事情全都交给普通的web server了！&lt;/p&gt;

&lt;p&gt;需要注意的是，如果你失败了，请确保你的文件都是UTF-8 without BOM的格式。&lt;/p&gt;

&lt;p&gt;在windows中，为了甄别UTF-8编码格式的文本文件，默认会在文件头插入两个字节的标识，被称为BOM。事实证明这是个“歪门邪道”，jekyll不识别这种特殊的标记，所以可以使用Notepad++或其他的工具将UTF-8编码文件开头的BOM去掉。&lt;/p&gt;

&lt;p&gt;###第一篇文章&lt;/p&gt;

&lt;p&gt;现在我们来创建一篇博客文章，并在index.html页面添加文章的链接。&lt;/p&gt;

&lt;p&gt;在 _posts目录下创建2014-06-21-first-post.html&lt;/p&gt;

&lt;p&gt;2014-06-21-first-post.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: default
title: my first post
---
&amp;lt;h1&amp;gt;利用github-pages建立个人博客&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is my first post.Click the link below to go back to index:&amp;lt;/p&amp;gt;
&amp;lt;a href=&quot;/index.html&quot;&amp;gt;Go back&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改index.html&lt;/p&gt;

&lt;p&gt;index.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: default
---
&amp;lt;h1&amp;gt;Hello jekyll&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the index page&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;My post list:&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最终效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-05-img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个是略微复杂的例子，这里涉及到两个主要的对象&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;site：全局站点对象。比如site.posts返回当前站点所有在_post目录下的文章，上面的例子结合for循环来罗列所有的文章&lt;/li&gt;
  &lt;li&gt;page：文章对象。比如page.url将返回page对象的url，上面的例子用该对象和属性返回了文章的链接
另外要补充的是site.baseurl，该值就是我们在_config.yml中配置的baseurl啦！&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这些对象被称为“模板数据API”，更多API文档请参见&lt;a href=&quot;http://jekyllbootstrap.com/api/template-data-api.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###liquid&lt;/p&gt;

&lt;p&gt;liquid是jekyll底层用于解析的引擎，我们用到的&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;亦或是&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;标记其实是靠liquid去解析的。本节将详细介绍liquid的使用。&lt;/p&gt;

&lt;p&gt;liquid包含两种标记，理解他们的机理是十分重要的：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;：输入标记，其中的内容将被文本输出
&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;：操作标记，通常包含控制流代码
例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;     
       Sorry, you are too young
     
     
     
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;另外liquid还包含一种叫filter的机制。这是种对输出标记的扩展，通过它可以对输出标记中的内容进行更细致的处理，例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;     Hello TOBI
     Hello tobi has 4 letters!
     Hello 2016 Jul
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;返回字符串大写的结果：TOBI
返回字符串的长度：4
将当前时间格式化输出
liquid内置了一些filter，并且该机制可以被扩展，jekyll便扩展了liquid的filter。&lt;/p&gt;

&lt;p&gt;更多关于liquid的使用方法，请参见&lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;更多关于jekyll对liquid的扩展，请参见&lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##样式、分类、标签&lt;/p&gt;

&lt;p&gt;在前一篇中我们实际使用jekyll做了一个略微“复杂”的模板。并用它生成了站点。但是这样的blog显然太粗糙了，别说不能吸引别人了，自己都看不下去啊。作为自己的“门户”，当然要把美化工作放在第一位啦。&lt;/p&gt;

&lt;p&gt;网站的美观十分重要，这当然要依靠CSS咯。因为完全基于静态页面，所以没有现成的动态模板可以使用，我们只能手写CSS了，这里不介绍CSS了，因为这是设计师的范畴了，屌丝程序员搞不来了。我的blog的样式是从网上找过来改的。&lt;/p&gt;

&lt;p&gt;从功能的角度blog除了文章以外，对文章的分类、标签、归档都是主流的功能。&lt;/p&gt;

&lt;p&gt;分类和标签功能是jekyll的yaml-format的内置功能，在每篇文章上方可以设置：这里需要注意的是如果多个分类或者tag的话，用逗号分隔，并且要紧跟一个空格。分类可以任意添加，Jekyll在解析网站的时候会统计所有的分类，并放到site.categories中；换句话说，不能脱离文章而设置分类。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: default
title: Title
description: 这里的description是自定义属性。
categories: [web-build]
tags: [github-page, jekyll, liquid]
---
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面是本站罗列分类的代码，供大家参考&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div id=&quot;categories-3&quot; class=&quot;left&quot;&amp;gt;
     &amp;lt;h3&amp;gt;Categories&amp;lt;/h3&amp;gt;
     &amp;lt;ul&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/java.html&quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/c.html&quot;&amp;gt;c&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/programming.html&quot;&amp;gt;programming&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/jekyll.html&quot;&amp;gt;jekyll&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/other.html&quot;&amp;gt;other&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/reprints.html&quot;&amp;gt;reprints&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/Android.html&quot;&amp;gt;Android&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/web.html&quot;&amp;gt;web&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/book.html&quot;&amp;gt;book&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/algorithm.html&quot;&amp;gt;algorithm&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/c/c++.html&quot;&amp;gt;c/c++&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/android.html&quot;&amp;gt;android&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/Gradle.html&quot;&amp;gt;Gradle&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/lambda.html&quot;&amp;gt;lambda&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/gradle.html&quot;&amp;gt;gradle&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/Latex.html&quot;&amp;gt;Latex&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/Unix/Linux.html&quot;&amp;gt;Unix/Linux&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/Git.html&quot;&amp;gt;Git&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/hi.html&quot;&amp;gt;hi&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
     &amp;lt;/ul&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意到分类的url链接，这里的categories目录以及其中的html不会自动生成，需要手动添加的，也就是说每增加一个分类，都需要在categories下添加一个该分类的html。当然你可以选择其他目录，甚至考虑其他解决方案，不过我还没想到更简单的方法。Tag的处理方式类似，这里就省略了。&lt;/p&gt;

&lt;p&gt;推荐大家下载jekyll原作者推荐的简单例子来学习：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git clone https://github.com/plusjade/jekyll-bootstrap.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下载的目录里面是一个完整的网站，可以使用我们本地的jekyll –server启动。另外，作者的网站：&lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;http://jekyllbootstrap.com/
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###代码高亮&lt;/p&gt;

&lt;p&gt;参考&lt;a href=&quot;http://jekyllrb.com/docs/templates/&quot;&gt;Jekyll官网文档&lt;/a&gt;里&lt;em&gt;Code snippet highlighting&lt;/em&gt;一节。玩颜色魔法的大魔术师是&lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;###安装Python Pygments&lt;/p&gt;

&lt;p&gt;Ubtuntu下：sudo apt-get install python-pygments&lt;/p&gt;

&lt;p&gt;###设置代码高亮的样式&lt;/p&gt;

&lt;p&gt;通过下面的命令可以查看当前支持的样式
	from pygments.styles import STYLE_MAP
	STYLE_MAP.keys()
输出：
    	[‘monokai’, ‘manni’, ‘rrt’, ‘perldoc’, ‘borland’, ‘colorful’, 		‘default’, ‘murphy’, ‘vs’, ‘trac’, ‘tango’, ‘fruity’, ‘autumn’, 	‘bw’, ‘emacs’, ‘vim’, ‘pastie’, ‘friendly’, ‘native’]&lt;/p&gt;

&lt;p&gt;###生成指定样式的css文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pygmentize -S native -f html &amp;gt; pygments.css
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将生成的css文件拷贝到主题的css目录下，如：&lt;/p&gt;

   	 %github pages project folder%\assets\themes\twitter\css\

&lt;p&gt;引入default.html中引入css文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// default目录如
	%github pages project folder%\includes\themes\twitter\

// 引入如下代码
	&amp;lt;link href=&#39;/css/pygments.css&#39; rel=&quot;stylesheet&quot; media=&quot;all&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在文章中高亮代码:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
       	 &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###给文章添加目录&lt;/p&gt;

&lt;p&gt;如你所见，我的这个博客里，稍长点的文章，都会生成目录树（Table of Content），并且配合有Bootstrap的&lt;a href=&quot;http://www.zfanw.com/blog/twitter-bootstrap-affix-js.html&quot;&gt;affix&lt;/a&gt;、&lt;a href=&quot;http://www.zfanw.com/blog/bootstrap-scrollspy.html&quot;&gt;ScrollSpy&lt;/a&gt; 效果。同样地，在Jekyll构建的静态博客上，我一样想生成目录树。
Jekyll的Plugins页面中有提到一个插件 &lt;a href=&quot;https://github.com/dafi/jekyll-toc-generator&quot;&gt;jekyll-toc-generator&lt;/a&gt;，但其实没有必要使用插件，因为 Jekyll 的 Markdown 渲染器 &lt;a href=&quot;http://kramdown.gettalong.org/converter/html.html#toc&quot;&gt;kramdown&lt;/a&gt; 已经具备这个功能。我们只需要启用它即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;启用 kramdown&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;打开 _config.yml 文件，确保以下一行存在：
	markdown: kramdown&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;生成 TOC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接下来是在文章中标识 toc 的生成位置：
	* 目录
	{:toc}
	# 陈三
	## 陈三的博客&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;请注意，&lt;code class=&quot;highlighter-rouge&quot;&gt;* 目录&lt;/code&gt;这一行是必需的，它表示目录树列表，至于星号后面写什么请随意&lt;/li&gt;
  &lt;li&gt;如果要把某标题从目录树中排除，则在该标题的下一行写上 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:.no_toc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;目录深度可以通过 config.yml 文件中添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;toc_levels&lt;/code&gt; 选项来定制，默认为 &lt;code class=&quot;highlighter-rouge&quot;&gt;1..6&lt;/code&gt;，表示标题一至标题六全部渲染&lt;/li&gt;
  &lt;li&gt;默认生成的目录列表会添加 id 值 &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown-toc&lt;/code&gt;，我们可以自定义 id 值，比如 {:toc #chen}，生成的目录列表添加的 id 将会是 chen。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###评论功能&lt;/p&gt;

&lt;p&gt;静态的网站不可能自己存放评论，于是只能考虑外挂评论了，查了一下比较靠谱和广泛的就是DISQUS了;
Disqus是一个社会化的评论解决方案，请允许我使用这个烂透了的词，调用它的接口非常简单，在自己的页面加载他的一段JS代码即可，如果别人注册了Disqus，那么就可以方便的留言，交流，一处登录，处处方便，而且Disqus也提供了一些spam等策略，不用自己操心了，并且可以和一些现有的博客系统很好的转换对接。越来越多的网站开始使用Disqus的服务了，这是一个非常不错的趋势，Jekyll配合&lt;a href=&quot;http://disqus.com&quot; title=&quot;Disqus&quot;&gt;Disqus&lt;/a&gt;实在是完美了。我别无所求了。&lt;/p&gt;

&lt;p&gt;点击&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-06-img0.png&quot; alt=&quot;&quot; /&gt;，在下面的页面中填写相关的信息，注意先在右侧注册登录信息，然后再在左侧增加一个站点：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-06-img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;填写完成后点击“Continue”，在接下来的页面中选择Universal Code，然后根据提示完成接下来的操作，后面的操作就十分简单了：主要就是把产生的脚本文件复制到你的站点页面中即可。&lt;/p&gt;

&lt;p&gt;DISQUS还有一个Dashboard，可以用来管理评论，这里就不再详述了。最后的效果就是本blog文章下方的评论咯，还是挺好看的，国内的还有个多说的评论引擎，支持国内的各大网站帐号。&lt;/p&gt;

&lt;p&gt;###站内搜索&lt;/p&gt;

&lt;p&gt;blog当然不能缺少站内搜索功能。主流的站内搜索都是主流的搜索引擎提供的。作为一个google控，当然必须选择google啊。当然你必须拥有一个google帐号。&lt;/p&gt;

&lt;p&gt;google的站内搜索叫：custome search engine：&lt;a href=&quot;http://www.google.com/cse&quot;&gt;http://www.google.com/cse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;创建一个自定义搜索与添加评论类似只要三步：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;填写自定义搜索的名字、描述、语言、站点信息，这些信息中唯一需要注意的是站点信息，建议使用mydomain.com作为搜索范围，因为这样的话，会自动转化成&lt;em&gt;.mydomain.com/&lt;/em&gt;，能包含全站的内容&lt;/li&gt;
  &lt;li&gt;选择样式和尝试搜索。尝试搜索有时不能成功，但是不要紧&lt;/li&gt;
  &lt;li&gt;将生成脚本写到网页中&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这时，可能搜索功能仍然无法使用，尤其是你的网站没有什么名气，也没有什么外链。因为google的爬虫不可能很快的抓到你的网站。但这里有个技巧可以让你的网站立刻被google收录（姑且不论排名），那就是google的Webmaster Tools工具，该工具是免费的，而且还集成了站点流量统计功能，十分强大。&lt;/p&gt;

&lt;p&gt;进入地址：&lt;a href=&quot;https://www.google.com/webmasters/tools/home&quot;&gt;https://www.google.com/webmasters/tools/home&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-06-img5.png&quot; alt=&quot;&quot; /&gt;
它会要你认证你对网站的所有权，下载一个HTML文件，把它上传到你的网站上，
设置完成之后基本上立刻就生效了，无需等待一天。&lt;/p&gt;

&lt;p&gt;认证成功后，进入&lt;a href=&quot;http://www.xml-sitemaps.com/&quot;&gt;sitemaps网站&lt;/a&gt;,在下面填入你的网站后点击start，
&lt;img src=&quot;/images/images/githubpages/sitemap.jpg&quot; alt=&quot;&quot; /&gt;
接下来下载sitemap文件，把它上传到你的域名根目录，
打开Optimization-&amp;gt;Sitemaps，点击Add/TEST SITEMAP，输入指向你的站点的sitemap地址，本博客的sitemap是：&lt;a href=&quot;http://coolshell.info/sitemap.xml&quot;&gt;http://coolshell.info/sitemap.xml&lt;/a&gt;,过几分钟就看到下面的结果：
！&lt;a href=&quot;/images/images/githubpages/sitemap2.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;sitemap是网站所有链接的集合，最简单的sitemap可以是一个文本文件，其中只存放你网站的所有可用资源的链接，这有利于搜索引擎收录你的网站内容。复杂的sitemap还可以利用sitemap的专用格式来标注资源的形式，更多关于sitemap可以参考：http://www.sitemaps.org/
完成站点认证和sitemap测试后，我们回到自定义搜索的页面，进入到control panel-&amp;gt;Indexing，在其中使用sitemap来迫使google索引你的网站。这样，你的网站就算被google收录了。&lt;/p&gt;

&lt;p&gt;至于我们的站内搜索应该是可以用的了，试试本站点上方的搜索就知道啦～&lt;/p&gt;

&lt;p&gt;###站点统计&lt;/p&gt;

&lt;p&gt;这里介绍的站点统计是google的analytics，analytics的使用十分简单，同样的原理，利用注入脚本来实现流量统计的外挂，统计功能十分强大，谁用谁知道。这里就不再唠叨了。。&lt;/p&gt;

&lt;p&gt;##GoDaddy &amp;amp; DNSPod&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://godaddy.com&quot; title=&quot;Godaddy&quot;&gt;GoDaddy&lt;/a&gt;是一家非常不错的域名注册商，良好的用户体验，飞快的生效速度，给力的优惠码，也支持支付宝，永远不用担心国内那些流氓厂商的流氓行为，注册了域名，就可以放心不会被别人抢走。在Godaddy注册域名是一件很简单的事情，按照提示走就完全没有问题，唯一需要动脑筋的可能是，你要想一个既有个人标识，又没有被别人注册的域名了。&lt;/p&gt;

&lt;p&gt;Godaddy一切都很完美，直到遇到了GFW，原因你肯定懂。前段时间推上风传Godaddy的DNS服务器被墙，导致域名不能解析，看起来好像自己的站被墙了一样，这个确实是个闹心的事情，还好国内有DNS服务的替代产品，而且做得还非常的不错，也是免费的，功能强大，速度快，不用担心被和谐，所以隆重推荐&lt;a href=&quot;http://dnspod.cn&quot; title=&quot;DNSPod&quot;&gt;DNSPod&lt;/a&gt;给大家，可以试用一下，把DNS服务迁移到DNSPod来，解决后顾之忧，配置比较简单，不懂的可以等我后面的博客啦，哈。&lt;/p&gt;

&lt;p&gt;##GitHub &amp;amp; Jekyll&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com&quot; title=&quot;Github:social coding&quot;&gt;GitHub&lt;/a&gt;是一个非常优秀的产品，爆发式的增长，各大优质开源软件的蜂涌而至，只能说明人们太需要他了。&lt;strong&gt;Social Coding&lt;/strong&gt;是他的Slogan，产品的设计确实解决了很多代码交流的难题，让世界更平，让交流更畅，关于Git的学习，大家可以移步这里&lt;a href=&quot;http://progit.org/book/zh/&quot; title=&quot;Pro Git&quot;&gt;Pro Git中文版&lt;/a&gt;，这也是一个本身就在Github维护的一个项目，高质量的翻译了Git入门书，讲解详细，是学习Git的好资料。&lt;/p&gt;

&lt;p&gt;GitHub是一个伟大的产品，&lt;a href=&quot;http://pages.github.com&quot; title=&quot;GitHub Pages&quot;&gt;GitHub Pages&lt;/a&gt;是他伟大的一部分，GitHub Pages基于&lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;博客引擎，当我深入的研究了他之后，我深深的想给Jekyll的作者一个拥抱，列举一下Jekyll的优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以单独放在自己的服务器上，他也是GitHub Pages的基础，质量可靠&lt;/li&gt;
  &lt;li&gt;将博客最重要的功能抽取出来，去除了&lt;a href=&quot;http://wordpress.org&quot; title=&quot;WordPress&quot;&gt;WordPress&lt;/a&gt;的复杂、烦躁的东西，一切都是清晰可控的&lt;/li&gt;
  &lt;li&gt;可以方便的使用&lt;a href=&quot;http://markdown.tw/&quot; title=&quot;Markdown语法&quot;&gt;Markdown&lt;/a&gt;等其他标记语言&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;清晰、简洁的文件组织，完美的永久链接方案，既漂亮、又可定制&lt;/li&gt;
&lt;li&gt;博客静态化，速度快&lt;/li&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;是完美的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;写到这里，基本的点已经介绍完毕，现在介绍下怎么获取别人的博客模板来建立自己的博客。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;获取并修改别人的博客&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll官方建立了一个&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/sites&quot;&gt;页面&lt;/a&gt;，里面有许多的模板可供参考。接下来我们就要奉行“拿来主义”了，将别人的模板为我们所用。&lt;/p&gt;

&lt;p&gt;我自己用了Yukang’s Page&amp;lt;/a&amp;gt;，他采用了一个叫做&lt;a href=&quot;http://themes.jekyllbootstrap.com/preview/twitter/&quot;&gt;twitter&lt;/a&gt;的Jekyll Bootstrap的模板。下面假设你已经安装了git，我们把他人的网站代码clone下来，为了举例方便，还是选取了Yukang’s Page：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/chenyukang/chenyukang.github.com.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后删去别人的.git文件夹：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm -rf .git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着，我们参考&lt;a href=&quot;http://jekyllrb.com/docs/structure/&quot;&gt;jekyll的文件目录&lt;/a&gt;，可以把他人的博客删去，并且做一些小的调整。接下来，我们把改头换面的博客上传到自己的GitHub帐号中去。一般情况下，假设你的帐号名是USERNAME，你需要建一个名为USERNAME.github.io的帐号，分支为master。这样，在你将本地的网站push上去之后，不到10分钟，访问USERNAME.github.io，就可以看到你新鲜出炉的网站了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git add -A
git commit -m &quot;first commit&quot;
git remote add origin https://github.com/USERNAME/USERNAME.github.io.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git博大精深，我还没有熟练掌握。具体的命令可以参考下面一些参考资料：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;入门：&lt;a href=&quot;http://rogerdudler.github.io/git-guide/index.zh.html&quot;&gt;git - 简易指南&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进阶：&lt;a href=&quot;http://think-like-a-git.net/epic.html&quot;&gt;Think Like (a) Git&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;参考图解：&lt;a href=&quot;http://marklodato.github.io/visual-git-guide/index-en.html&quot;&gt;A Visual Git Reference&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你想要在push之前就在本地预览一下网站，可以使用
&lt;code&gt;jekyll serve --watch&lt;/code&gt;
命令。默认设置下，可以在浏览器中访问localhost:4000预览。详细情况请&lt;a href=&quot;http://jekyllrb.com/docs/usage/&quot;&gt;点击这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;那么，我们如何撰写新的博客呢？下面，我们隆重推出Markdown。&lt;/p&gt;

&lt;p&gt;##Markdown语法&lt;/p&gt;

&lt;p&gt;根据&lt;a href=&quot;http://zh.wikipedia.org/zh-cn/Markdown&quot;&gt;维基百科上的介绍&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）和亚伦·斯沃茨（Aaron Swartz）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;想到&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8&quot;&gt;Aaron Swartz&lt;/a&gt;已经故去，不禁一阵伤感。&lt;/p&gt;

&lt;p&gt;Markdown的介绍有许多，个人推荐：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;入门：&lt;a href=&quot;http://jianshu.io/p/q81RER&quot;&gt;献给写作者的 Markdown 新手指南&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;另一份入门文档：&lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;Markdown Cheatsheet&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进阶：&lt;a href=&quot;http://wowubuntu.com/markdown/&quot;&gt;Markdown 语法说明 (简体中文版) &lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;kramdown使用心得：&lt;a href=&quot;http://mindspill.net/computing/web-development-notes/kramdown-notes/&quot;&gt;Kramdown notes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;备注：如何在Markdown中写注释呢？&lt;a href=&quot;https://twitter.com/denialduan/status/180532937358454784&quot;&gt;这里&lt;/a&gt;提供了最原始的一种解决方法：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;看来在Markdown文件里写注释的唯一方法就是用&amp;lt;!– –&amp;gt;了，好吧。&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>谈谈缓存和基本的缓存算法</title>
   <link href="http://http://coolshell.info/blog/2015/02/cache.html"/>
   <updated>2015-02-04T00:00:00+00:00</updated>
   <id>/blog/2015/02/cache</id>
   <content type="html">&lt;p&gt;很久很久以前，在还没有缓存的时候……用户经常是去请求一个对象，而这个对象是从数据库去取，然后，这个对象变得越来越大，这个用户每次的请求时间也越来越长了，这也把数据库弄得很痛苦，他无时不刻不在工作。所以，这个事情就把用户和数据库弄得很生气，接着就有可能发生下面两件事情：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用户很烦，在抱怨，甚至不去用这个应用了（这是大多数情况下都会发生的）&lt;/li&gt;
  &lt;li&gt;数据库为打包回家，离开这个应用，然后，就出现了大麻烦（没地方去存储数据了）（发生在极少数情况下）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;####上帝派来了缓存####&lt;/p&gt;

&lt;p&gt;在几年之后，IBM（60年代）的研究人员引进了一个新概念，它叫“缓存”。&lt;/p&gt;

&lt;p&gt;###什么是缓存？&lt;/p&gt;

&lt;p&gt;通俗来说，缓存是“存贮数据（使用频繁的数据）的临时地方，因为取原始数据的代价太大了，所以我可以取得快一些。”&lt;/p&gt;
&lt;p&gt;我们都听说过线程池、对象池，缓存可以认为是数据的池，这些数据是从数据库里的真实数据复制出来的，并且为了能别取回，被标上了标签（键 ID）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://img2.tuicool.com/QNvequ.jpg&quot;&gt;!&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;命中：&lt;/h4&gt;
&lt;p&gt;当客户发起一个请求（我们说他想要查看一个产品信息），我们的应用接受这个请求，并且如果是在第一次检查缓存的时候，需要去数据库读取产品信息。&lt;/p&gt;
&lt;p&gt;如果在缓存中，一个条目通过一个标记被找到了，这个条目就会被使用、我们就叫它缓存命中。所以，命中率也就不难理解了。&lt;/p&gt;
&lt;h4&gt;Cache Miss：&lt;/h4&gt;
&lt;p&gt;但是这里需要注意两点：&lt;/p&gt;
&lt;p&gt;１. 如果还有缓存的空间，那么，没有命中的对象会被存储到缓存中来。&lt;/p&gt;
&lt;p&gt;２. 如果缓存慢了，而又没有命中缓存，那么就会按照某一种策略，把缓存中的旧对象踢出，而把新的对象加入缓存池。而这些策略统称为*替代策略*（缓存算法），这些策略会决定到底应该提出哪些对象。&lt;/p&gt;
&lt;h4&gt;存储成本：&lt;/h4&gt;
&lt;p&gt;当没有命中时，我们会从数据库取出数据，然后放入缓存。而把这个数据放入缓存所需要的时间和空间，就是存储成本。&lt;/p&gt;
&lt;h4&gt;索引成本：&lt;/h4&gt;
&lt;p&gt;和存储成本相仿。&lt;/p&gt;
&lt;h4&gt;失效：&lt;/h4&gt;
&lt;p&gt;当存在缓存中的数据需要更新时，就意味着缓存中的这个数据失效了。&lt;/p&gt;
&lt;h4&gt;替代策略：&lt;/h4&gt;
&lt;p&gt;当缓存没有命中时，并且缓存容量已经满了，就需要在缓存中踢出一个老的条目，加入一条新的条目，而到底应该踢出什么条目，就由替代策略决定。&lt;/p&gt;
&lt;h4&gt;最优替代策略：&lt;/h4&gt;
&lt;p&gt;最优的替代策略就是想把缓存中最没用的条目给踢出去，但是未来是不能够被预知的，所以这种策略是不可能实现的。但是有很多策略，都是朝着这个目前去努力。&lt;/p&gt;
&lt;h1&gt;缓存算法&lt;/h1&gt;
&lt;p&gt;没有人能说清哪种缓存算法优于其他的缓存算法&lt;/p&gt;
&lt;h4&gt;Least Frequently Used（LFU）：&lt;/h4&gt;
&lt;p&gt;大家好，我是 LFU，我会计算为每个缓存对象计算他们被使用的频率。我会把最不常用的缓存对象踢走。&lt;/p&gt;
&lt;h4&gt;Least Recently User（LRU）：&lt;/h4&gt;
&lt;p&gt;我是 LRU 缓存算法，我把最近最少使用的缓存对象给踢走。&lt;/p&gt;
&lt;p&gt;我总是需要去了解在什么时候，用了哪个缓存对象。如果有人想要了解我为什么总能把最近最少使用的对象踢掉，是非常困难的。&lt;/p&gt;
&lt;p&gt;浏览器就是使用了我（LRU）作为缓存算法。新的对象会被放在缓存的顶部，当缓存达到了容量极限，我会把底部的对象踢走，而技巧就是：我会把最新被访问的缓存对象，放到缓存池的顶部。&lt;/p&gt;
&lt;p&gt;所以，经常被读取的缓存对象就会一直呆在缓存池中。有两种方法可以实现我，array 或者是 linked list。&lt;/p&gt;
&lt;p&gt;我的速度很快，我也可以被数据访问模式适配。我有一个大家庭，他们都可以完善我，甚至做的比我更好（我确实有时会嫉妒，但是没关系）。我家庭的一些成员包括 LRU2 和 2Q，他们就是为了完善 LRU 而存在的。&lt;/p&gt;
&lt;h4&gt;Least Recently Used 2（LRU2）：&lt;/h4&gt;
&lt;p&gt;我是 Least Recently Used 2，有人叫我最近最少使用 twice，我更喜欢这个叫法。我会把被两次访问过的对象放入缓存池，当缓存池满了之后，我会把有两次最少使用的缓存对象踢走。因为需要跟踪对象2次，访问负载就会随着缓存池的增加而增加。如果把我用在大容量的缓存池中，就会有问题。另外，我还需要跟踪那么不在缓存的对象，因为他们还没有被第二次读取。我比LRU好，而且是 adoptive to access 模式 。&lt;/p&gt;
&lt;h4&gt;Two Queues（2Q）：&lt;/h4&gt;
&lt;p&gt;我是 Two Queues；我把被访问的数据放到 LRU 的缓存中，如果这个对象再一次被访问，我就把他转移到第二个、更大的 LRU 缓存。&lt;/p&gt;
&lt;p&gt;我踢走缓存对象是为了保持第一个缓存池是第二个缓存池的1/3。当缓存的访问负载是固定的时候，把 LRU 换成 LRU2，就比增加缓存的容量更好。这种机制使得我比 LRU2 更好，我也是 LRU 家族中的一员，而且是 adoptive to access 模式 。&lt;/p&gt;
&lt;h4&gt;Adaptive Replacement Cache（ARC）：&lt;/h4&gt;
&lt;p&gt;我是 ARC，有人说我是介于 LRU 和 LFU 之间，为了提高效果，我是由2个 LRU 组成，第一个，也就是 L1，包含的条目是最近只被使用过一次的，而第二个 LRU，也就是 L2，包含的是最近被使用过两次的条目。因此， L1 放的是新的对象，而 L2 放的是常用的对象。所以，别人才会认为我是介于 LRU 和 LFU 之间的，不过没关系，我不介意。&lt;/p&gt;
&lt;p&gt;我被认为是性能最好的缓存算法之一，能够自调，并且是低负载的。我也保存着历史对象，这样，我就可以记住那些被移除的对象，同时，也让我可以看到被移除的对象是否可以留下，取而代之的是踢走别的对象。我的记忆力很差，但是我很快，适用性也强。&lt;/p&gt;
&lt;h4&gt;Most Recently Used（MRU）：&lt;/h4&gt;
&lt;p&gt;我是 MRU，和 LRU 是对应的。我会移除最近最多被使用的对象，你一定会问我为什么。好吧，让我告诉你，当一次访问过来的时候，有些事情是无法预测的，并且在缓存系统中找出最少最近使用的对象是一项时间复杂度非常高的运算，这就是为什么我是最好的选择。&lt;/p&gt;
&lt;p&gt;我是数据库内存缓存中是多么的常见！每当一次缓存记录的使用，我会把它放到栈的顶端。当栈满了的时候，你猜怎么着？我会把栈顶的对象给换成新进来的对象！&lt;/p&gt;
&lt;h4&gt;First in First out（FIFO）：&lt;/h4&gt;
&lt;p&gt;我是先进先出，我是一个低负载的算法，并且对缓存对象的管理要求不高。我通过一个队列去跟踪所有的缓存对象，最近最常用的缓存对象放在后面，而更早的缓存对象放在前面，当缓存容量满时，排在前面的缓存对象会被踢走，然后把新的缓存对象加进去。我很快，但是我并不适用。&lt;/p&gt;
&lt;h4&gt;Second Chance：&lt;/h4&gt;
&lt;p&gt;大家好，我是 second chance，我是通过 FIFO 修改而来的，被大家叫做 second chance 缓存算法，我比 FIFO 好的地方是我改善了 FIFO 的成本。我是 FIFO 一样也是在观察队列的前端，但是很FIFO的立刻踢出不同，我会检查即将要被踢出的对象有没有之前被使用过的标志（1一个 bit 表示），没有没有被使用过，我就把他踢出；否则，我会把这个标志位清除，然后把这个缓存对象当做新增缓存对象加入队列。你可以想象就这就像一个环队列。当我再一次在队头碰到这个对象时，由于他已经没有这个标志位了，所以我立刻就把他踢开了。我在速度上比 FIFO 快。&lt;/p&gt;
&lt;h4&gt;CLock：&lt;/h4&gt;
&lt;p&gt;我是 Clock，一个更好的 FIFO，也比 second chance 更好。因为我不会像 second chance 那样把有标志的缓存对象放到队列的尾部，但是也可以达到 second chance 的效果。&lt;/p&gt;
&lt;p&gt;我持有一个装有缓存对象的环形列表，头指针指向列表中最老的缓存对象。当缓存 miss 发生并且没有新的缓存空间时，我会问问指针指向的缓存对象的标志位去决定我应该怎么做。如果标志是0，我会直接用新的缓存对象替代这个缓存对象；如果标志位是1，我会把头指针递增，然后重复这个过程，知道新的缓存对象能够被放入。我比 second chance 更快。&lt;/p&gt;
&lt;h4&gt;Simple time-based：&lt;/h4&gt;
&lt;p&gt;我是 simple time-based 缓存算法，我通过绝对的时间周期去失效那些缓存对象。对于新增的对象，我会保存特定的时间。我很快，但是我并不适用。&lt;/p&gt;
&lt;h4&gt;Extended time-based expiration：&lt;/h4&gt;
&lt;p&gt;我是 extended time-based expiration 缓存算法，我是通过相对时间去失效缓存对象的；对于新增的缓存对象，我会保存特定的时间，比如是每5分钟，每天的12点。&lt;/p&gt;
&lt;h4&gt;Sliding time-based expiration：&lt;/h4&gt;
&lt;p&gt;我是 sliding time-based expiration，与前面不同的是，被我管理的缓存对象的生命起点是在这个缓存的最后被访问时间算起的。我很快，但是我也不太适用。&lt;/p&gt;
&lt;h4&gt;其他的缓存算法还考虑到了下面几点：&lt;/h4&gt;
&lt;p&gt;成本：如果缓存对象有不同的成本，应该把那些难以获得的对象保存下来。&lt;/p&gt;
&lt;p&gt;容量：如果缓存对象有不同的大小，应该把那些大的缓存对象清除，这样就可以让更多的小缓存对象进来了。&lt;/p&gt;
&lt;p&gt;时间：一些缓存还保存着缓存的过期时间。电脑会失效他们，因为他们已经过期了。&lt;/p&gt;
&lt;p&gt;根据缓存对象的大小而不管其他的缓存算法可能是有必要的。&lt;/p&gt;

&lt;p&gt;在这一部分中，我们来看看如何实现这些著名的缓存算法。以下的代码只是示例用的，如果你想自己实现缓存算法，可能自己还得加上一些额外的工作。&lt;/p&gt;

&lt;h4&gt;Random Cache&lt;/h4&gt;
&lt;p&gt;我是随机缓存，我随意的替换缓存实体，没人敢抱怨。你可以说那个被替换的实体很倒霉。通过这些行为，我随意的去处缓存实体。我比 FIFO 机制好，在某些情况下，我甚至比 LRU 好，但是，通常LRU都会比我好。&lt;/p&gt;

&lt;h4&gt;看看缓存元素（缓存实体）&lt;/h4&gt;
&lt;p&gt;public class CacheElement&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;private Object objectValue;&lt;/p&gt;
&lt;p&gt;private Object objectKey;&lt;/p&gt;
&lt;p&gt;private int index;&lt;/p&gt;
&lt;p&gt;private int hitCount; // getters and setters&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;这个缓存实体拥有缓存的key和value，这个实体的数据结构会被以下所有缓存算法用到。&lt;/p&gt;
&lt;h4&gt;缓存算法的公用代码&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// get the entry from the table&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// If we have the entry already in our table&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// then get it and replace only its value.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;err&quot;&gt;｝&lt;/span&gt;
 	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面的代码会被所有的缓存算法实现用到。这段代码是用来检查缓存元素是否在缓存中了，如果是，我们就替换它，但是如果我们找不到这个 key 对应的缓存，我们会怎么做呢？那我们就来深入的看看会发生什么吧！&lt;/p&gt;

&lt;h4&gt;看看随机缓存的实现&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Just replace the value.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// If we haven&#39;t filled the cache yet, put it at the end.&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Otherwise, replace a random entry.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextFloat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;看看FIFO缓算法的实现&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 	 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Objectkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 	 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Just replace the value.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 	 &lt;span class=&quot;c1&quot;&gt;// If we haven&#39;t filled the cache yet, put it at the end.&lt;/span&gt;
 	 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Otherwise, replace the current pointer,&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// entry with the new one.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// in order to make Circular FIFO&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4&gt;看看LFU缓存算法的实现&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHitCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHitCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 	 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Just replace the value.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removeLfuElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeLfuElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getElementsFromTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leastElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leastHit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leastElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;leastHit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowestElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lowestElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;lowestElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHitCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowestElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHitCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;lowestElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 	 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lowestElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最重点的代码，就应该是 leastHit 这个方法，这段代码就是把&lt;/p&gt;
&lt;p&gt;hitCount 最低的元素找出来，然后删除，给新进的缓存元素留位置。&lt;/p&gt;
&lt;h4&gt;看看LRU缓存算法实现&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;moveToFront&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;nextIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;prevIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// Only the head has a prev entry that is an invalid index&lt;/span&gt;
 	 &lt;span class=&quot;c1&quot;&gt;// so we don&#39;t check.&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prevIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// Make sure index is valid. If it isn&#39;t, we&#39;re at the tail&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// and don&#39;t set prev[next].&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 	 &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 	 &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   	 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Just replace the value, but move it to the front.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;moveToFront&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// If we haven&#39;t filled the cache yet, place in next available&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// spot and move to front.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_numEntries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;moveToFront&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// We replace the tail of the list.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;moveToFront&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这段代码的逻辑如 LRU算法 的描述一样，把再次用到的缓存提取到最前面，而每次删除的都是最后面的元素。&lt;/p&gt;
&lt;h4&gt;结论&lt;/h4&gt;
&lt;p&gt;我们已经看到 LFU缓存算法 和 LRU缓存算法的实现方式，至于如何实现，采用数组还是 LinkedHashMap，都由你决定，不够我一般是小的缓存容量用数组，大的用 LinkedHashMap。&lt;/p&gt;

&lt;p3&gt;几个著名Java开源缓存框架介绍&lt;/p3&gt;
&lt;p&gt;1.OSCache&lt;/p&gt;

&lt;p&gt;　　OSCache是个一个广泛采用的高性能的J2EE缓存框架，OSCache能用于任何Java应用程序的普通的缓存解决方案。 OSCache有以下特点：缓存任何对象，你可以不受限制的缓存部分jsp页面或HTTP请求，任何java对象都可以缓存。拥有全面的API–OSCache API给你全面的程序来控制所有的OSCache特性。永久缓存–缓存能随意的写入硬盘，因此允许昂贵的创建(expensive-to-create)数据来保持缓存，甚至能让应用重启。支持集群–集群缓存数据能被单个的进行参数配置，不需要修改代码。缓存记录的过期–你可以有最大限度的控制缓存对象的过期，包括可插入式的刷新策略(如果默认性能不需要时)。&lt;/p&gt;

&lt;p&gt;2.Java Caching system&lt;/p&gt;

&lt;p&gt;　　JSC(Java Caching system)是一个用分布式的缓存系统，是基于服务器的java应用程序。它是通过提供管理各种动态缓存数据来加速动态web应用。 JCS和其他缓存系统一样，也是一个用于高速读取，低速写入的应用程序。动态内容和报表系统能够获得更好的性能。如果一个网站，有重复的网站结构，使用间歇性更新方式的数据库(而不是连续不断的更新数据库)，被重复搜索出相同结果的，就能够通过执行缓存方式改进其性能和伸缩性。&lt;/p&gt;

&lt;p&gt;3.EHCache&lt;/p&gt;

&lt;p&gt;　　EHCache 是一个纯java的在进程中的缓存，它具有以下特性：快速，简单，为Hibernate2.1充当可插入的缓存，最小的依赖性，全面的文档和测试。&lt;/p&gt;

&lt;p&gt;4.JCache&lt;/p&gt;

&lt;p&gt;　　JCache是个开源程序，正在努力成为JSR-107开源规范，JSR-107规范已经很多年没改变了。这个版本仍然是构建在最初的功能定义上。&lt;/p&gt;

&lt;p&gt;5.ShiftOne&lt;/p&gt;

&lt;p&gt;　　ShiftOne Java Object Cache是一个执行一系列严格的对象缓存策略的Java lib，就像一个轻量级的配置缓存工作状态的框架。&lt;/p&gt;

&lt;p&gt;6.SwarmCache&lt;/p&gt;

&lt;p&gt;　　SwarmCache是一个简单且有效的分布式缓存，它使用IP multicast与同一个局域网的其他主机进行通讯，是特别为集群和数据驱动web应用程序而设计的。SwarmCache能够让典型的读操作大大超过写操作的这类应用提供更好的性能支持。 SwarmCache使用JavaGroups来管理从属关系和分布式缓存的通讯。&lt;/p&gt;

&lt;p&gt;7.TreeCache / JBossCache&lt;/p&gt;

&lt;p&gt;　　JBossCache是一个复制的事务处理缓存，它允许你缓存企业级应用数据来更好的改善性能。缓存数据被自动复制，让你轻松进行JBoss服务器之间的集群工作。JBossCache能够通过JBoss应用服务或其他J2EE容器来运行一个MBean服务，当然，它也能独立运行。 JBossCache包括两个模块：TreeCache和TreeCacheAOP。 TreeCache –是一个树形结构复制的事务处理缓存。TreeCacheAOP –是一个“面向对象”缓存，它使用AOP来动态管理POJO(Plain Old Java Objects) 注：AOP是OOP的延续，是Aspect Oriented Programming的缩写，意思是面向方面编程。&lt;/p&gt;

&lt;p&gt;8.WhirlyCache&lt;/p&gt;

&lt;p&gt;　　Whirlycache是一个快速的、可配置的、存在于内存中的对象的缓存。它能够通过缓存对象来加快网站或应用程序的速度，否则就必须通过查询数据库或其他代价较高的处理程序来建立。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>C代码优化小贴士</title>
   <link href="http://http://coolshell.info/blog/2014/12/c-code-opt.html"/>
   <updated>2014-12-27T00:00:00+00:00</updated>
   <id>/blog/2014/12/c-code-opt</id>
   <content type="html">
&lt;p&gt;&lt;span style=&quot;color: #000000&quot;&gt;虽然对于优化C代码有很多有效的指导方针，但是对于彻底地了解编译器和你工作的机器依然无法取代，通常，加快程序的速度也会加大代码量。这些增加的代码也会影响一个程序的复杂度和可读性，这是不可接受的，比如你在一些小型的设备上编程，例如：移动设备、PDA……，这些有着严格的内存限制，于是，在优化的座右铭是:写代码在内存和速度都应该优化。&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;整型数 / Integers&lt;/h2&gt;
&lt;p&gt;在我们知道使用的数不可能是负数的时候，应该使用unsigned int取代int，一些处理器处理整数算数运算的时候unsigned int比int快，于是，在一个紧致的循环里面定义一个整型变量，最好这样写代码：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;register unsigned int variable_name;&lt;/pre&gt;
&lt;p&gt;然而，我们不能保证编译器会注意到那个register关键字，也有可能，对某种处理器来说，有没有unsigned是一样的。这两个关键字并不是可以在所有的编译器中应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;记住，整形数运算要比浮点数运算快得多，因为处理器可以直接进行整型数运算，浮点数运算需要依赖于外部的浮点数处理器或者浮点数数学库。&lt;/strong&gt;&amp;lt;p&amp;gt;我们处理小数的时候要精确点些（比如我们在做一个简单的统计程序时），要限制结果不能超过100，要尽可能晚的把它转化成浮点数。&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;还有一个整形提升的问题，比如下面这个例子：
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;size_t n = 10;
int i ;
for(i = -1; i &amp;lt; n; ++i)
{
printf(&quot;%d\n&quot;,i);
}&lt;/pre&gt;
这段代码实际上什么也不会输出，因为size_t是unsigned int类型，i会自动转换成unsigned int就变成了一个很大的正数，所以和n比较自然什么都不会输出。
&lt;/p&gt;
&lt;p&gt;在算术运算中，char和short会自动转换成int，转换的原则就是如果int类型能过包括操作数类型的所有范围，则操作数（比如unsigned short）转换成int，否则转换成unsigned int，int和long类型运算以此类推，**总是向着精度更高、位更长的类型转换。**
&lt;/p&gt;
&lt;h2&gt;除法和余数 / Division and Remainder&lt;/h2&gt;
&lt;p&gt;在标准的处理器中，根据分子和分母的不同，一个32位的除法需要20-140个时钟周期来执行完成，等于一个固定的时间加上每个位被除的时间。&lt;/p&gt;
&lt;p&gt;Time (分子/ 分母) = C0 + C1* log&lt;sub&gt;2&lt;/sub&gt; (分子/分母)&lt;/p&gt;
&lt;p&gt;= C0 + C1 * (log&lt;sub&gt;2&lt;/sub&gt; (分子) &amp;#8211; log&lt;sub&gt;2&lt;/sub&gt; (分母)).&lt;br /&gt;
现在的ARM处理器需要消耗20+4.3N个时钟周期，这是一个非常费时的操作，要尽可能的避免。在有些情况下，除法表达式可以用乘法表达是来重写。比方说，(a/b)&amp;gt;c可以写成a&amp;gt;(c*b),条件是我们已经知道b为非负数而且b*c不会超过整型数的取值范围。如果我们能够确定其中的一个操作数为unsigned，那么使用无符号除法将会更好，因为它要比有符号除法快得多。&lt;/p&gt;
&lt;h2&gt;合并除法运算和取余运算 / Combining division and remainder&lt;/h2&gt;
&lt;p&gt;在一些情况下，除法运算和取余运算都需要用到，在这种情况下，编译器会将除法运算和取余运算合并，因为除法运算总是同时返回商和余数。如果两个运算都要用到，我们可以将他们写到一起。&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;typedef unsigned int uint;
uint div32u (uint a) {
     return a / 32;
}
int div32s (int a) {
     return a / 32;
}&lt;/pre&gt;
&lt;p&gt;这两种除法都会避免调用除法函数（进行移位操作），另外，无符号的除法要比有符号的除法使用更少的指令。有符号的除法要耗费更多的时间，因为这种除法是使最终结果趋向于零的，而移位则是趋向于负无穷。&lt;/p&gt;
&lt;h2&gt;取模运算的替换 / An alternative for modulo arithmetic&lt;/h2&gt;
&lt;p&gt;我们一般使用取余运算进行取模，不过，有时候使用 if 语句来重写也是可行的。考虑下面的两个例子：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;uint modulo_func1 (uint count)
{
    return (++count % 60);
}
uint modulo_func2 (uint count)
{
    if (++count &amp;gt;= 60)
        count = 0;
    return (count);
}&lt;/pre&gt;
&lt;p&gt;第二个例子要比第一个更可取，因为由它产生的代码会更快，注意：这只是在count取值范围在0 – 59之间的时候才行。&lt;/p&gt;
&lt;p&gt;但是我们可以使用如下的代码（笔者补充）实现等价的功能：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;uint modulo_func3 (uint count)
{
    if (++count &amp;gt;= 60)
        count %= 60;
    return (count);
}&lt;/pre&gt;
&lt;h2&gt;使用数组索引 / Using array indices&lt;/h2&gt;
&lt;p&gt;假设你要依据某个变量的值，设置另一个变量的取值为特定的字符，你可能会这样做：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;switch(queue) {
    case 0 :   letter = &amp;#039;W&amp;#039;;
        break;
    case 1 :   letter = &amp;#039;S&amp;#039;;
        break;
    case 2 :   letter = &amp;#039;U&amp;#039;;
        break;
}&lt;/pre&gt;
&lt;p&gt;或者这样：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;if(queue == 0)
    letter = &amp;#039;W&amp;#039;;
else if ( queue == 1 )
    letter = &amp;#039;S&amp;#039;;
else
    letter = &amp;#039;U&amp;#039;;&lt;/pre&gt;
&lt;p&gt;有一个简洁且快速的方式是简单的将变量的取值做成一个字符串索引，例如：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;static char *classes = &amp;quot;WSU&amp;quot;;
letter = classes[queue];&lt;/pre&gt;
&lt;h2&gt; 全局变量 / Global variables&lt;/h2&gt;
&lt;p&gt;全局变量不会被分配在寄存器上，修改全局变量需要通过指针或者调用函数的方式间接进行。所以编译器不会将全局变量存储在寄存器中，那样会带来额外的、不必要的负担和存储空间。所以在比较关键的循环中，我们要不使用全局变量。&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如果一个函数要频繁的使用全局变量，我们可以使用局部变量，作为全局变量的拷贝，这样就可以使用寄存器了。条件是本函数调用的任何子函数不使用这些全局变量。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;int f(void);
int g(void);
int errs;
void test1(void)
{
    errs += f();
    errs += g();
}
void test2(void)
{
    int localerrs = errs;
    localerrs += f();
    localerrs += g();
    errs = localerrs;
}&lt;/pre&gt;
&lt;p&gt;可以看到test1()中每次加法都需要读取和存储全局变量errs，而在test2()中，localerrs分配在寄存器上，只需要一条指令。&lt;/p&gt;
&lt;h2&gt;使用别名 / Using Aliases&lt;/h2&gt;
&lt;p&gt;考虑下面的例子：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;void func1( int *data )
{
    int i;
    for(i = 0; i &amp;lt; 10; i++)
        anyfunc(*data, i);
}&lt;/pre&gt;
&lt;p&gt;即使*data从来没有变化，编译器却不知道anyfunc()没有修改它，于是程序每次用到它的时候，都要把它从内存中读出来，可能它只是某些变量的别名，这些变量在程序的其他部分被修改。如果能够确定它不会被改变，我们可以这样写：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;void func1( int *data )
{
int i;
int localdata;
localdata = *data;
for(i=0; i&amp;lt;10; i++)
anyfunc(localdata, i);
}&lt;/pre&gt;
&lt;p&gt;这样会给编译器优化工作更多的选择余地。&lt;/p&gt;
&lt;h2&gt;活跃变量和泄漏 / Live variables and spilling&lt;/h2&gt;
&lt;p&gt;寄存器的数量在每个处理器当中都是固定的，所以在程序的某个特定的位置，可以保存在寄存器中的变量的数量是有限制的。有些编译器支持“生命周期分割”（live-range splitting），也就是说在函数的不同部分，变量可以被分配到不同的寄存器或者内存中。变量的生存范围被定义成：起点是对该变量的一次空间分配，终点是在下次空间分配之前的最后一次使用之间。在这个范围内，变量的值是合法的，是活的。在生存范围之外，变量不再被使用，是死的，它的寄存器可以供其他变量使用，这样，编译器就可以安排更多的变量到寄存器当中。&lt;br /&gt;
可分配到寄存器的变量需要的寄存器数量等于经过生命范围重叠的变量的数目，如果这个数目超过可用的寄存器的数量，有些变量就必须被暂时的存储到内存中。这种处理叫做“泄漏(spilling)”。&lt;br /&gt;
编译器优先释放最不频繁使用的变量，将释放的代价降到最低。可以通过以下方式避免变量的“释放”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限制活跃变量的最大数目：通常可以使用简单小巧的表达式，在函数内部不使用太多的变量。把大的函数分割成更加简单的、更加小巧的多个函数，也可能会有所帮助。&lt;/li&gt;
&lt;li&gt;使用关键字register修饰最经常使用的变量：告诉编译器这个变量将会被经常用到，要求编译器使用非常高的优先级将此变量分配到寄存器中。尽管如此，在某些情况下，变量还是可能被泄漏。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;变量类型 / Variable Types&lt;/h2&gt;
&lt;p&gt;C编译器支持基本的变量类型：char、short、int、long(signed、unsigned)、float、double。为变量定义最恰当的类型，非常重要，因为这样可以减少代码和数据的长度，可以非常显著的提高效率。&lt;/p&gt;
&lt;h2&gt;局部变量 / Local variables&lt;/h2&gt;
&lt;p&gt;如果可能，局部变量要避免使用char和short。对于char和short类型，编译器在每次分配空间以后，都要将这种局部变量的尺寸减少到8位或16位。这对于符号变量来说称为符号扩展，对无符号变量称为无符号扩展。这种操作是通过将寄存器左移24或16位，然后再有符号（或无符号的）右移同样的位数来实现的，需要两条指令（无符号字节变量的无符号扩展需要一条指令）。&lt;br /&gt;
这些移位操作可以通过使用int和unsigned int的局部变量来避免。这对于那些首先将数据调到局部变量然后利用局部变量进行运算的情况尤其重要。即使数据以8位或16位的形式输入或输出，把他们当作32位来处理仍是有意义的。&lt;br /&gt;
我们来考虑下面的三个例子函数：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;int wordinc (int a)
{ 
    return a + 1;
}
short shortinc (short a)
{ 
    return a + 1;
}
char charinc (char a)
{ 
    return a + 1;
}&lt;/pre&gt;
&lt;p&gt;他们的运算结果是相同的，但是第一个代码片断要比其他片断运行的要快。&lt;/p&gt;
&lt;h2&gt;指针 / Pointers&lt;/h2&gt;
&lt;p&gt;如果可能，我们应该使用结构体的引用作为参数，也就是结构体的指针，否则，整个结构体就会被压入堆栈，然后传递，这会降低速度。程序适用值传递可能需要几K字节，而一个简单的指针也可以达到同样的目的，只需要几个字节就可以了。&lt;br /&gt;
如果在函数内部不会改变结构体的内容，那么就应该将参数声明为const型的指针。举个例子：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;void print_data_of_a_structure (const Thestruct  *data_pointer)
{
     ...printf contents of the structure...
}&lt;/pre&gt;
&lt;p&gt;这个例子代码告知编译器在函数内部不会改变外部结构体的内容，访问他们的时候，不需要重读。还可以确保编译器捕捉任何修改这个只读结构体的代码，给结构体以额外的保护。&lt;/p&gt;
&lt;h2&gt;指针链 / Pointer chains&lt;/h2&gt;
&lt;p&gt;指针链经常被用来访问结构体的信息，比如，下面的这段常见的代码：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;typedef struct { int x, y, z; } Point3;
typedef struct { Point3 *pos, *direction; } Object;
void InitPos1(Object *p)
{
    p-&amp;gt;pos-&amp;gt;x = 0;
    p-&amp;gt;pos-&amp;gt;y = 0;
    p-&amp;gt;pos-&amp;gt;z = 0;
}&lt;/pre&gt;
&lt;p&gt;代码中，处理器在每次赋值操作的时候都要重新装载p-&amp;gt;pos，因为编译器不知道p-&amp;gt;pos-&amp;gt;x不是p-&amp;gt;pos的别名。更好的办法是将p-&amp;gt;pos缓存成一个局部变量，如下：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;void InitPos2(Object *p)
{ 
    Point3 *pos = p-&amp;gt;pos;
    pos-&amp;gt;x = 0; 
    pos-&amp;gt;y = 0;
    pos-&amp;gt;z = 0;
}&lt;/pre&gt;
&lt;p&gt;另一个可能的方法是将Point3结构体包含在Object结构体中，完全避免指针的使用。&lt;/p&gt;
&lt;h2&gt;条件的执行 / Conditional Execution&lt;/h2&gt;
&lt;p&gt;条件执行主要用在if语句中，同时也会用到由关系运算(&amp;lt;,==,&amp;gt;等)或bool运算(&amp;amp;&amp;amp;, !等)组成的复杂的表达式。尽可能的保持if和else语句的简单是有好处的，这样才能很好的条件化。关系表达式应该被分成包含相似条件的若干块。&lt;br /&gt;
下面的例子演示了编译器如何使用条件执行：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;int g(int a, int b, int c, int d)
{
    if(a &amp;gt; 0 &amp;amp;&amp;amp; b &amp;gt; 0 &amp;amp;&amp;amp; c &amp;lt; 0 &amp;amp;&amp;amp; d &amp;lt; 0)  //分组化的条件被捆绑在一起
        return a + b + c + d;
    return -1;
}&lt;/pre&gt;
&lt;p&gt;条件被分组，便以其能够条件化他们。&lt;/p&gt;
&lt;h2&gt;Boolean表达式和范围检查 / Boolean Expressions &amp;amp; Range checking&lt;/h2&gt;
&lt;p&gt;有一种常见的boolean表达式被用来检查是否一个变量取值在某个特定的范围内，比方说，检查一个点是否在一个窗口内。&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;bool PointInRectangelArea (Point p, Rectangle *r)
{
    return (p.x &amp;gt;= r-&amp;gt;xmin &amp;amp;&amp;amp; p.x &amp;lt; r-&amp;gt;xmax &amp;amp;&amp;amp; p.y &amp;gt;= r-&amp;gt;ymin &amp;amp;&amp;amp; p.y &amp;lt; r-&amp;gt;ymax);
}&lt;/pre&gt;
&lt;p&gt;这里还有一个更快的方法：把(x &amp;gt;= min &amp;amp;&amp;amp; x &amp;lt; max) 转换成 (unsigned)(x-min) &amp;lt; (max-min). 尤其是min为0时，更为有效。下面是优化后的代码：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;bool PointInRectangelArea (Point p, Rectangle *r)
{
    return ((unsigned) (p.x - r-&amp;gt;xmin) &amp;lt; r-&amp;gt;xmax &amp;amp;&amp;amp; (unsigned) (p.y - r-&amp;gt;ymin) &amp;lt; r-&amp;gt;ymax);
}&lt;/pre&gt;
&lt;h2&gt;Boolean表达式&amp;amp;与零的比较 / Boolean Expressions &amp;amp; Compares with zero&lt;/h2&gt;
&lt;p&gt;在比较(CMP)指令后，相应的处理器标志位就会被设置。这些标志位也可以被其他的指令设置，诸如MOV, ADD, AND, MUL, 也就是基本的数学和逻辑运算指令（数据处理指令）。假如一条数据处理指令要设置这些标志位，那么N和Z标志位的设置方法跟把数字和零比较的设置方法是一样的。N标志位表示结果是不是负数，Z标志位表示结果是不是零。&lt;br /&gt;
在C语言中，处理器中的N和Z标志位对应的有符号数的关系运算符是x &amp;lt; 0, x &amp;gt;= 0, x == 0, x != 0，无符号数对应的是x == 0, x != 0 (or x &amp;gt; 0)。&lt;br /&gt;
C语言中，每用到一个关系运算符，编译器就会产生一个比较指令。如果关系运算符是上面的其中一个，在数据处理指令紧跟比较指令的情况下，编译器就会将比较指令优化掉。比如：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;int aFunction(int x, int y)
{
    if (x + y &amp;lt; 0)
        return 1;
    else
        return 0;
}&lt;/pre&gt;
&lt;p&gt;这样做，会在关键循环中节省比较指令，使代码长度减少，效率增加。C语言中没有借位(carry)标志位和溢出(overflow)标志位的概念，所以如果不使用内嵌汇编语言，要访问C和V标志位是不可能的。尽管如此，编译器支持借位标志位（无符号数溢出），比方说：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;int sum(int x, int y)
{
     int res;
     res = x + y;
     if ((unsigned) res &amp;lt; (unsigned) x) // carry set?  //
        res++;
     return res;
}&lt;/pre&gt;
&lt;h2&gt;惰性评估计算 / Lazy Evaluation Exploitation&lt;/h2&gt;
&lt;p&gt;在类似与这样的 if(a&amp;gt;10 &amp;amp;&amp;amp; b=4) 语句中, 确保AND表达式的第一部分最有可能为false, 结果第二部分极有可能不被执行.&lt;/p&gt;
&lt;p&gt;用switch() 代替if&amp;#8230;else&amp;#8230;，在条件选择比较多的情况下，可以用if…else…else…，像这样：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;if( val == 1)
    dostuff1();
else if (val == 2)
    dostuff2();
else if (val == 3)
    dostuff3();&lt;/pre&gt;
&lt;p&gt;使用switch可以更快：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;switch( val )
{
    case 1: dostuff1(); break;
    case 2: dostuff2(); break;
    case 3: dostuff3(); break;
}&lt;/pre&gt;
&lt;p&gt;在if语句中，即使是最后一个条件成立，也要先判断所有前面的条件是否成立。Switch语句能够去除这些额外的工作。如果你不得不使用if…else，那就把最可能的成立的条件放在前面。&lt;/p&gt;
&lt;h2&gt;二分分解 / Binary Breakdown&lt;/h2&gt;
&lt;p&gt;把判断条件做成二进制的风格，比如，不要使用下面的列表：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;if(a == 1) { 
    } else if(a == 2) { 
    } else if(a == 3) { 
    } else if(a == 4) { 
    } else if(a == 5) { 
    } else if(a == 6) { 
    } else if(a == 7) { 
    } else if(a == 8) { 
    }
}&lt;/pre&gt;
&lt;p&gt;而采用：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;if(a &amp;lt;= 4) { 
    if(a == 1) { 
    } else if(a == 2) { 
    } else if(a == 3) { 
    } else if(a == 4) { 
    } 
} else { 
    if(a == 5) { 
    } else if(a == 6) { 
    } else if(a == 7) { 
    } else if(a == 8) { 
    } 
}&lt;/pre&gt;
&lt;p&gt;甚至：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;if(a &amp;lt;= 4) { 
    if(a &amp;lt;= 2) { 
        if(a == 1) { 
                /* a is 1 */ 
        } else { 
                /* a must be 2 */ 
        } 
    } else { 
        if(a == 3) { 
                /* a is 3 */ 
        } else { 
                /* a must be 4 */ 
        } 
    } 
} else { 
    if(a &amp;lt;= 6) { 
        if(a == 5) { 
                /* a is 5 */ 
        } else { 
                /* a must be 6 */ 
        } 
    } else { 
        if(a == 7) { 
                /* a is 7 */ 
        } else { 
                /* a must be 8 */ 
        } 
    } 
}&lt;/pre&gt;
&lt;p&gt;慢速、低效：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;c = getch();
switch(c){
    case &amp;#039;A&amp;#039;: {
        do something;  
        break;  
    } 
    case &amp;#039;H&amp;#039;: {
        do something;
        break;
    }  
    case &amp;#039;Z&amp;#039;: { 
        do something; 
        break; 
    }
}&lt;/pre&gt;
&lt;p&gt;快速、高效：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;c = getch();
switch(c) {
    case 0: {
        do something;
        break;
    }  
    case 1: {
        do something; 
        break;
    } 
    case 2: {
        do something; 
        break; 
    }
}&lt;/pre&gt;
&lt;p&gt;以上是两个case语句之间的比较&lt;/p&gt;
&lt;h2&gt;switch语句和查找表 / Switch statement vs. lookup tables&lt;/h2&gt;
&lt;p&gt;switch语句通常用于以下情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用几个函数中的一个&lt;/li&gt;
&lt;li&gt;设置一个变量或返回值&lt;/li&gt;
&lt;li&gt;执行几个代码片断中的一个&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果case表示是密集的，在使用switch语句的前两种情况中，可以使用效率更高的查找表。比如下面的两个实现汇编代码转换成字符串的例程：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;char * Condition_String1(int condition) {
    switch(condition) {
         case 0: return &amp;quot;EQ&amp;quot;;
         case 1: return &amp;quot;NE&amp;quot;;
         case 2: return &amp;quot;CS&amp;quot;;
         case 3: return &amp;quot;CC&amp;quot;;
         case 4: return &amp;quot;MI&amp;quot;;
         case 5: return &amp;quot;PL&amp;quot;;
         case 6: return &amp;quot;VS&amp;quot;;
         case 7: return &amp;quot;VC&amp;quot;;
         case 8: return &amp;quot;HI&amp;quot;;
         case 9: return &amp;quot;LS&amp;quot;;
         case 10: return &amp;quot;GE&amp;quot;;
         case 11: return &amp;quot;LT&amp;quot;;
         case 12: return &amp;quot;GT&amp;quot;;
         case 13: return &amp;quot;LE&amp;quot;;
         case 14: return &amp;quot;&amp;quot;;
         default: return 0;
    }
}
char * Condition_String2(int condition) {
    if((unsigned) condition &amp;gt;= 15) return 0;
    return
          &amp;quot;EQNECSCCMIPLVSVCHILSGELTGTLE&amp;quot; +
           3 * condition;
}&lt;/pre&gt;
&lt;p&gt;第一个例程需要240个字节，第二个只需要72个。&lt;/p&gt;
&lt;h2&gt;循环终止 / Loop termination&lt;/h2&gt;
&lt;p&gt;如果不加留意地编写循环终止条件，就可能会给程序带来明显的负担。我们应该尽量使用“倒数到零”的循环，使用简单的循环终止条件。循环终止条件相对简单，程序在执行的时候也会消耗相对少的时间。拿下面两个计算n!的例子来说，第一个例子使用递增循环，第二个使用递减循环。&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;int fact1_func (int n)
{
    int i, fact = 1;
    for (i = 1; i &amp;lt;= n; i++)
        fact *= i;
    return (fact);
}

int fact2_func(int n)
{
    int i, fact = 1;
    for (i = n; i != 0; i--)
        fact *= i;
    return (fact);
}&lt;/pre&gt;
&lt;p&gt;结果是，第二个例子要比第一个快得多。&lt;/p&gt;
&lt;h2&gt;更快的for()循环 / Faster for() loops&lt;/h2&gt;
&lt;p&gt;这是一个简单而有效的概念，通常情况下，我们习惯把for循环写成这样：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;for( i = 0;  i &amp;lt; 10;  i++){ ... }&lt;/pre&gt;
&lt;p&gt;i 值依次为：0,1,2,3,4,5,6,7,8,9&lt;/p&gt;
&lt;p&gt;在不在乎循环计数器顺序的情况下，我们可以这样：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;for( i = 10;  i--; ) { ... }&lt;/pre&gt;
&lt;p&gt;i 值依次为: 9,8,7,6,5,4,3,2,1,0,而且循环要更快&lt;/p&gt;
&lt;p&gt;这种方法是可行的，因为它是用更快的i&amp;#8211;作为测试条件的，也就是说“i是否为非零数，如果是减一，然后继续”。相对于原先的代码，处理器不得不“把i减去10，结果是否为非零数，如果是，增加i，然后继续”，在紧密循环(tight loop)中，这会产生显著的区别。&lt;br /&gt;
这种语法看起来有一点陌生，却完全合法。循环中的第三条语句是可选的（无限循环可以写成这样for(;;)）,下面的写法也可以取得同样的效果：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;for(i = 10;  i;  i--){}&lt;/pre&gt;
&lt;p&gt;或者:&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;for(i = 10;  i != 0;  i--){}&lt;/pre&gt;
&lt;p&gt;我们唯一要小心的地方是要记住循环需要停止在0（如果循环是从50-80，这样做就不行了），而且循环的计数器为倒计数方式。&lt;/p&gt;
&lt;p&gt;另外，我们还可以把计数器分配到寄存器上，可以产生更为有效的代码。这种将循环计数器初始化成循环次数，然后递减到零的方法，同样适用于while和do语句。&lt;/p&gt;
&lt;h2&gt;混合循环/ Loop jamming&lt;/h2&gt;
&lt;p&gt;在可以使用一个循环的场合，决不要使用两个。但是如果你要在循环中进行大量的工作，超过处理器的指令缓冲区，在这种情况下，使用两个分开的循环可能会更快，因为有可能这两个循环都被完整的保存在指令缓冲区里了。&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;//原先的代码
for(i = 0; i &amp;lt; 100; i++){
    stuff();
}
for(i = 0; i &amp;lt; 100; i++){
    morestuff();
}        
//更好的做法
for(i = 0; i &amp;lt; 100; i++){
    stuff();
    morestuff();
}&lt;/pre&gt;
&lt;h2&gt;函数循环 / Function Looping&lt;/h2&gt;
&lt;p&gt;调用函数的时候，在性能上就会付出一定的代价。不光要改变程序指针，还要将那些正在使用的变量压入堆栈，分配新的变量空间。为了提高程序的效率，在程序的函数结构上，有很多工作可以做。保证程序的可读性的同时，还要尽量控制程序的大小。&lt;br /&gt;
如果一个函数在一个循环中被频繁调用，就可以考虑将这个循环放在函数的里面，这样可以免去重复调用函数的负担，比如：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;for(i = 0 ; i &amp;lt; 100 ; i++) 
{ 
    func(t,i); 
}
void func(int w, d) 
{ 
    lots of stuff. 
}&lt;/pre&gt;
&lt;p&gt;可以写成：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;func(t);
void func(w) 
{ 
    for(i = 0; i &amp;lt; 100; i++) { 
        //lots of stuff. 
    } 
}&lt;/pre&gt;
&lt;h2&gt;展开循环 / Loop unrolling&lt;/h2&gt;
&lt;p&gt;为了提高效率，可以将小的循环解开，不过这样会增加代码的尺寸。循环被拆开后，会降低循环计数器更新的次数，减少所执行的循环的分支数目。如果循环只重复几次，那它完全可以被拆解开，这样，由循环所带来的额外开销就会消失。&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;for(i = 0; i &amp;lt; 3; i++){ 
    something(i);
}
//更高效的方式：
something(0);
something(1);
something(2);&lt;/pre&gt;
&lt;p&gt;因为在每次的循环中，i 的值都会增加，然后检查是否有效。编译器经常会把这种简单的循环解开，前提是这些循环的次数是固定的。对于这样的循环：&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;for(i = 0; i &amp;lt;  limit; i++) { ... }&lt;/pre&gt;
&lt;p&gt;就不可能被拆解，因为我们不知道它循环的次数到底是多少。不过，将这种类型的循环拆解开并不是不可能的。&lt;/p&gt;
&lt;p&gt;与简单循环相比，下面的代码的长度要长很多，然而具有高得多的效率。选择8作为分块大小，只是用来演示，任何合适的长度都是可行的。例子中，循环的成立条件每八次才被检验一次，而不是每次都要检验。如果需要处理的数组的大小是确定的，我们就可以使用数组的大小作为分块的大小（或者是能够整除数组长度的数值）。不过，分块的大小跟系统的缓存大小有关。&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;#include&amp;lt;stdio.H&amp;gt; #define BLOCKSIZE (8) 
	
int main(void)
{ 
    int i = 0; 
    int limit = 33;  /* could be anything */ 
    int blocklimit;

    /* The limit may not be divisible by BLOCKSIZE, 
      go as near as we can first, then tidy up.
     */ 
    blocklimit = (limit / BLOCKSIZE) * BLOCKSIZE;

    /* unroll the loop in blocks of 8 */ 
    while(i &amp;lt; blocklimit) { 
        printf(&amp;quot;process(%d)\n&amp;quot;, i); 
        printf(&amp;quot;process(%d)\n&amp;quot;, i+1); 
        printf(&amp;quot;process(%d)\n&amp;quot;, i+2); 
        printf(&amp;quot;process(%d)\n&amp;quot;, i+3); 
        printf(&amp;quot;process(%d)\n&amp;quot;, i+4); 
        printf(&amp;quot;process(%d)\n&amp;quot;, i+5); 
        printf(&amp;quot;process(%d)\n&amp;quot;, i+6); 
        printf(&amp;quot;process(%d)\n&amp;quot;, i+7); 
        /* update the counter */ 
        i += 8; 
    } 
    /* 
     * There may be some left to do.
     * This could be done as a simple for() loop, 
     * but a switch is faster (and more interesting) 
     */ 
    if( i &amp;lt; limit ) 
    { 
        /* Jump into the case at the place that will allow
         * us to finish off the appropriate number of items. 
         */ 
        switch( limit - i ) 
        { 
            case 7 : printf(&amp;quot;process(%d)\n&amp;quot;, i); i++; 
            case 6 : printf(&amp;quot;process(%d)\n&amp;quot;, i); i++; 
            case 5 : printf(&amp;quot;process(%d)\n&amp;quot;, i); i++; 
            case 4 : printf(&amp;quot;process(%d)\n&amp;quot;, i); i++; 
            case 3 : printf(&amp;quot;process(%d)\n&amp;quot;, i); i++; 
            case 2 : printf(&amp;quot;process(%d)\n&amp;quot;, i); i++; 
            case 1 : printf(&amp;quot;process(%d)\n&amp;quot;, i); 
        }
    } 
    return 0;
}&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;计算非零位的个数 / counting the number of bits set&lt;/h2&gt;
&lt;p&gt;例1：测试单个的最低位，计数，然后移位。&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;//example1
int countbit1(uint n)
{
    int bits = 0;
    while (n != 0) {
        if(n &amp;amp; 1) bits++;
            n &amp;gt;&amp;gt;= 1;
    }
      return bits;
}&lt;/pre&gt;
&lt;p&gt;例2：先除4，然后计算被4处的每个部分。循环拆解经常会给程序优化带来新的机会。&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;//example - 2
int countbit2(uint n)
{
    int bits = 0;
    while (n != 0) {
        if (n &amp;amp; 1) bits++;
        if (n &amp;amp; 2) bits++;
        if (n &amp;amp; 4) bits++;
        if (n &amp;amp; 8) bits++;
            n &amp;gt;&amp;gt;= 4;
    }
    return bits;
}&lt;/pre&gt;
&lt;h2&gt;尽早地退出循环 / Early loop breaking&lt;/h2&gt;
&lt;p&gt;通常没有必要遍历整个循环。举例来说，在数组中搜索一个特定的值，我们可以在找到我们需要值之后立刻退出循环。下面的例子在10000个数字中搜索-99。&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;found = FALSE; 
for(i=0;i&amp;lt;10000;i++) 
{ 
    if(list[i] == -99) { 
         found = TRUE; 
    } 
} 
if(found) printf(&amp;quot;Yes, there is a -99. Hooray!\n&amp;quot;);&lt;/pre&gt;
&lt;p&gt;这样做是可行的，但是不管这个被搜索到的项目出现在什么位置，都会搜索整个数组。跟好的方法是，再找到我们需要的数字以后，立刻退出循环。&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;found = FALSE; 
for(i = 0; i &amp;lt; 10000; i++) 
{ 
    if( list[i] == -99 ) { 
        found = TRUE; 
        break; 
    } 
} 
if( found ) printf(&amp;quot;Yes, there is a -99. Hooray!\n&amp;quot;);&lt;/pre&gt;
&lt;p&gt;如果数字出现在位置23上，循环就会终止，忽略剩下的9977个。&lt;/p&gt;
&lt;h2&gt;函数设计 / Function Design&lt;/h2&gt;
&lt;p&gt;保持函数短小精悍，是对的。这可以使编译器能够跟高效地进行其他的优化，比如寄存器分配。&lt;/p&gt;
&lt;h2&gt;调用函数的开销 / Function call overhead&lt;/h2&gt;
&lt;p&gt;对处理器而言，调用函数的开销是很小的，通常，在被调用函数所进行的工作中，所占的比例也很小。能够使用寄存器传递的函数参数个数是有限制的。这些参数可以是整型兼容的（char,short,int以及float都占用一个字），或者是4个字以内的结构体（包括2个字的double和long long）。假如参数的限制是4，那么第5个及后面的字都会被保存到堆栈中。这会增加在调用函数是存储这些参数的，以及在被调用函数中恢复这些参数的代价。&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;int f1(int a, int b, int c, int d) { 
    return a + b + c + d;
}
int g1(void) {
    return f1(1, 2, 3, 4);
}
int f2(int a, int b, int c, int d, int e, int f) {
    return a + b + c + d + e + f;
}
ing g2(void) {
    return f2(1, 2, 3, 4, 5, 6);
}&lt;/pre&gt;
&lt;p&gt;g2函数中，第5、6个参数被保存在堆栈中，在f2中被恢复，每个参数带来2次内存访问。&lt;/p&gt;
&lt;h2&gt;最小化参数传递的开销 / Minimizing parameter passing overhead&lt;/h2&gt;
&lt;p&gt;为了将传递参数给函数的代价降至最低，我们可以：&lt;br /&gt;
尽可能确保函数的形参不多于四个，甚至更少，这样就不会使用堆栈来传递参数。&lt;br /&gt;
如果一个函数形参多于四个，那就确保在这个函数能够做大量的工作，这样就可以抵消由传递堆栈参数所付出的代价。&lt;br /&gt;
用指向结构体的指针作形参，而不是结构体本身。&lt;br /&gt;
把相关的参数放到一个结构里里面，然后把它的指针传给函数，可以减少参数的个数，增加程序的可读性。&lt;br /&gt;
将long类型的参数的个数降到最小，因为它使用两个参数的空间。对于double也同样适用。&lt;br /&gt;
避免出现参数的一部分使用寄存器传输，另一部分使用堆栈传输的情况。这种情况下参数将被全部压到堆栈里。&lt;br /&gt;
避免出现函数的参数个数不定的情况。这种情况下，所有参数都使用堆栈。&lt;/p&gt;
&lt;h2&gt;叶子函数 / Leaf functions&lt;/h2&gt;
&lt;p&gt;如果一个函数不再调用其他函数，这样的函数被称为叶子函数。在许多应用程序中，大约一半的函数调用是对叶子函数的调用。叶子函数在所有平台上都可以得到非常高效的编译，因为他们不需要进行参数的保存和恢复。在入口压栈和在出口退栈的代价，跟一个足够复杂的需要4个或者5个参数的叶子函数所完成的工作相比，是非常小的。如果可能的话，我们就要尽量安排经常被调用的函数成为叶子函数。函数被调用的次数可以通过模型工具（profiling facility）来确定。这里有几种方法可以确保函数被编译成叶子函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不调用其他函数：包括那些被转换成调用C语言库函数的运算，比如除法、浮点运算。&lt;/li&gt;
&lt;li&gt;使用关键字__inline修饰小的函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;内联函数 / Inline functions&lt;/h2&gt;
&lt;p&gt;对于所有调试选项，内嵌函数是被禁止的。使用inline关键字修饰函数后，跟普通的函数调用不同，代码中对该函数的调用将会被函数体本身代替。这会使代码更快，另一方面它会影响代码的长度，尤其是内嵌函数比较大而且经常被调用的情况下。&lt;/p&gt;
&lt;pre class=&quot;brush: c; gutter: true&quot;&gt;__inline int square(int x) {
    return x * x;
}
double length(int x, int y){
    return sqrt(square(x) + square(y));
}&lt;/pre&gt;
&lt;p&gt;使用内嵌函数有几个优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有调用函数的开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为函数被直接代替，没有任何额外的开销，比如存储和恢复寄存器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更低的参数赋值开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参数传递的开销通常会更低，因为它不需要复制变量。如果其中一些参数是常量，编译器还可以作进一步的优化。&lt;/p&gt;
&lt;p&gt;内嵌函数的缺点是如果函数在许多地方被调用，将会增加代码的长度。长度差别的大小非常依赖于内嵌函数的大小和调用的次数。&lt;/p&gt;
&lt;p&gt;仅将少数关键函数设置成内嵌函数是明智的。如果设置得当，内嵌函数可以减少代码的长度，一次函数调用需要一定数量的指令，但是，使用优化过的内嵌函数可以编译成更少的指令。&lt;/p&gt;
&lt;h2&gt;使用查找表 / Using Lookup Tables&lt;/h2&gt;
&lt;p&gt;有些函数可以近似成查找表，这样可以显著的提高效率。查找表的精度一般比计算公式的精度低，不过在大多数程序中，这种精度就足够了。&lt;br /&gt;
许多信号处理软件（比如MODEM调制软件）会大量的使用sin和cos函数，这些函数会带来大量的数学运算。对于实时系统来说，精度不是很重要，sin/cos查找表显得更加实用。使用查找表的时候，尽量将相近的运算合并成一个查找表，这样要比使用多个查找表要更快和使用更少的空间。&lt;/p&gt;
&lt;h2&gt;浮点运算 / Floating-Point Arithmetic&lt;/h2&gt;
&lt;p&gt;尽管浮点运算对于任何处理器来讲都是很费时间的，有的时候，我们还是不得不用到浮点运算，比方说实现信号处理。尽管如此，编写浮点运算代码的时候，我们要牢记：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浮点除法是慢的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除法要比加法或者乘法慢两倍，我们可以把被一个常数除的运算写成被这个数的倒数乘（比如，x=x/3.0写成x=x*(1.0/3.0)）。倒数的计算在编译阶段就被完成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用float代替double&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Float型变量消耗更少的内存和寄存器，而且因为它的低精度所以具有更高的效率。在精度足够的情况下，就要使用float。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要使用先验函数（transcendental functions），&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先验函数（比如sin，cos，log）是通过使用一系列的乘法和加法实现的，所以这些运算会比普通的乘法慢10倍以上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简化浮点表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编译器在整型跟浮点型混合的运算中不会进行太多的优化。比如3 * (x / 3) 不会被优化成x，因为浮点运算通常会导致精度的降低，甚至表达式的顺序都是重要的： (a + b) 　　  + c 不等于 a + (b + c)。因此，进行手动的优化是有好处的。&lt;/p&gt;
&lt;p&gt;不过，在特定的场合下，浮点运算的效率达不到指定的水平，这种情况下，最好的办法可能是放弃浮点运算，转而使用定点运算。当变量的变化范围足够的小，定点运算要比浮点运算精度更高、速度更快。&lt;/p&gt;
&lt;h2&gt;其他的技巧 / Misc tips&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;一般情况下，可以用存储空间换取时间。你可以缓存那些经常用到的数据，而不是每次都重新计算、或者重新装载。比如sin/cos表，或者伪随机数的表（如果你不是真的需要随机数，你可以在开始的时候计算1000个，在随后的代码中重复利用就是了）&lt;/li&gt;
  &lt;li&gt;尽量少的使用全局变量。&lt;/li&gt;
  &lt;li&gt;将一个文件内部的变量声明成静态的，除非它有必要成为全局的。&lt;/li&gt;
  &lt;li&gt;不要使用递归。递归可以使代码非常整齐和美观，但会产生大量的函数调用和开销。&lt;/li&gt;
  &lt;li&gt;访问单维数组要比多维数组快&lt;/li&gt;
  &lt;li&gt;使用#defined宏代替经常用到的小函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h2&gt;引用/References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.arm.com/pdfs/DAI0034A_efficient_c.pdf&quot; target=&quot;_blank&quot;&gt;Writing Efficient C for ARM&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Document number: ARM DAI 0034A&lt;/li&gt;
&lt;li&gt;Issued: January 1998&lt;/li&gt;
&lt;li&gt;Copyright Advanced RISC Machines Ltd. (ARM) 1998&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rddvs.com/FasterC/&quot; target=&quot;_blank&quot;&gt;Richard&amp;#8217;s C Optimization page&lt;/a&gt; OR: How to make your C, C++ or Java program run faster with little effort.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tldp.org/LDP/LG/issue71/joshi.html&quot; target=&quot;_blank&quot;&gt;Code Optimization Using the GNU C Compiler&lt;/a&gt; By Rahul U Joshi.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.princeton.edu/software/lcc/doc/linux.html&quot; target=&quot;_blank&quot;&gt;Compile C Faster on Linux&lt;/a&gt; [Christopher W. Fraser (Microsoft Research), David R. Hanson (Princeton University)]&lt;/li&gt;
&lt;li&gt;CODE OPTIMIZATION &amp;#8211; COMPILER [&lt;a href=&quot;http://www.ibiblio.org/pub/languages/fortran/ch1-10.html&quot; target=&quot;_blank&quot;&gt;1&lt;/a&gt;] [&lt;a href=&quot;http://www.ibiblio.org/pub/languages/fortran/ch1-9.html&quot; target=&quot;_blank&quot;&gt;2&lt;/a&gt;][Thanks to Craig Burley for the excellent comments. Thanks to Timothy Prince for the note on architectures with Instruction Level Parallelism].&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.coyotegulch.com/acovea/&quot; target=&quot;_blank&quot;&gt;An Evolutionary Analysis of GNU C Optimizations&lt;/a&gt; [Using Natural Selection to Investigate Software Complexities by Scott Robert Ladd. Updated: 16 December 2003]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;其他网络资源 / Other URLs&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.xs4all.nl/~ekonijn/loopy.html&quot;&gt;http://www.xs4all.nl/~ekonijn/loopy.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.public.asu.edu/~sshetty/Optimizing_Code_Manual.doc&quot;&gt;http://www.public.asu.edu/~sshetty/Optimizing_Code_Manual.doc&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.abarnett.demon.co.uk/tutorial.html&quot;&gt;http://www.abarnett.demon.co.uk/tutorial.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本文翻译自： &lt;a href=&quot;http://www.codeproject.com/Articles/6154/Writing-Efficient-C-and-C-Code-Optimization&quot;&gt;codeproject&lt;/a&gt;，感谢codingwu的整理，转载请注明&lt;a href=&quot;http://coolshell.info/2014/12/c-code-opt.html&quot;&gt;出处&lt;/a&gt;。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>skip list跳跃表实现</title>
   <link href="http://http://coolshell.info/blog/2014/12/skip-list.html"/>
   <updated>2014-12-18T00:00:00+00:00</updated>
   <id>/blog/2014/12/skip-list</id>
   <content type="html">&lt;p&gt;跳表(skip List)是一种随机化的数据结构，基于并联的链表，实现简单，插入、删除、查找的复杂度均为O(logN)。跳表的具体定义，
 跳表是由William Pugh发明的，这位确实是个大牛，搞出一些很不错的东西。简单说来跳表也是&lt;/p&gt;

&lt;p&gt;链表的一种，只不过它在链表的基础上增加了跳跃功能，正是这个跳跃的功能，使得在查找元素时，跳表能够提供O(log n)的时间复杂&lt;/p&gt;

&lt;p&gt;度。红黑树等这样的平衡数据结构查找的时间复杂度也是O(log n)，并且相对于红黑树这样的平衡二叉树skiplist的优点是更好的支持并&lt;/p&gt;

&lt;p&gt;发操作，但是要实现像红黑树这样的数据结构并非易事,但是只要你熟悉链表的基本操作,再加之对跳表原理的理解，实现一个跳表数据&lt;/p&gt;

&lt;p&gt;结构就是一个很自然的事情了。&lt;/p&gt;

&lt;p&gt;此外，跳表在当前热门的开源项目中也有很多应用，比如LevelDB的核心数据结构memtable是用跳表实现的，redis的sorted set数据&lt;/p&gt;

&lt;p&gt;结构也是有跳表实现的。&lt;/p&gt;

&lt;p&gt;##skiplist主要思想&lt;/p&gt;

&lt;p&gt;先从链表开始，如果是一个简单的链表（不一定有序），那么我们在链表中查找一个元素X的话，需要将遍历整个链表直到找到元素X为止。&lt;/p&gt;

&lt;p&gt;现在我们考虑一个有序的链表：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/githubpages/skiplist1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从该有序表中搜索元素 {13, 39} ，需要比较的次数分别为 {3, 5}，总共比较的次数为 3 + 5 = 8 次。我们想下有没有更优的算法?  我们想到了对于&lt;/p&gt;

&lt;p&gt;有序数组查找问题我们可以使用二分查找算法，但对于有序链表却不能使用二分查找。这个时候我们在想下平衡树,比如BST,他们都是通过把一些&lt;/p&gt;

&lt;p&gt;节点取出来作为其节点下某种意义的索引，比如父节点一般大于左子节点而小于右子节点。因此这个时候我们想到类似二叉搜索树的做法把一些&lt;/p&gt;

&lt;p&gt;节点提取出来，作为索引。得到如下结构：
 &lt;img src=&quot;/images/images/githubpages/skiplist2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这个结构里我们把{3, 18, 77}提取出来作为一级索引，这样搜索的时候就可以减少比较次数了,比如在搜索39时仅比较了3次(通过比较3,18,39)。&lt;/p&gt;

&lt;p&gt;当然我们还可以再从一级索引提取一些元素出来，作为二级索引,这样更能加快元素搜索。&lt;/p&gt;

&lt;p&gt;这基本上就是跳表的核心思想，其实是一种通过“空间来换取时间”的一个算法，通过在每个节点中增加了向前的指针(即层)，从而提升查找的效率。&lt;/p&gt;

&lt;p&gt;跳跃列表是按层建造的。底层是一个普通的有序链表。每个更高层都充当下面列表的「快速跑道」，这里在层 i 中的元素按某个固定的概率 p (通常&lt;/p&gt;

&lt;p&gt;为0.5或0.25)出现在层 i+1 中。平均起来，每个元素都在 1/(1-p) 个列表中出现, 而最高层的元素（通常是在跳跃列表前端的一个特殊的头元素）&lt;/p&gt;

&lt;p&gt;在 O(log1/p n) 个列表中出现。&lt;/p&gt;

&lt;p&gt;##SkipList基本数据结构及其实现&lt;/p&gt;

&lt;p&gt;一个跳表，应该具有以下特征：&lt;/p&gt;

&lt;p&gt;1,一个跳表应该有几个层（level）组成；&lt;/p&gt;

&lt;p&gt;2,跳表的第一层包含所有的元素；&lt;/p&gt;

&lt;p&gt;3,每一层都是一个有序的链表；&lt;/p&gt;

&lt;p&gt;4,如果元素x出现在第i层，则所有比i小的层都包含x；&lt;/p&gt;

&lt;p&gt;5,每个节点包含key及其对应的value和一个指向同一层链表的下个节点的指针数组&lt;/p&gt;

&lt;p&gt;如图所示。
 &lt;img src=&quot;/images/images/githubpages/skiplist3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;跳表基本数据结构&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;定义跳表数据类型：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//跳表结构  
typedef struct skip_list  
{  
    int level;// 层数  
    Node *head;//指向头结点  
} skip_list;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中level是当前跳表最大层数,head是指向跳表的头节点如上图。&lt;/p&gt;

&lt;p&gt;跳表的每个节点的数据结构：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef struct node  
{  
    keyType key;// key值  
    valueType value;// value值  
    struct node *next[1];// 后继指针数组，柔性数组 可实现结构体的变长  
} Node;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对于这个结构体重点说说，struct node *next[1] 其实它是个柔性数组，主要用于使结构体包含可变长字段。我们可以通过如下方法得到包含可变&lt;/p&gt;

&lt;p&gt;层数(n)的Node *类型的内存空间:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define new_node(n)((Node*)malloc(sizeof(Node)+n*sizeof(Node*)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过上面我们可以根据层数n来申请指定大小的内存，从而节省了不必要的内存空间(比如固定大小的next数组就会浪费大量的内存空间)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;跳表节点的创建&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 创建节点  
Node *create_node(int level, keyType key, valueType val)  
{  
    Node *p=new_node(level);  
    if(!p)  
        return NULL;  
    p-&amp;gt;key=key;  
    p-&amp;gt;value=val;  
    return p;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;跳表的创建&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;列表的初始化需要初始化头部，并使头部每层（根据事先定义的MAX_LEVEL）指向末尾（NULL）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//创建跳跃表  
skip_list *create_sl()  
{  
    skip_list *sl=(skip_list*)malloc(sizeof(skip_list));//申请跳表结构内存  
    if(NULL==sl)  
        return NULL;  
  
    sl-&amp;gt;level=0;// 设置跳表的层level，初始的层为0层（数组从0开始）  
  
    Node *h=create_node(MAX_L-1, 0, 0);//创建头结点  
    if(h==NULL)  
    {  
        free(sl);  
        return NULL;  
    }  
    sl-&amp;gt;head = h;  
    int i;  
     // 将header的next数组清空  
    for(i=0; i&amp;lt;MAX_L; ++i)  
    {  
        h-&amp;gt;next[i] = NULL;  
    }  
    srand(time(0));  
    return sl;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;跳表插入操作&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们知道跳表是一种随机化数据结构，其随机化体现在插入元素的时候元素所占有的层数完全是随机的，层数是通过随机算法产生的:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//插入元素的时候元素所占有的层数完全是随机算法  
int randomLevel()  
{  
    int level=1;  
    while (rand()%2)  
        level++;  
    level=(MAX_L&amp;gt;level)? level:MAX_L;  
    return level;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;相当与做一次丢硬币的实验，如果遇到正面(rand产生奇数)，继续丢，遇到反面，则停止，用实验中丢硬币的次数level作为元素占有的层数。&lt;/p&gt;

&lt;p&gt;显然随机变量 level 满足参数为 p = 1/2 的几何分布，level 的期望值 E[level] = 1/p = 2. 就是说，各个元素的层数，期望值是 2 层。&lt;/p&gt;

&lt;p&gt;由于跳表数据结构整体上是有序的，所以在插入时，需要首先查找到合适的位置，然后就是修改指针（和链表中操作类似），然后更新跳表的&lt;/p&gt;

&lt;p&gt;level变量。 跳表的插入总结起来需要三步:&lt;/p&gt;

&lt;p&gt;1:查找到待插入位置, 每层跟新update数组;&lt;/p&gt;

&lt;p&gt;2:需要随机产生一个层数;&lt;/p&gt;

&lt;p&gt;3:从高层至下插入,与普通链表的插入完全相同;&lt;/p&gt;

&lt;p&gt;比如插入key为25的节点，如下图:
 &lt;img src=&quot;/images/images/githubpages/skiplist4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对于步骤1,我们需要对于每一层进行遍历并保存这一层中下降的节点(其后继节点为NULL或者后继节点的key大于等于要插入的key)，如下图,
 &lt;img src=&quot;/images/images/githubpages/skiplist5.jpg&quot; alt=&quot;&quot; /&gt;
节点中有白色星花标识的节点保存到update数组。&lt;/p&gt;

&lt;p&gt;对于步骤2我们上面已经说明了是通过一个随机算法产生一个随机的层数，但是当这个随机产生的层数level大于当前跳表的最大层数时，我们&lt;/p&gt;

&lt;p&gt;此时需要更新当前跳表最大层数到level之间的update内容，这时应该更新其内容为跳表的头节点head，想想为什么这么做,呵呵。然后就是更&lt;/p&gt;

&lt;p&gt;新跳表的最大层数。&lt;/p&gt;

&lt;p&gt;对于步骤3就和普通链表插入一样了，只不过现在是对每一层链表进行插入节点操作。最终的插入结果如图所示，因为新插入key为25的节点level随机&lt;/p&gt;

&lt;p&gt;为4大于插入前的最大层数，所以此时跳表的层数为4。&lt;/p&gt;

&lt;p&gt;实现代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bool insert(skip_list *sl, keyType key, valueType val)  
{  
    Node *update[MAX_L];  
    Node *q=NULL,*p=sl-&amp;gt;head;//q,p初始化  
    int i=sl-&amp;gt;level-1;  
    /******************step1*******************/  
    //从最高层往下查找需要插入的位置,并更新update  
    //即把降层节点指针保存到update数组  
    for( ; i&amp;gt;=0; --i)  
    {  
        while((q=p-&amp;gt;next[i])&amp;amp;&amp;amp; q-&amp;gt;key&amp;lt;key)  
            p=q;  
        update[i]=p;  
    }  
    if(q &amp;amp;&amp;amp; q-&amp;gt;key == key)//key已经存在的情况下  
    {  
        q-&amp;gt;value = val;  
        return true;  
    }  
    /******************step2*******************/  
    //产生一个随机层数level  
    int level = randomLevel();  
    //如果新生成的层数比跳表的层数大  
    if(level&amp;gt;sl-&amp;gt;level)  
    {  
        //在update数组中将新添加的层指向header  
        for(i=sl-&amp;gt;level; i&amp;lt;level; ++i)  
        {  
            update[i]=sl-&amp;gt;head;  
        }  
        sl-&amp;gt;level=level;  
    }  
    //printf(&quot;%d\n&quot;, sizeof(Node)+level*sizeof(Node*));  
    /******************step3*******************/  
    //新建一个待插入节点,一层一层插入  
    q=create_node(level, key, val);  
    if(!q)  
        return false;  
  
    //逐层更新节点的指针,和普通链表插入一样  
    for(i=level-1; i&amp;gt;=0; --i)  
    {  
        q-&amp;gt;next[i]=update[i]-&amp;gt;next[i];  
            update[i]-&amp;gt;next[i]=q;  
        }  
        return true;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;跳表删除节点操作&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;删除节点操作和插入差不多，找到每层需要删除的位置，删除时和操作普通链表完全一样。不过需要注意的是，如果该节点的level是最大的，&lt;/p&gt;

&lt;p&gt;则需要更新跳表的level。实现代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bool erase(skip_list *sl, keyType key)  
{  
    Node *update[MAX_L];  
    Node *q=NULL, *p=sl-&amp;gt;head;  
    int i = sl-&amp;gt;level-1;  
    for(; i&amp;gt;=0; --i)  
    {  
        while((q=p-&amp;gt;next[i]) &amp;amp;&amp;amp; q-&amp;gt;key &amp;lt; key)  
        {  
            p=q;  
        }  
        update[i]=p;  
    }  
    //判断是否为待删除的key  
    if(!q || (q&amp;amp;&amp;amp;q-&amp;gt;key != key))  
        return false;  
  
    //逐层删除与普通链表删除一样  
    for(i=sl-&amp;gt;level-1; i&amp;gt;=0; --i)  
    {  
        if(update[i]-&amp;gt;next[i]==q)//删除节点  
        {  
            update[i]-&amp;gt;next[i]=q-&amp;gt;next[i];  
            //如果删除的是最高层的节点,则level--  
            if(sl-&amp;gt;head-&amp;gt;next[i]==NULL)  
                sl-&amp;gt;level--;  
        }  
    }  
    free(q);  
    q=NULL;  
    return true;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;跳表的查找操作&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;跳表的优点就是查找比普通链表快，其实查找操已经在插入、删除操作中有所体现，代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;valueType *search(skip_list *sl, keyType key)  
{  
    Node *q,*p=sl-&amp;gt;head;  
    q=NULL;  
    int i=sl-&amp;gt;level-1;  
    for(; i&amp;gt;=0; --i)  
    {  
        while((q=p-&amp;gt;next[i]) &amp;amp;&amp;amp; q-&amp;gt;key&amp;lt;key)  
        {  
            p=q;  
        }  
        if(q &amp;amp;&amp;amp; key==q-&amp;gt;key)  
            return &amp;amp;(q-&amp;gt;value);  
    }  
    return NULL;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;跳表的销毁&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上面分别介绍了跳表的创建、节点插入、节点删除，其中涉及了内存的动态分配，在使用完跳表后别忘了释放所申请的内存，不然会内存泄露的。&lt;/p&gt;

&lt;p&gt;不多说了，代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 释放跳跃表  
void sl_free(skip_list *sl)  
{  
    if(!sl)  
        return;  
      
    Node *q=sl-&amp;gt;head;  
    Node *next;  
    while(q)  
    {  
        next=q-&amp;gt;next[0];  
        free(q);  
        q=next;  
    }  
    free(sl);  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;skiplist复杂度分析&lt;/p&gt;

&lt;p&gt;skiplist分析如下图
  &lt;img src=&quot;/images/images/githubpages/skiplist6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;p&gt;https://www.cs.auckland.ac.nz/software/AlgAnim/niemann/s_skl.htm&lt;/p&gt;

&lt;p&gt;http://www.cnblogs.com/xuqiang/archive/2011/05/22/2053516.html&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>值得推荐的C/C++框架和库</title>
   <link href="http://http://coolshell.info/blog/2014/12/c-open-project.html"/>
   <updated>2014-12-13T00:00:00+00:00</updated>
   <id>/blog/2014/12/c-open-project</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#c&quot; id=&quot;markdown-toc-c&quot;&gt;值得学习的C语言开源项目&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#c-&quot; id=&quot;markdown-toc-c-&quot;&gt;C++ 资源大全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;c&quot;&gt;值得学习的C语言开源项目&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Libev&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;libev是一个开源的事件驱动库，基于epoll，kqueue等OS提供的基础设施。其以高效出名，它可以将IO事件，定时器，和信号统一起来，统一放在事件处理这一套框架下处理。基于Reactor模式，效率较高，并且代码精简（4.15版本8000多行），是学习事件驱动编程的很好的资源。&lt;/p&gt;

&lt;p&gt;下载链接：&lt;a href=&quot;http://software.schmorp.de/pkg/libev.html&quot;&gt;http://software.schmorp.de/pkg/libev.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Memcached&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提供动态数据库驱动网站的速度。Memcached 基于一个存储键/值对的 hashmap。Memcached-1.4.7的代码量还是可以接受的，只有10K行左右。&lt;/p&gt;

&lt;p&gt;下载地址：&lt;a href=&quot;http://memcached.org/&quot;&gt;http://memcached.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redis 是一个使用 C 语言写成的，开源的 key-value 数据库。Redis支持的操作和数据类型比Memcached要多，现在主要用于缓存，支持主从同步机制，Redis的学习可以参考«Redis设计与实现»一书。&lt;/p&gt;

&lt;p&gt;下载地址：&lt;a href=&quot;http://redis.io/&quot;&gt;http://redis.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Webbench&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Webbench是一个在linux下使用的非常简单的网站压测工具。它使用fork()模拟多个客户端同时访问我们设定的URL，测试网站在压力下工作的性能，最多可以模拟3万个并发连接去测试网站的负载能力。Webbench使用C语言编写, 代码实在太简洁，源码加起来不到600行。&lt;/p&gt;

&lt;p&gt;下载链接：&lt;a href=&quot;https://github.com/LippiOuYang/WebBench&quot;&gt;https://github.com/LippiOuYang/WebBenchl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;APR（Apache Portable Runtime）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这是由 Apache 社区维护的 C 开源库，主要提供操作系统相关的功能（文件系统、进程、线程、用户、IPC）。此外还提供了一些网络相关的功能。&lt;/p&gt;

&lt;p&gt;APR 原先是 Apache Web 服务器的一个组成部分，后来独立出来，成为一个单独的开源项目。
主页：&lt;a href=&quot;https://apr.apache.org/&quot;&gt;https://apr.apache.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tinyhttpd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;tinyhttpd是一个超轻量型Http Server，使用C语言开发，全部代码只有502行(包括注释)，附带一个简单的Client，可以通过阅读这段代码理解一个 Http Server 的本质。&lt;/p&gt;

&lt;p&gt;下载链接：&lt;a href=&quot;https://github.com/LippiOuYang/Tinyhttpd&quot;&gt;https://github.com/LippiOuYang/Tinyhttpd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cJSON&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;cJSON是C语言中的一个JSON编解码器，非常轻量级，C文件只有500多行，速度也非常理想。&lt;/p&gt;

&lt;p&gt;cJSON也存在几个弱点，虽然功能不是非常强大，但cJSON的小身板和速度是最值得赞赏的。其代码被非常好地维护着，结构也简单易懂，可以作为一个非常好的C语言项目进行学习。&lt;/p&gt;

&lt;p&gt;项目主页:&lt;a href=&quot;http://sourceforge.net/projects/cjson/&quot;&gt;http://sourceforge.net/projects/cjson/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CMockery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;cmockery是google发布的用于C单元测试的一个轻量级的框架。它很小巧，对其他开源包没有依赖，对被测试代码侵入性小。cmockery的源代码行数不到3K，你阅读一下will_return和mock的源代码就一目了然了。&lt;/p&gt;

&lt;p&gt;主要特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;免费且开源，google提供技术支持；&lt;/li&gt;
  &lt;li&gt;轻量级的框架，使测试更加快速简单；&lt;/li&gt;
  &lt;li&gt;避免使用复杂的编译器特性，对老版本的编译器来讲，兼容性好;&lt;/li&gt;
  &lt;li&gt;并不强制要求待测代码必须依赖C99标准，这一特性对许多嵌入式系统的开发很有用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下载链接：&lt;a href=&quot;http://code.google.com/p/cmockery/downloads/list&quot;&gt;http://code.google.com/p/cmockery/downloads/list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lua很棒，Lua是巴西人发明的，这些都令我不爽，但是还不至于脸红，最多眼红。&lt;/p&gt;

&lt;p&gt;让我脸红的是Lua的源代码，百分之一百的ANSI C，一点都不掺杂。在任何支持ANSI C编译器的平台上都可以轻松编译通过。我试过，真是一点废话都没有。Lua的代码数量足够小，5.1.4仅仅1.5W行，去掉空白行和注释估计能到1W行。&lt;/p&gt;

&lt;p&gt;下载地址：&lt;a href=&quot;http://www.lua.org/&quot;&gt;http://www.lua.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQLite&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SQLite是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的SQL数据库引擎。 其特点是高度便携、使用方便、结构紧凑、高效、可靠。足够小，大致3万行C代码，250K。&lt;/p&gt;

&lt;p&gt;下载地址：http://www.sqlite.org/ 。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UNIX v6&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;UNIX V6 的内核源代码包括设备驱动程序在内 约有1 万行，这个数量的源代码，初学者是能够充分理解的。有一种说法是一个人所能理解的代码量上限为1 万行，UNIX V6的内核源代码从数量上看正好在这个范围之内。看到这里，大家是不是也有“如果只有1万行的话没准儿我也能学会”的想法呢？&lt;/p&gt;

&lt;p&gt;另一方面，最近的操作系统，例如Linux 最新版的内核源代码据说超过了1000 万行。就算不是初学者，想完全理解全部代码基本上也是不可能的。&lt;/p&gt;

&lt;p&gt;下载地址：&lt;a href=&quot;http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6&quot;&gt;http://minnie.tuhs.org/cgi-bin/utree.pl?file=V6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NETBSD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;NetBSD是一个免费的，具有高度移植性的 UNIX-like 操作系统，是现行可移植平台最多的操作系统，可以在许多平台上执行，从 64bit alpha 服务器到手持设备和嵌入式设备。NetBSD计划的口号是：”Of course it runs NetBSD”。它设计简洁，代码规范，拥有众多先进特性，使得它在业界和学术界广受好评。由于简洁的设计和先进的特征，使得它在生产和研究方面，都有卓越的表现，而且它也有受使用者支持的完整的源代码。许多程序都可以很容易地通过NetBSD Packages Collection获得。&lt;/p&gt;

&lt;p&gt;下载地址：&lt;a href=&quot;http://www.netbsd.org/&quot;&gt;http://www.netbsd.org/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;c-&quot;&gt;C++ 资源大全&lt;/h2&gt;

&lt;p&gt;关于 C++ 框架、库和资源的一些汇总列表，内容包括：标准库、Web应用框架、人工智能、数据库、图片处理、机器学习、日志、代码分析等。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;标准库&lt;/h3&gt;
&lt;p&gt;C++标准库，包括了STL容器，算法和函数等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/C%2B%2B_Standard_Library&quot; target=&quot;_blank&quot;&gt;C++ Standard Library&lt;/a&gt;：是一系列类和函数的集合，使用核心语言编写，也是C++ISO自身标准的一部分。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Standard_Template_Library&quot; target=&quot;_blank&quot;&gt;Standard Template Library&lt;/a&gt;：标准模板库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/C_POSIX_library&quot; target=&quot;_blank&quot;&gt;C POSIX library&lt;/a&gt; ： POSIX系统的C标准库规范&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cplusplus&quot; target=&quot;_blank&quot;&gt;ISO C++ Standards Committee&lt;/a&gt; ：C++标准委员会&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;框架&lt;/h3&gt;
&lt;p&gt;C++通用框架和库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stdcxx.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache C++ Standard Library&lt;/a&gt;：是一系列算法，容器，迭代器和其他基本组件的集合&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stlab.adobe.com/&quot; target=&quot;_blank&quot;&gt;ASL&lt;/a&gt; ：Adobe源代码库提供了同行的评审和可移植的C++源代码库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/boostorg&quot; target=&quot;_blank&quot;&gt;Boost&lt;/a&gt; ：大量通用C++库的集合。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bloomberg/bde&quot; target=&quot;_blank&quot;&gt;BDE&lt;/a&gt; ：来自于彭博资讯实验室的开发环境。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://libcinder.org/&quot; target=&quot;_blank&quot;&gt;Cinder&lt;/a&gt;：提供专业品质创造性编码的开源开发社区。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ryan.gulix.cl/fossil.cgi/cxxomfort/&quot; target=&quot;_blank&quot;&gt;Cxxomfort&lt;/a&gt;：轻量级的，只包含头文件的库，将C++ 11的一些新特性移植到C++03中。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dlib.net/&quot; target=&quot;_blank&quot;&gt;Dlib&lt;/a&gt;：使用契约式编程和现代C++科技设计的通用的跨平台的C++库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/paulhodge/EASTL&quot; target=&quot;_blank&quot;&gt;EASTL&lt;/a&gt; ：EA-STL公共部分&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sumeetchhetri/ffead-cpp&quot; target=&quot;_blank&quot;&gt;ffead-cpp&lt;/a&gt; ：企业应用程序开发框架&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/folly&quot; target=&quot;_blank&quot;&gt;Folly&lt;/a&gt;：由Facebook开发和使用的开源C++库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/julianstorer/JUCE&quot; target=&quot;_blank&quot;&gt;JUCE&lt;/a&gt; ：包罗万象的C++类库，用于开发跨平台软件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/libphenom&quot; target=&quot;_blank&quot;&gt;libPhenom&lt;/a&gt;：用于构建高性能和高度可扩展性系统的事件框架。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sourcey/libsourcey&quot; target=&quot;_blank&quot;&gt;LibSourcey&lt;/a&gt; ：用于实时的视频流和高性能网络应用程序的C++11 evented IO&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/koanlogic/libu&quot; target=&quot;_blank&quot;&gt;LibU&lt;/a&gt; ： C语言写的多平台工具库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://loki-lib.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Loki&lt;/a&gt; ：C++库的设计，包括常见的设计模式和习语的实现。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/mili/&quot; target=&quot;_blank&quot;&gt;MiLi&lt;/a&gt; ：只含头文件的小型C++库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.openframeworks.cc/&quot; target=&quot;_blank&quot;&gt;openFrameworks&lt;/a&gt; ：开发C++工具包，用于创意性编码。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qt-project.org/&quot; target=&quot;_blank&quot;&gt;Qt&lt;/a&gt; ：跨平台的应用程序和用户界面框架&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/reason/&quot; target=&quot;_blank&quot;&gt;Reason&lt;/a&gt; ：跨平台的框架，使开发者能够更容易地使用Java，.Net和Python，同时也满足了他们对C++性能和优势的需求。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://root.cern.ch/&quot; target=&quot;_blank&quot;&gt;ROOT&lt;/a&gt; ：具备所有功能的一系列面向对象的框架，能够非常高效地处理和分析大量的数据，为欧洲原子能研究机构所用。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stlport.org/&quot; target=&quot;_blank&quot;&gt;STLport&lt;/a&gt;：是STL具有代表性的版本&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stxxl.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;STXXL&lt;/a&gt;：用于额外的大型数据集的标准模板库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ultimatepp.org/&quot; target=&quot;_blank&quot;&gt;Ultimate++&lt;/a&gt; ：C++跨平台快速应用程序开发框架&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/wtl/&quot; target=&quot;_blank&quot;&gt;Windows Template Library&lt;/a&gt;：用于开发Windows应用程序和UI组件的C++库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jll63/yomm11&quot; target=&quot;_blank&quot;&gt;Yomm11&lt;/a&gt; ：C++11的开放multi-methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;人工智能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aigamedev/btsk&quot; target=&quot;_blank&quot;&gt;btsk&lt;/a&gt; ：游戏行为树启动器工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eodev.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Evolving Objects&lt;/a&gt;：基于模板的，ANSI C++演化计算库，能够帮助你非常快速地编写出自己的随机优化算法。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/andrometa/neu&quot; target=&quot;_blank&quot;&gt;Neu&lt;/a&gt;：C++11框架，编程语言集，用于创建人工智能应用程序的多用途软件系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;异步事件循环&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://think-async.com/&quot; target=&quot;_blank&quot;&gt;Boost.Asio&lt;/a&gt;：用于网络和底层I/O编程的跨平台的C++库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://libev.schmorp.de/&quot; target=&quot;_blank&quot;&gt;libev&lt;/a&gt; ：功能齐全，高性能的时间循环，轻微地仿效libevent，但是不再像libevent一样有局限性，也修复了它的一些bug。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://libevent.org/&quot; target=&quot;_blank&quot;&gt;libevent&lt;/a&gt; ：事件通知库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joyent/libuv&quot; target=&quot;_blank&quot;&gt;libuv&lt;/a&gt; ：跨平台异步I/O。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;音频&lt;/h3&gt;
&lt;p&gt;音频，声音，音乐，数字化音乐库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.fmod.org/&quot; target=&quot;_blank&quot;&gt;FMOD&lt;/a&gt; ：易于使用的跨平台的音频引擎和音频内容的游戏创作工具。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/micknoise/Maximilian&quot; target=&quot;_blank&quot;&gt;Maximilian&lt;/a&gt; ：C++音频和音乐数字信号处理库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.openal.org/&quot; target=&quot;_blank&quot;&gt;OpenAL&lt;/a&gt; ：开源音频库&amp;#8212;跨平台的音频API&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://opus-codec.org/&quot; target=&quot;_blank&quot;&gt;Opus&lt;/a&gt;：一个完全开放的，免版税的，高度通用的音频编解码器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.speex.org/&quot; target=&quot;_blank&quot;&gt;Speex&lt;/a&gt;：免费编解码器，为Opus所废弃&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/TonicAudio/Tonic&quot; target=&quot;_blank&quot;&gt;Tonic&lt;/a&gt;： C++易用和高效的音频合成&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://xiph.org/vorbis/&quot; target=&quot;_blank&quot;&gt;Vorbis&lt;/a&gt;： Ogg Vorbis是一种完全开放的，非专有的，免版税的通用压缩音频格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;生态学&lt;/h3&gt;
&lt;p&gt;生物信息，基因组学和生物技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://molpopgen.github.io/libsequence/&quot; target=&quot;_blank&quot;&gt;libsequence&lt;/a&gt;：用于表示和分析群体遗传学数据的C++库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.seqan.de/&quot; target=&quot;_blank&quot;&gt;SeqAn&lt;/a&gt;：专注于生物数据序列分析的算法和数据结构。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ekg/vcflib&quot; target=&quot;_blank&quot;&gt;Vcflib&lt;/a&gt; ：用于解析和处理VCF文件的C++库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jewmanchue/wham&quot; target=&quot;_blank&quot;&gt;Wham&lt;/a&gt;：直接把联想测试应用到BAM文件的基因结构变异。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;压缩&lt;/h3&gt;
&lt;p&gt;压缩和归档库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bzip.org/&quot; target=&quot;_blank&quot;&gt;bzip2&lt;/a&gt;：一个完全免费，免费专利和高质量的数据压缩&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bitbucket.org/attila_afra/doboz/overview&quot; target=&quot;_blank&quot;&gt;doboz&lt;/a&gt;：能够快速解压缩的压缩库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://icculus.org/physfs/&quot; target=&quot;_blank&quot;&gt;PhysicsFS&lt;/a&gt;：对各种归档提供抽象访问的库，主要用于视频游戏，设计灵感部分来自于Quake3的文件子系统。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://projects.kde.org/projects/frameworks/karchive&quot; target=&quot;_blank&quot;&gt;KArchive&lt;/a&gt;：用于创建，读写和操作文件档案（例如zip和 tar）的库，它通过QIODevice的一系列子类，使用gzip格式，提供了透明的压缩和解压缩的数据。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/lz4/&quot; target=&quot;_blank&quot;&gt;LZ4&lt;/a&gt; ：非常快速的压缩算法&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/lzham/&quot; target=&quot;_blank&quot;&gt;LZHAM&lt;/a&gt; ：无损压缩数据库，压缩比率跟LZMA接近，但是解压缩速度却要快得多。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.7-zip.org/sdk.html&quot; target=&quot;_blank&quot;&gt;LZMA&lt;/a&gt; ：7z格式默认和通用的压缩方法。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.matcode.com/lzmat.htm&quot; target=&quot;_blank&quot;&gt;LZMAT&lt;/a&gt; ：及其快速的实时无损数据压缩库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/miniz/&quot; target=&quot;_blank&quot;&gt;miniz&lt;/a&gt;：单一的C源文件，紧缩/膨胀压缩库，使用zlib兼容API，ZIP归档读写，PNG写方式。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nmoinvaz/minizip&quot; target=&quot;_blank&quot;&gt;Minizip&lt;/a&gt;：Zlib最新bug修复，支持PKWARE磁盘跨越，AES加密和IO缓冲。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/snappy/&quot; target=&quot;_blank&quot;&gt;Snappy&lt;/a&gt; ：快速压缩和解压缩&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zlib.net/&quot; target=&quot;_blank&quot;&gt;ZLib&lt;/a&gt; ：非常紧凑的数据流压缩库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zziplib.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;ZZIPlib&lt;/a&gt;：提供ZIP归档的读权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;并发性&lt;/h3&gt;
&lt;p&gt;并发执行和多线程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kylelutz/compute&quot; target=&quot;_blank&quot;&gt;Boost.Compute&lt;/a&gt; ：用于OpenCL的C++GPU计算库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/HSA-Libraries/Bolt&quot; target=&quot;_blank&quot;&gt;Bolt&lt;/a&gt; ：针对GPU进行优化的C++模板库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/schlangster/cpp.react&quot; target=&quot;_blank&quot;&gt;C++React&lt;/a&gt; ：用于C++11的反应性编程库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.threadingbuildingblocks.org/&quot; target=&quot;_blank&quot;&gt;Intel TBB&lt;/a&gt; ：Intel线程构件块&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/libclsph/libclsph&quot; target=&quot;_blank&quot;&gt;Libclsph&lt;/a&gt;：基于OpenCL的GPU加速SPH流体仿真库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.khronos.org/opencl/&quot; target=&quot;_blank&quot;&gt;OpenCL&lt;/a&gt; ：并行编程的异构系统的开放标准&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openmp.org/&quot; target=&quot;_blank&quot;&gt;OpenMP&lt;/a&gt;：OpenMP API&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://thrust.github.io/&quot; target=&quot;_blank&quot;&gt;Thrust&lt;/a&gt; ：类似于C++标准模板库的并行算法库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/STEllAR-GROUP/hpx/&quot; target=&quot;_blank&quot;&gt;HPX&lt;/a&gt; ：用于任何规模的并行和分布式应用程序的通用C++运行时系统&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ddemidov/vexcl&quot; target=&quot;_blank&quot;&gt;VexCL&lt;/a&gt; ：用于OpenCL/CUDA 的C++向量表达式模板库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;容器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/cpp-btree/&quot; target=&quot;_blank&quot;&gt;C++ B-tree&lt;/a&gt; ：基于B树数据结构，实现命令内存容器的模板库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/goossaert/hashmap&quot; target=&quot;_blank&quot;&gt;Hashmaps&lt;/a&gt;： C++中开放寻址哈希表算法的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;密码学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bcrypt.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Bcrypt&lt;/a&gt; ：一个跨平台的文件加密工具，加密文件可以移植到所有可支持的操作系统和处理器中。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fffaraz/awesome-cpp/blob/master&quot; target=&quot;_blank&quot;&gt;BeeCrypt&lt;/a&gt;：&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://botan.randombit.net/&quot; target=&quot;_blank&quot;&gt;Botan&lt;/a&gt;： C++加密库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cryptopp.com/&quot; target=&quot;_blank&quot;&gt;Crypto++&lt;/a&gt;：一个有关加密方案的免费的C++库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gnupg.org/&quot; target=&quot;_blank&quot;&gt;GnuPG&lt;/a&gt;： OpenPGP标准的完整实现&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnutls.org/&quot; target=&quot;_blank&quot;&gt;GnuTLS&lt;/a&gt; ：实现了SSL，TLS和DTLS协议的安全通信库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/libgcrypt/&quot; target=&quot;_blank&quot;&gt;Libgcrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fffaraz/awesome-cpp/blob/master&quot; target=&quot;_blank&quot;&gt;libmcrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.libressl.org/&quot; target=&quot;_blank&quot;&gt;LibreSSL&lt;/a&gt;：免费的SSL/TLS协议，属于2014 OpenSSL的一个分支&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/libtom/libtomcrypt&quot; target=&quot;_blank&quot;&gt;LibTomCrypt&lt;/a&gt;：一个非常全面的，模块化的，可移植的加密工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jedisct1/libsodium&quot; target=&quot;_blank&quot;&gt;libsodium&lt;/a&gt;：基于NaCI的加密库，固执己见，容易使用&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lysator.liu.se/~nisse/nettle/&quot; target=&quot;_blank&quot;&gt;Nettle&lt;/a&gt; 底层的加密库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.openssl.org/&quot; target=&quot;_blank&quot;&gt;OpenSSL&lt;/a&gt; ： 一个强大的，商用的，功能齐全的，开放源代码的加密库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kokke/tiny-AES128-C&quot; target=&quot;_blank&quot;&gt;Tiny AES128 in C&lt;/a&gt; ：用C实现的一个小巧，可移植的实现了AES128ESB的加密算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;数据库&lt;/h3&gt;
&lt;p&gt;数据库，SQL服务器，ODBC驱动程序和工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/paulftw/hiberlite&quot; target=&quot;_blank&quot;&gt;hiberlite&lt;/a&gt; ：用于Sqlite3的C++对象关系映射&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/redis/hiredis&quot; target=&quot;_blank&quot;&gt;Hiredis&lt;/a&gt;： 用于Redis数据库的很简单的C客户端库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/leveldb&quot; target=&quot;_blank&quot;&gt;LevelDB&lt;/a&gt;： 快速键值存储库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://symas.com/mdb/&quot; target=&quot;_blank&quot;&gt;LMDB&lt;/a&gt;：符合数据库四大基本元素的嵌入键值存储&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tangentsoft.net/mysql++/&quot; target=&quot;_blank&quot;&gt;MySQL++&lt;/a&gt;：封装了MySql的C API的C++ 包装器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/rocksdb&quot; target=&quot;_blank&quot;&gt;RocksDB&lt;/a&gt;：来自Facebook的嵌入键值的快速存储&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlite.org/&quot; target=&quot;_blank&quot;&gt;SQLite&lt;/a&gt;：一个完全嵌入式的，功能齐全的关系数据库，只有几百KB，可以正确包含到你的项目中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;调试&lt;/h3&gt;
&lt;p&gt;调试库， 内存和资源泄露检测，单元测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/master/libs/test/doc/html/index.html&quot; target=&quot;_blank&quot;&gt;Boost.Test&lt;/a&gt;：Boost测试库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/philsquared/Catch&quot; target=&quot;_blank&quot;&gt;Catch&lt;/a&gt;：一个很时尚的，C++原生的框架，只包含头文件，用于单元测试，测试驱动开发和行为驱动开发。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.freedesktop.org/wiki/Software/cppunit/&quot; target=&quot;_blank&quot;&gt;CppUnit&lt;/a&gt;：由JUnit移植过来的C++测试框架&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cmake.org/cmake/help/v2.8.8/ctest.html&quot; target=&quot;_blank&quot;&gt;CTest&lt;/a&gt;：CMake测试驱动程序&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/googletest/&quot; target=&quot;_blank&quot;&gt;googletest&lt;/a&gt;：谷歌C++测试框架&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/deplinenoise/ig-debugheap&quot; target=&quot;_blank&quot;&gt;ig-debugheap&lt;/a&gt;：用于跟踪内存错误的多平台调试堆&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zorgnax/libtap&quot; target=&quot;_blank&quot;&gt;libtap&lt;/a&gt;：用C语言编写测试&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.almostinfinite.com/memtrack.html&quot; target=&quot;_blank&quot;&gt;MemTrack&lt;/a&gt; —用于C++跟踪内存分配&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bitbucket.org/jonasmeyer/microprofile/overview&quot; target=&quot;_blank&quot;&gt;microprofile&lt;/a&gt;- 跨平台的网络试图分析器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jera.com/techinfo/jtns/jtn002.html&quot; target=&quot;_blank&quot;&gt;minUnit&lt;/a&gt; ：使用C写的迷你单元测试框架，只使用了两个宏&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Celtoys/Remotery&quot; target=&quot;_blank&quot;&gt;Remotery&lt;/a&gt;：用于web视图的单一C文件分析器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://unittest-cpp.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;UnitTest++&lt;/a&gt;：轻量级的C++单元测试框架&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;游戏引擎&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cocos2d-x.org/&quot; target=&quot;_blank&quot;&gt;Cocos2d-x&lt;/a&gt; ：一个跨平台框架，用于构建2D游戏，互动图书，演示和其他图形应用程序。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gritengine.com/&quot; target=&quot;_blank&quot;&gt;Grit&lt;/a&gt; ：社区项目，用于构建一个免费的游戏引擎，实现开放的世界3D游戏。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://irrlicht.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Irrlicht&lt;/a&gt; ：C++语言编写的开源高性能的实时#D引擎&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://polycode.org/&quot; target=&quot;_blank&quot;&gt;Polycode&lt;/a&gt;：C++实现的用于创建游戏的开源框架（与Lua绑定）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;图形用户界面&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://cegui.org.uk/&quot; target=&quot;_blank&quot;&gt;CEGUI&lt;/a&gt; ： 很灵活的跨平台GUI库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.fltk.org/index.php&quot; target=&quot;_blank&quot;&gt;FLTK&lt;/a&gt; ：快速，轻量级的跨平台的C++GUI工具包。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gtk.org/&quot; target=&quot;_blank&quot;&gt;GTK+&lt;/a&gt;： 用于创建图形用户界面的跨平台工具包&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gtkmm.org/en/&quot; target=&quot;_blank&quot;&gt;gtkmm&lt;/a&gt; ：用于受欢迎的GUI库GTK+的官方C++接口。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ocornut/imgui&quot; target=&quot;_blank&quot;&gt;imgui&lt;/a&gt;：拥有最小依赖关系的立即模式图形用户界面&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://librocket.com/&quot; target=&quot;_blank&quot;&gt;libRocket&lt;/a&gt; ：&lt;a href=&quot;http://librocket.com/&quot; target=&quot;_blank&quot;&gt;libRocket&lt;/a&gt; 是一个C++ HTML/CSS 游戏接口中间件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mygui.info/&quot; target=&quot;_blank&quot;&gt;MyGUI&lt;/a&gt; ：快速，灵活，简单的GUI&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://invisible-island.net/ncurses/&quot; target=&quot;_blank&quot;&gt;Ncurses&lt;/a&gt;：终端用户界面&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qcustomplot.com/&quot; target=&quot;_blank&quot;&gt;QCustomPlot&lt;/a&gt; ：没有更多依赖关系的Qt绘图控件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qwt.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Qwt&lt;/a&gt; ：用户与技术应用的Qt 控件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qwtplot3d.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;QwtPlot3D&lt;/a&gt; ：功能丰富的基于Qt/OpenGL的C++编程库，本质上提供了一群3D控件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Twolewis/OtterUI&quot; target=&quot;_blank&quot;&gt;OtterUI&lt;/a&gt; ：&lt;a href=&quot;https://github.com/Twolewis/OtterUI&quot; target=&quot;_blank&quot;&gt;OtterUI&lt;/a&gt; 是用于嵌入式系统和互动娱乐软件的用户界面开发解决方案&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pdcurses.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;PDCurses&lt;/a&gt; 包含源代码和预编译库的公共图形函数库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wxwidgets.org/&quot; target=&quot;_blank&quot;&gt;wxWidgets&lt;/a&gt; C++库，允许开发人员使用一个代码库可以为widows， Mac OS X，Linux和其他平台创建应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;图形&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bkaradzic/bgfx&quot; target=&quot;_blank&quot;&gt;bgfx&lt;/a&gt;：跨平台的渲染库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cairographics.org/&quot; target=&quot;_blank&quot;&gt;Cairo&lt;/a&gt;：支持多种输出设备的2D图形库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/horde3d/Horde3D&quot; target=&quot;_blank&quot;&gt;Horde3D&lt;/a&gt; 一个小型的3D渲染和动画引擎&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mosra/magnum&quot; target=&quot;_blank&quot;&gt;magnum&lt;/a&gt; C++11和OpenGL 2D/3D 图形引擎&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ogre3d.org/&quot; target=&quot;_blank&quot;&gt;Ogre 3D&lt;/a&gt; 用C++编写的一个面向场景，实时，灵活的3D渲染引擎（并非游戏引擎）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.openscenegraph.org/&quot; target=&quot;_blank&quot;&gt;OpenSceneGraph&lt;/a&gt; 具有高性能的开源3D图形工具包&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.panda3d.org/&quot; target=&quot;_blank&quot;&gt;Panda3D&lt;/a&gt; 用于3D渲染和游戏开发的框架，用Python和C++编写。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/skia&quot; target=&quot;_blank&quot;&gt;Skia&lt;/a&gt; 用于绘制文字，图形和图像的完整的2D图形库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/urho3d/Urho3D&quot; target=&quot;_blank&quot;&gt;urho3d&lt;/a&gt; 跨平台的渲染和游戏引擎。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;图像处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_56_0/libs/gil/doc/index.html&quot; target=&quot;_blank&quot;&gt;Boost.GIL&lt;/a&gt;：通用图像库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cimg.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;CImg&lt;/a&gt; ：用于图像处理的小型开源C++工具包&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.xdp.it/cximage.htm&quot; target=&quot;_blank&quot;&gt;CxImage&lt;/a&gt; ：用于加载，保存，显示和转换的图像处理和转换库，可以处理的图片格式包括 BMP, JPEG, GIF, PNG, TIFF, MNG, ICO, PCX, TGA, WMF, WBMP, JBG, J2K。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://freeimage.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;FreeImage&lt;/a&gt; ：开源库，支持现在多媒体应用所需的通用图片格式和其他格式。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gdcm.sourceforge.net/wiki/index.php/Main_Page&quot; target=&quot;_blank&quot;&gt;GDCM&lt;/a&gt;：Grassroots DICOM 库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.itk.org/&quot; target=&quot;_blank&quot;&gt;ITK&lt;/a&gt;：跨平台的开源图像分析系统&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.imagemagick.org/script/api.php&quot; target=&quot;_blank&quot;&gt;Magick++&lt;/a&gt;：ImageMagick程序的C++接口&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.imagemagick.org/script/api.php&quot; target=&quot;_blank&quot;&gt;MagickWnd&lt;/a&gt;：ImageMagick程序的C++接口&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://opencv.org/&quot; target=&quot;_blank&quot;&gt;OpenCV&lt;/a&gt; ： 开源计算机视觉类库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/tesseract-ocr/&quot; target=&quot;_blank&quot;&gt;tesseract-ocr&lt;/a&gt;：OCR引擎&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ukoethe/vigra&quot; target=&quot;_blank&quot;&gt;VIGRA&lt;/a&gt; ：用于图像分析通用C++计算机视觉库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vtk.org/&quot; target=&quot;_blank&quot;&gt;VTK&lt;/a&gt; ：用于3D计算机图形学，图像处理和可视化的开源免费软件系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;国际化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/gettext/&quot; target=&quot;_blank&quot;&gt;gettext&lt;/a&gt; ：GNU `gettext&amp;#8217;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://site.icu-project.org/&quot; target=&quot;_blank&quot;&gt;IBM ICU&lt;/a&gt;：提供Unicode 和全球化支持的C、C++ 和Java库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/libiconv/&quot; target=&quot;_blank&quot;&gt;libiconv&lt;/a&gt; ：用于不同字符编码之间的编码转换库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Jason&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cesanta/frozen&quot; target=&quot;_blank&quot;&gt;frozen&lt;/a&gt; ： C/C++的Jason解析生成器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/akheron/jansson&quot; target=&quot;_blank&quot;&gt;Jansson&lt;/a&gt; ：进行编解码和处理Jason数据的C语言库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrismanning/jbson&quot; target=&quot;_blank&quot;&gt;jbson&lt;/a&gt; ：C++14中构建和迭代BSON data,和Json 文档的库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jeaye/jeayeson&quot; target=&quot;_blank&quot;&gt;JeayeSON&lt;/a&gt;：非常健全的C++ JSON库，只包含头文件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hjiang/jsonxx&quot; target=&quot;_blank&quot;&gt;JSON++&lt;/a&gt; ： C++ JSON 解析器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/udp/json-parser&quot; target=&quot;_blank&quot;&gt;json-parser&lt;/a&gt;：用可移植的ANSI C编写的JSON解析器，占用内存非常少&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dropbox/json11&quot; target=&quot;_blank&quot;&gt;json11&lt;/a&gt; ：一个迷你的C++11 JSON库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amir-s/jute&quot; target=&quot;_blank&quot;&gt;jute&lt;/a&gt; ：非常简单的C++ JSON解析器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vincenthz/libjson&quot; target=&quot;_blank&quot;&gt;ibjson&lt;/a&gt;：C语言中的JSON解析和打印库，很容易和任何模型集成。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/libjson/&quot; target=&quot;_blank&quot;&gt;libjson&lt;/a&gt;：轻量级的JSON库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kazuho/picojson&quot; target=&quot;_blank&quot;&gt;PicoJSON&lt;/a&gt;：C++中JSON解析序列化，只包含头文件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gaudecker/qt-json&quot; target=&quot;_blank&quot;&gt;qt-json&lt;/a&gt; ：用于JSON数据和 QVariant层次间的相互解析的简单类&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/flavio/qjson&quot; target=&quot;_blank&quot;&gt;QJson&lt;/a&gt;：将JSON数据映射到QVariant对象的基于Qt的库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/miloyip/rapidjson&quot; target=&quot;_blank&quot;&gt;RapidJSON&lt;/a&gt;： 用于C++的快速JSON 解析生成器，包含SAX和DOM两种风格的API&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lloyd/yajl&quot; target=&quot;_blank&quot;&gt;YAJL&lt;/a&gt; ：C语言中快速流JSON解析库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;日志&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_56_0/libs/log/doc/html/index.html&quot; target=&quot;_blank&quot;&gt;Boost.Log&lt;/a&gt; ：设计非常模块化，并且具有扩展性&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/easylogging/easyloggingpp&quot; target=&quot;_blank&quot;&gt;easyloggingpp&lt;/a&gt;：C++日志库，只包含单一的头文件。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://log4cpp.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Log4cpp&lt;/a&gt; ：一系列C++类库，灵活添加日志到文件，系统日志，IDSA和其他地方。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.templog.org/&quot; target=&quot;_blank&quot;&gt;templog&lt;/a&gt;：轻量级C++库，可以添加日志到你的C++应用程序中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;机器学习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/BVLC/caffe&quot; target=&quot;_blank&quot;&gt;Caffe&lt;/a&gt; ：快速的神经网络框架&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/liuliu/ccv&quot; target=&quot;_blank&quot;&gt;CCV&lt;/a&gt; ：以C语言为核心的现代计算机视觉库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mlpack.org/&quot; target=&quot;_blank&quot;&gt;mlpack&lt;/a&gt; ：可扩展的C++机器学习库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Itseez/opencv&quot; target=&quot;_blank&quot;&gt;OpenCV&lt;/a&gt;：开源计算机视觉库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GHamrouni/Recommender&quot; target=&quot;_blank&quot;&gt;Recommender&lt;/a&gt;：使用协同过滤进行产品推荐/建议的C语言库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shogun-toolbox/shogun&quot; target=&quot;_blank&quot;&gt;SHOGUN&lt;/a&gt;：Shogun 机器学习工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/sofia-ml/&quot; target=&quot;_blank&quot;&gt;sofia-ml&lt;/a&gt; ：用于机器学习的快速增量算法套件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;数学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://arma.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Armadillo&lt;/a&gt; ：高质量的C++线性代数库，速度和易用性做到了很好的平衡。语法和MatlAB很相似&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/blaze-lib/&quot; target=&quot;_blank&quot;&gt;blaze&lt;/a&gt;：高性能的C++数学库，用于密集和稀疏算法。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ceres-solver.org/&quot; target=&quot;_blank&quot;&gt;ceres-solver&lt;/a&gt; ：来自谷歌的C++库，用于建模和解决大型复杂非线性最小平方问题。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cgal.org/&quot; target=&quot;_blank&quot;&gt;CGal&lt;/a&gt;： 高效，可靠的集合算法集合&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cmldev.net/&quot; target=&quot;_blank&quot;&gt;cml&lt;/a&gt; ：用于游戏和图形的免费C++数学库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eigen.tuxfamily.org/&quot; target=&quot;_blank&quot;&gt;Eigen&lt;/a&gt; ：高级C++模板头文件库，包括线性代数，矩阵，向量操作，数值解决和其他相关的算法。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ggt.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;GMTL&lt;/a&gt;：数学图形模板库是一组广泛实现基本图形的工具。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gmplib.org/&quot; target=&quot;_blank&quot;&gt;GMP&lt;/a&gt;：用于个高精度计算的C/C++库，处理有符号整数，有理数和浮点数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;多媒体&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gstreamer.freedesktop.org/&quot; target=&quot;_blank&quot;&gt;GStreamer&lt;/a&gt; ：构建媒体处理组件图形的库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.live555.com/liveMedia/&quot; target=&quot;_blank&quot;&gt;LIVE555 Streaming Media&lt;/a&gt; ：使用开放标准协议(RTP/RTCP, RTSP, SIP) 的多媒体流库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.videolan.org/LibVLC&quot; target=&quot;_blank&quot;&gt;libVLC&lt;/a&gt; ：libVLC (VLC SDK)媒体框架&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wang-bin/QtAV&quot; target=&quot;_blank&quot;&gt;QtAv&lt;/a&gt;：基于Qt和FFmpeg的多媒体播放框架，能够帮助你轻而易举地编写出一个播放器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.libsdl.org/&quot; target=&quot;_blank&quot;&gt;SDL&lt;/a&gt; ：简单直控媒体层&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sfml-dev.org/&quot; target=&quot;_blank&quot;&gt;SFML&lt;/a&gt; ：快速，简单的多媒体库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;网络&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.wustl.edu/~schmidt/ACE.html&quot; target=&quot;_blank&quot;&gt;ACE&lt;/a&gt;：C++面向对象网络变成工具包&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://think-async.com/&quot; target=&quot;_blank&quot;&gt;Boost.Asio&lt;/a&gt;：用于网络和底层I/O编程的跨平台的C++库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://casablanca.codeplex.com/&quot; target=&quot;_blank&quot;&gt;Casablanca&lt;/a&gt;：C++ REST SDK&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cpp-netlib.org/&quot; target=&quot;_blank&quot;&gt;cpp-netlib&lt;/a&gt;：高级网络编程的开源库集合&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rxi/dyad&quot; target=&quot;_blank&quot;&gt;Dyad.c&lt;/a&gt;：C语言的异步网络&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://curl.haxx.se/libcurl/&quot; target=&quot;_blank&quot;&gt;libcurl&lt;/a&gt; :多协议文件传输库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cesanta/mongoose&quot; target=&quot;_blank&quot;&gt;Mongoose&lt;/a&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;：&lt;/span&gt;非常轻量级的网络服务器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chenshuo/muduo&quot; target=&quot;_blank&quot;&gt;Muduo&lt;/a&gt; ：用于Linux多线程服务器的C++非阻塞网络库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cesanta/net_skeleton&quot; target=&quot;_blank&quot;&gt;net_skeleton&lt;/a&gt; ：C/C++的TCP 客户端/服务器库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/riolet/nope.c&quot; target=&quot;_blank&quot;&gt;nope.c&lt;/a&gt; ：基于C语言的超轻型软件平台，用于可扩展的服务器端和网络应用。 对于C编程人员，可以考虑node.js&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/davidmoreno/onion&quot; target=&quot;_blank&quot;&gt;Onion&lt;/a&gt; :C语言HTTP服务器库，其设计为轻量级，易使用。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pocoproject&quot; target=&quot;_blank&quot;&gt;POCO&lt;/a&gt;：用于构建网络和基于互联网应用程序的C++类库，可以运行在桌面，服务器，移动和嵌入式系统。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/OculusVR/RakNet&quot; target=&quot;_blank&quot;&gt;RakNet&lt;/a&gt;：为游戏开发人员提供的跨平台的开源C++网络引擎。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vinipsmaker/tufao&quot; target=&quot;_blank&quot;&gt;Tuf o&lt;/a&gt; ：用于Qt之上的C++构建的异步Web框架。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zaphoyd/websocketpp&quot; target=&quot;_blank&quot;&gt;WebSocket++&lt;/a&gt; ：基于C++/Boost Aiso的websocket 客户端/服务器库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zeromq.org/&quot; target=&quot;_blank&quot;&gt;ZeroMQ&lt;/a&gt; ：高速，模块化的异步通信库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;物理学&lt;/h3&gt;
&lt;p&gt;动力学仿真引擎&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/box2d/&quot; target=&quot;_blank&quot;&gt;Box2D&lt;/a&gt;：2D的游戏物理引擎。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bulletphysics/bullet3&quot; target=&quot;_blank&quot;&gt;Bullet&lt;/a&gt; ：3D的游戏物理引擎。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/slembcke/Chipmunk2D&quot; target=&quot;_blank&quot;&gt;Chipmunk&lt;/a&gt; ：快速，轻量级的2D游戏物理库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/liquidfun&quot; target=&quot;_blank&quot;&gt;LiquidFun&lt;/a&gt;：2D的游戏物理引擎&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ode.org/&quot; target=&quot;_blank&quot;&gt;ODE&lt;/a&gt; ：开放动力学引擎-开源，高性能库，模拟刚体动力学。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vanderlin/ofxBox2d&quot; target=&quot;_blank&quot;&gt;ofxBox2d&lt;/a&gt;：Box2D开源框架包装器。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/simbody/simbody&quot; target=&quot;_blank&quot;&gt;Simbody&lt;/a&gt; ：高性能C++多体动力学/物理库，模拟关节生物力学和机械系统，像车辆，机器人和人体骨骼。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;机器人学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://moos-ivp.org/&quot; target=&quot;_blank&quot;&gt;MOOS-IvP&lt;/a&gt; ：一组开源C++模块，提供机器人平台的自主权，尤其是自主的海洋车辆。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mrpt.org/&quot; target=&quot;_blank&quot;&gt;MRPT&lt;/a&gt;：移动机器人编程工具包&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/PointCloudLibrary/pcl&quot; target=&quot;_blank&quot;&gt;PCL&lt;/a&gt; ：点云库是一个独立的，大规模的开放项目，用于2D/3D图像和点云处理。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.roboticslibrary.org/&quot; target=&quot;_blank&quot;&gt;Robotics Library (RL)&lt;/a&gt;： 一个独立的C++库，包括机器人动力学，运动规划和控制。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.robwork.dk/jrobwork/&quot; target=&quot;_blank&quot;&gt;RobWork&lt;/a&gt;：一组C++库的集合，用于机器人系统的仿真和控制。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.ros.org/&quot; target=&quot;_blank&quot;&gt;ROS&lt;/a&gt; ：机器人操作系统，提供了一些库和工具帮助软件开发人员创建机器人应用程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;科学计算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.fftw.org/&quot; target=&quot;_blank&quot;&gt;FFTW&lt;/a&gt; :用一维或者多维计算DFT的C语言库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/gsl/&quot; target=&quot;_blank&quot;&gt;GSL&lt;/a&gt;：GNU科学库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;脚本&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChaiScript/ChaiScript/&quot; target=&quot;_blank&quot;&gt;ChaiScript&lt;/a&gt; ：用于C++的易于使用的嵌入式脚本语言。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lua.org/&quot; target=&quot;_blank&quot;&gt;Lua&lt;/a&gt; ：用于配置文件和基本应用程序脚本的小型快速脚本引擎。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dafrito/luacxx&quot; target=&quot;_blank&quot;&gt;luacxx&lt;/a&gt;：用于创建Lua绑定的C++ 11 API&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.swig.org/&quot; target=&quot;_blank&quot;&gt;SWIG&lt;/a&gt; ：一个可以让你的C++代码链接到JavaScript，Perl，PHP，Python，Tcl和Ruby的包装器/接口生成器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cesanta/v7&quot; target=&quot;_blank&quot;&gt;V7&lt;/a&gt;：嵌入式的JavaScript 引擎。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/v8/&quot; target=&quot;_blank&quot;&gt;V8&lt;/a&gt; ：谷歌的快速JavaScript引擎，可以被嵌入到任何C++应用程序中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;序列化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kentonv.github.io/capnproto/&quot; target=&quot;_blank&quot;&gt;Cap&amp;#8217;n Proto&lt;/a&gt; ：快速数据交换格式和RPC系统。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/USCiLab/cereal&quot; target=&quot;_blank&quot;&gt;cereal&lt;/a&gt; ：C++11 序列化库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/flatbuffers&quot; target=&quot;_blank&quot;&gt;FlatBuffers&lt;/a&gt; ：内存高效的序列化库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/msgpack/msgpack-c&quot; target=&quot;_blank&quot;&gt;MessagePack&lt;/a&gt; ：C/C++的高效二进制序列化库，例如 JSON&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/protobuf/&quot; target=&quot;_blank&quot;&gt;protobuf&lt;/a&gt; ：协议缓冲，谷歌的数据交换格式。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/protobuf-c/protobuf-c&quot; target=&quot;_blank&quot;&gt;protobuf-c&lt;/a&gt; ：C语言的协议缓冲实现&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/real-logic/simple-binary-encoding&quot; target=&quot;_blank&quot;&gt;SimpleBinaryEncoding&lt;/a&gt;：用于低延迟应用程序的对二进制格式的应用程序信息的编码和解码。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot;&gt;Thrift&lt;/a&gt; ：高效的跨语言IPC/RPC，用于C++，Java，Python，PHP，C#和其它多种语言中，最初由Twitter开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;视频&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webmproject.org/code/&quot; target=&quot;_blank&quot;&gt;libvpx&lt;/a&gt; ：VP8/VP9编码解码SDK&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ffmpeg.org/&quot; target=&quot;_blank&quot;&gt;FFmpeg&lt;/a&gt; ：一个完整的，跨平台的解决方案，用于记录，转换视频和音频流。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/strukturag/libde265&quot; target=&quot;_blank&quot;&gt;libde265&lt;/a&gt; ：开放的h.265视频编解码器的实现。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cisco/openh264&quot; target=&quot;_blank&quot;&gt;OpenH264&lt;/a&gt;：开源H.364 编解码器。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.theora.org/&quot; target=&quot;_blank&quot;&gt;Theora&lt;/a&gt; ：免费开源的视频压缩格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;虚拟机&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tekknolagi/carp&quot; target=&quot;_blank&quot;&gt;CarpVM&lt;/a&gt;：C中有趣的VM，让我们一起来看看这个。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/micropython/micropython&quot; target=&quot;_blank&quot;&gt;MicroPython&lt;/a&gt; ：旨在实现单片机上Python3.x的实现&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jakogut/tinyvm&quot; target=&quot;_blank&quot;&gt;TinyVM&lt;/a&gt;：用纯粹的ANSI C编写的小型，快速，轻量级的虚拟机。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Web应用框架&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bel2125/civetweb&quot; target=&quot;_blank&quot;&gt;Civetweb&lt;/a&gt; ：提供易于使用，强大的，C/C++嵌入式Web服务器，带有可选的CGI，SSL和Lua支持。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cppcms.com/&quot; target=&quot;_blank&quot;&gt;CppCMS&lt;/a&gt; ：免费高性能的Web开发框架（不是 CMS）.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ipkn/crow&quot; target=&quot;_blank&quot;&gt;Crow&lt;/a&gt; ：一个C++微型web框架（灵感来自于Python Flask）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kore.io/&quot; target=&quot;_blank&quot;&gt;Kore&lt;/a&gt; :使用C语言开发的用于web应用程序的超快速和灵活的web服务器/框架。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.coralbits.com/libonion/&quot; target=&quot;_blank&quot;&gt;libOnion&lt;/a&gt;：轻量级的库，帮助你使用C编程语言创建web服务器。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jlaine/qdjango/&quot; target=&quot;_blank&quot;&gt;QDjango&lt;/a&gt;：使用C++编写的，基于Qt库的web框架，试图效仿Django API，因此得此名。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webtoolkit.eu/wt&quot; target=&quot;_blank&quot;&gt;Wt&lt;/a&gt; ：开发Web应用的C++库。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;XML&lt;/h3&gt;
&lt;p&gt;XML就是个垃圾，xml的解析很烦人，对于计算机它也是个灾难。这种糟糕的东西完全没有存在的理由了。-Linus Torvalds&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.libexpat.org/&quot; target=&quot;_blank&quot;&gt;Expat&lt;/a&gt; ：用C语言编写的xml解析库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://xmlsoft.org/&quot; target=&quot;_blank&quot;&gt;Libxml2&lt;/a&gt; ：Gnome的xml C解析器和工具包&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://libxmlplusplus.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;libxml++&lt;/a&gt; ：C++的xml解析器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pugixml.org/&quot; target=&quot;_blank&quot;&gt;PugiXML&lt;/a&gt; ：用于C++的，支持XPath的轻量级，简单快速的XML解析器。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rapidxml.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;RapidXml&lt;/a&gt; ：试图创建最快速的XML解析器，同时保持易用性，可移植性和合理的W3C兼容性。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/tinyxml/&quot; target=&quot;_blank&quot;&gt;TinyXML&lt;/a&gt; ：简单小型的C++XML解析器，可以很容易地集成到其它项目中。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/leethomason/tinyxml2&quot; target=&quot;_blank&quot;&gt;TinyXML2&lt;/a&gt;：简单快速的C++CML解析器，可以很容易集成到其它项目中。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/ticpp/&quot; target=&quot;_blank&quot;&gt;TinyXML++&lt;/a&gt;：TinyXML的一个全新的接口，使用了C++的许多许多优势，模板，异常和更好的异常处理。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://xerces.apache.org/xerces-c/&quot; target=&quot;_blank&quot;&gt;Xerces-C++&lt;/a&gt; ：用可移植的C++的子集编写的XML验证解析器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;多项混杂&lt;/h3&gt;
&lt;p&gt;一些有用的库或者工具，但是不适合上面的分类，或者还没有分类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cppformat/cppformat&quot; target=&quot;_blank&quot;&gt;C++ Format&lt;/a&gt; ：C++的小型，安全和快速格式化库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/casacore/&quot; target=&quot;_blank&quot;&gt;casacore&lt;/a&gt; ：从aips++ 派生的一系列C++核心库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/louisdx/cxx-prettyprint&quot; target=&quot;_blank&quot;&gt;cxx-prettyprint&lt;/a&gt;：用于C++容器的打印库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dynaforms.com/&quot; target=&quot;_blank&quot;&gt;DynaPDF&lt;/a&gt; ：易于使用的PDF生成库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/leafsr/gcc-poison&quot; target=&quot;_blank&quot;&gt;gcc-poison&lt;/a&gt; ：帮助开发人员禁止应用程序中的不安全的C/C++函数的简单的头文件。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/googlemock/&quot; target=&quot;_blank&quot;&gt;googlemock&lt;/a&gt;：编写和使用C++模拟类的库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/joyent/http-parser&quot; target=&quot;_blank&quot;&gt;HTTP Parser&lt;/a&gt; ：C的http请求/响应解析器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/anrieff/libcpuid&quot; target=&quot;_blank&quot;&gt;libcpuid&lt;/a&gt; ：用于x86 CPU检测盒特征提取的小型C库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/avati/libevil&quot; target=&quot;_blank&quot;&gt;libevil&lt;/a&gt; ：许可证管理器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.libusb.org/&quot; target=&quot;_blank&quot;&gt;libusb&lt;/a&gt;：允许移动访问USB设备的通用USB库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pcre.org/&quot; target=&quot;_blank&quot;&gt;PCRE&lt;/a&gt;：正则表达式C库，灵感来自于Perl中正则表达式的功能。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.deltavsoft.com/&quot; target=&quot;_blank&quot;&gt;Remote Call Framework&lt;/a&gt; ：C++的进程间通信框架。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://scintilla.org/&quot; target=&quot;_blank&quot;&gt;Scintilla&lt;/a&gt; ：开源的代码编辑控件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wjwwood/serial&quot; target=&quot;_blank&quot;&gt;Serial Communication Library&lt;/a&gt; ：C++语言编写的跨平台，串口库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/antirez/sds&quot; target=&quot;_blank&quot;&gt;SDS&lt;/a&gt;：C的简单动态字符串库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cesanta/sldr&quot; target=&quot;_blank&quot;&gt;SLDR&lt;/a&gt; ：超轻的DNS解析器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cesanta/slre&quot; target=&quot;_blank&quot;&gt;SLRE&lt;/a&gt;： 超轻的正则表达式库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rtv/Stage&quot; target=&quot;_blank&quot;&gt;Stage&lt;/a&gt; ：移动机器人模拟器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/vartypes/&quot; target=&quot;_blank&quot;&gt;VarTypes&lt;/a&gt;：C++/Qt4功能丰富，面向对象的管理变量的框架。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zbar.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;ZBar&lt;/a&gt;：‘条形码扫描器’库，可以扫描照片，图片和视频流中的条形码，并返回结果。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/VerbalExpressions/CppVerbalExpressions&quot; target=&quot;_blank&quot;&gt;CppVerbalExpressions&lt;/a&gt; ：易于使用的C++正则表达式&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/VerbalExpressions/QtVerbalExpressions&quot; target=&quot;_blank&quot;&gt;QtVerbalExpressions&lt;/a&gt;：基于C++ VerbalExpressions 库的Qt库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CopernicaMarketingSoftware/PHP-CPP&quot; target=&quot;_blank&quot;&gt;PHP-CPP&lt;/a&gt;：使用C++来构建PHP扩展的库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bstring.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Better String&lt;/a&gt; ：C的另一个字符串库，功能更丰富，但是没有缓冲溢出问题，还包含了一个C++包装器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;软件&lt;/h3&gt;
&lt;p&gt;用于创建开发环境的软件&lt;/p&gt;
&lt;h3&gt;编译器&lt;/h3&gt;
&lt;p&gt;C/C++编译器列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://clang.llvm.org/&quot; target=&quot;_blank&quot;&gt;Clang&lt;/a&gt; :由苹果公司开发的&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gcc.gnu.org/&quot; target=&quot;_blank&quot;&gt;GCC&lt;/a&gt;：GNU编译器集合&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/c-compilers&quot; target=&quot;_blank&quot;&gt;Intel C++ Compiler&lt;/a&gt; ：由英特尔公司开发&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://llvm.org/&quot; target=&quot;_blank&quot;&gt;LLVM&lt;/a&gt; ：模块化和可重用编译器和工具链技术的集合&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/vstudio/hh386302.aspx&quot; target=&quot;_blank&quot;&gt;Microsoft Visual C++&lt;/a&gt; ：MSVC，由微软公司开发&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.openwatcom.org/index.php/Main_Page&quot; target=&quot;_blank&quot;&gt;Open WatCom&lt;/a&gt; ：Watcom，C，C++和Fortran交叉编译器和工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bellard.org/tcc/&quot; target=&quot;_blank&quot;&gt;TCC&lt;/a&gt; ：轻量级的C语言编译器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;在线编译器&lt;/h3&gt;
&lt;p&gt;在线C/C++编译器列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://codepad.org/&quot; target=&quot;_blank&quot;&gt;codepad&lt;/a&gt; ：在线编译器/解释器，一个简单的协作工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codetwist.com/&quot; target=&quot;_blank&quot;&gt;CodeTwist&lt;/a&gt;：一个简单的在线编译器/解释器，你可以粘贴的C,C++或者Java代码，在线执行并查看结果&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://coliru.stacked-crooked.com/&quot; target=&quot;_blank&quot;&gt;coliru&lt;/a&gt; ：在线编译器/shell， 支持各种C++编译器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gcc.godbolt.org/&quot; target=&quot;_blank&quot;&gt;Compiler Explorer&lt;/a&gt;：交互式编译器，可以进行汇编输出&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.compileonline.com/compile_cpp11_online.php&quot; target=&quot;_blank&quot;&gt;CompileOnline&lt;/a&gt;：Linux上在线编译和执行C++程序&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ideone.com/&quot; target=&quot;_blank&quot;&gt;Ideone&lt;/a&gt; ：一个在线编译器和调试工具，允许你在线编译源代码并执行，支持60多种编程语言。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;调试器&lt;/h3&gt;
&lt;p&gt;C/C++调试器列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Comparison_of_debuggers&quot; target=&quot;_blank&quot;&gt;Comparison of debuggers&lt;/a&gt; ：来自维基百科的调试器列表&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/gdb&quot; target=&quot;_blank&quot;&gt;GDB&lt;/a&gt; ：GNU调试器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://valgrind.org/&quot; target=&quot;_blank&quot;&gt;Valgrind&lt;/a&gt;：内存调试，内存泄露检测，性能分析工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;集成开发环境（IDE）&lt;/h3&gt;
&lt;p&gt;C/C++集成开发环境列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/objc/&quot; target=&quot;_blank&quot;&gt;AppCode&lt;/a&gt; ：构建与JetBrains’ IntelliJ IDEA 平台上的用于Objective-C，C,C++，Java和Java开发的集成开发环境&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/clion/&quot; target=&quot;_blank&quot;&gt;CLion&lt;/a&gt;：来自JetBrains的跨平台的C/C++的集成开发环境&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codeblocks.org/&quot; target=&quot;_blank&quot;&gt;Code::Blocks&lt;/a&gt; ：免费C，C++和Fortran的集成开发环境&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codelite.org/&quot; target=&quot;_blank&quot;&gt;CodeLite&lt;/a&gt; ：另一个跨平台的免费的C/C++集成开发环境&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/orwelldevcpp/&quot; target=&quot;_blank&quot;&gt;Dev-C++&lt;/a&gt;：可移植的C/C++/C++11集成开发环境&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/cdt/&quot; target=&quot;_blank&quot;&gt;Eclipse CDT&lt;/a&gt;：基于Eclipse平台的功能齐全的C和C++集成开发环境&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.geany.org/&quot; target=&quot;_blank&quot;&gt;Geany&lt;/a&gt; ：轻量级的快速，跨平台的集成开发环境。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www-03.ibm.com/software/products/en/visgen&quot; target=&quot;_blank&quot;&gt;IBM VisualAge&lt;/a&gt; ：来自IBM的家庭计算机集成开发环境。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Sarcasm/irony-mode&quot; target=&quot;_blank&quot;&gt;Irony-mode&lt;/a&gt;：由libclang驱动的用于Emacs的C/C++微模式&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.kdevelop.org/&quot; target=&quot;_blank&quot;&gt;KDevelop&lt;/a&gt;：免费开源集成开发环境&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.visualstudio.com/&quot; target=&quot;_blank&quot;&gt;Microsoft Visual Studio&lt;/a&gt; ：来自微软的集成开发环境&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://netbeans.org/&quot; target=&quot;_blank&quot;&gt;NetBeans&lt;/a&gt; ：主要用于Java开发的的集成开发环境，也支持其他语言，尤其是PHP，C/C++和HTML5。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qt-project.org/&quot; target=&quot;_blank&quot;&gt;Qt Creator&lt;/a&gt;：跨平台的C++，Javascript和QML集成开发环境，也是Qt SDK的一部分。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Andersbakken/rtags&quot; target=&quot;_blank&quot;&gt;rtags&lt;/a&gt;：C/C++的客户端服务器索引，用于 跟基于clang的emacs的集成&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/xcode/&quot; target=&quot;_blank&quot;&gt;Xcode&lt;/a&gt; ：由苹果公司开发&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://valloric.github.io/YouCompleteMe/&quot; target=&quot;_blank&quot;&gt;YouCompleteMe&lt;/a&gt;：一个用于Vim的根据你敲的代码快速模糊搜索并进行代码补全的引擎。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;构建系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rizsotto/Bear&quot; target=&quot;_blank&quot;&gt;Bear&lt;/a&gt; ：用于为clang工具生成编译数据库的工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.biicode.com/&quot; target=&quot;_blank&quot;&gt;Biicode&lt;/a&gt;：基于文件的简单依赖管理器。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cmake.org/&quot; target=&quot;_blank&quot;&gt;CMake&lt;/a&gt; ：跨平台的免费开源软件用于管理软件使用独立编译的方法进行构建的过程。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/iauns/cpm&quot; target=&quot;_blank&quot;&gt;CPM&lt;/a&gt;：基于CMake和Git的C++包管理器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.fastbuild.org/docs/home.html&quot; target=&quot;_blank&quot;&gt;FASTBuild&lt;/a&gt;：高性能，开源的构建系统，支持高度可扩展性的编译，缓冲和网络分布。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://martine.github.io/ninja/&quot; target=&quot;_blank&quot;&gt;Ninja&lt;/a&gt; ：专注于速度的小型构建系统&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.scons.org/&quot; target=&quot;_blank&quot;&gt;Scons&lt;/a&gt; ：使用Python scipt 配置的软件构建工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/deplinenoise/tundra&quot; target=&quot;_blank&quot;&gt;tundra&lt;/a&gt; ：高性能的代码构建系统，甚至对于非常大型的软件项目，也能提供最好的增量构建次数。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gittup.org/tup/&quot; target=&quot;_blank&quot;&gt;tup&lt;/a&gt;：基于文件的构建系统，用于后台监控变化的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;静态代码分析&lt;/h3&gt;
&lt;p&gt;提高质量，减少瑕疵的代码分析工具列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://cppcheck.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Cppcheck&lt;/a&gt; ：静态C/C++代码分析工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/include-what-you-use/&quot; target=&quot;_blank&quot;&gt;include-what-you-use&lt;/a&gt; ：使用clang进行代码分析的工具，可以#include在C和C++文件中。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://oclint.org/&quot; target=&quot;_blank&quot;&gt;OCLint&lt;/a&gt; ：用于C，C++和Objective-C的静态源代码分析工具，用于提高质量，减少瑕疵。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://clang-analyzer.llvm.org/index.html&quot; target=&quot;_blank&quot;&gt;Clang Static Analyzer&lt;/a&gt;：查找C，C++和Objective-C程序bug的源代码分析工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis#C.2FC.2B.2B&quot; target=&quot;_blank&quot;&gt;List of tools for static code analysis&lt;/a&gt; ：来自维基百科的静态代码分析工具列表&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;感谢平凡之路和fffaraz 的整理，转载请注明出处。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>谈谈如何提高web服务器并发性能</title>
   <link href="http://http://coolshell.info/blog/2014/12/improve-webServer-performance.html"/>
   <updated>2014-12-05T00:00:00+00:00</updated>
   <id>/blog/2014/12/improve-webServer-performance</id>
   <content type="html">&lt;p&gt;任何一名web工程师都希望自己做的web应用能被越来越多的人使用，如果我们所做的web应用随着用户的增多而宕机了，那么越来越多的人就会变得越来越少了，为了让我们的web应用能有更多人使用，我们就得提升web应用服务端的并发能力。那么我们如何做到这点了，根据现有的并发技术我们会有如下选择：&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;为每个连接创建一个线程&lt;/h2&gt;
&lt;p&gt;　　第一个做法：为了每个客户端发送给服务端的请求都开启一个线程，等请求处理完毕后该线程就被销毁掉，这种做法很直观，但是在现代的web服务器里这种做法已经很少使用了，原因是&lt;strong&gt;创建一个线程，销毁一个线程的开销（开销是指占用计算机系统资源例如：CPU、内存等）是很大的&lt;/strong&gt;，它时常会大于实际处理请求本身的开销，因此这种方式不能充分利用计算机资源，提升并发的效率是有效的，要是还碰到线程安全的问题，使用到线程的锁机制，数据同步技术，并发提升就会受到更大的限制；除此之外，来一个请求就开启一个线程，对线程数量没有任何控制，这就会很容易导致计算机资源被用尽，对于web服务端的稳定性产生很大的威胁。
## 采用线程池技术 ##
　　第二个做法：鉴于上面的问题，我们就产生了第二种提高服务端并发量的方法，首先我们不再是一个客户端请求过来就开启一个新线程，请求处理完毕就销毁线程，而是使用一种池技术即线程池技术，线程池技术就是事先创建一批线程，这批线程被放入到一个池子里，在没有请求到达服务端时候，这些线程都是处于待命状态，当请求到达时候，程序会从线程池里取出一个线程，这个线程处理到达的请求，请求处理完毕，该线程不会被销毁，而是被线程池回收，这种方式使用线程我们&lt;strong&gt;降低了随意创建线程和销毁线程所导致系统开销，同时也控制了服务端线程的数量&lt;/strong&gt;，一般一个线程对应一个请求，也就控制了并发请求的个数，该方案比第一种方案提升了系统的稳定性（控制并发数量，防止并发过多导致服务程序宕机）同时也提升了并发的数量（原因是减少了创建线程和销毁线程的开销，更充分的利用了计算机的系统资源）。但是做法二也是有很大的问题的，具体如下：&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;## 对比 ##
做法二和做法一相比，做法二要好多了，但是这只是和做法一比，如果按照我们设计的目标，做法二并非完美，原因如下：首先做法二会让很多技术不扎实人认为线程池开启多少线程就决定了系统并发的数量，因此出于让系统能处理更多请求以及充分利用计算机资源的考虑，有些人会一开始就把线程池里新建线程的个数设置为最大，一个web应用的并发量在一定时间里都是一个曲线形式，峰值在一定时间范围内都是少数情况，因此一开始就开启最大线程数，自然在大多数时间内都是在浪费系统资源，如果这些被浪费被闲置的计算资源能用来处理请求，或许这些请求处理的效率会更高。此外，一个服务器到底预先开启多少个线程，这个标准很难把控，还有就是不管你用线程池技术还是新建线程的方式，处理请求的数量和线程数量数量是一一对应的关系，如果有一个时间点过来的请求数量正好超出了线程池里线程数量，例如就多了一个，那么这个请求因为找不到对应线程很有可能会被程序所遗弃掉，其实这多的一个请求并没有超出计算机所能承受的负载，而是因为我们程序设计不合理才被遗弃的，这肯定是开发人员所不愿意发生的事情，针对这些问题在java的JDK里提供的线程池做了很好的解决（线程池技术是博大精深的，如果我们没有研究透池技术，还是不要自己去写个而是用现成的）。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;java&quot;&gt;Java线程池相关实现&lt;/h2&gt;
&lt;p&gt;jdk里的线程池对线程池大小的设定使用两个参数，一个是核心线程个数，一个是最大线程个数，核心线程在系统启动时候就会被创建，如果用户请求没有超过核心线程处理能力，那么线程池不会再创建新线程，如果核心线程个数已经处理不过来了，线程池就会开启新线程，新线程第一次创建后，使用完毕后也不是立即对其销毁，也是被会收到线程池里，当线程池里的线程总数超过了最大线程个数，线程池将不会再创建新线程，这种做法让线程数量根据实际请求的情况进行调整，这样既达到了充分利用计算机资源的目的，同时也避免了系统资源的浪费，jdk的线程池还有个超时时间，当超出核心线程的线程在一定时间内一直未被使用，那么这些线程将会被销毁，资源就会被释放，这样就让线程池的线程的数量总是处在一个合理的范围里；如果请求实在太多了，线程池里的线程暂时处理不过来了，jdk的线程池还提供一个队列机制，让这些请求排队等待，当某个线程处理完毕，该线程又会从这个队列里取出一个请求进行处理，这样就避免请求的丢失，jdk的线程池对队列的管理有很多策略，有兴趣的童鞋可以谷歌，这里我还要说的是jdk线程池的安全策略做的很好，如果队列的容量超出了计算机的处理能力，队列会抛弃无法处理的请求，这个也叫做线程池的拒绝策略。&lt;/p&gt;

&lt;p&gt;实际上做法二并非最高效的方案，做法二也没有充分利用好计算机的系统资源，我这里还有做法三了，其具体做法如下：&lt;/p&gt;

&lt;p&gt;首先我要提出一个问题，并发处理一个任务和单线程的处理同样一个任务，那种方式的效率更高？也许有很多人会认为当然是并发处理任务效率更高了，两个人做一件事情总比一个人要厉害吧，这个问题的答案是要看场景的，在单核时代，单线程处理一个任务的效率往往会比并发方式效率更高，为什么呢？因为多线程在单核即单个cpu上运算，cpu并不是也可以并发处理的，cpu每次都只能处理一个计算任务，因此并发任务对于cpu而言就有线程的上下文切换操作，而这种线程上下文的开销是比较大的，因此单核上处理并发请求不一定会比单线程更有效率，但是如果到了多核的计算机，并发任务平均分配给每一个cpu，那么并发处理的效率就会比单线程处理要高很多，因为此时可以避免线程上下文的切换。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;网络请求处理的瓶颈在哪？&lt;/h2&gt;
&lt;p&gt;对于一个网络请求的处理，是由两个不同类型的操作共同完成，这两个操作是CPU的计算操作和IO操作，如果我们以处理效率角度来评判这两个操作，CPU操作效率是光速的，而IO操作就不尽然了，计算机里的IO操作就是对存储数据介质的操作，计算机里有如下几个介质可以存储数据，它们分别是：CPU的一级缓存、二级缓存、内存、硬盘和网络，一级缓存存储和读取数据的能力接近光速，它比二级缓存快个5倍到6倍，但是不管是一级缓存还是二级缓存，它们存储数据量太少了，做不了什么大事情，下面就是内存了，以一级缓存的效率做参照，一级缓存比内存速度快100多倍，到了硬盘存储和读取数据效率就更慢了，一级缓存比硬盘要快1000多万倍，到了网络就慢的更不像话了，一级缓存比网络要快一亿多倍，可见&lt;strong&gt;一个请求处理的效率瓶颈都是由IO引起的&lt;/strong&gt;，而CPU虽然处理很快但是CPU对任务的计算都是一个接着一个处理，假如一个请求首先要等待网络数据的处理再进行CPU运算，那么必然就拖慢了CPU的处理的整体效率，这一慢就是上亿倍了，但是现实中一个网络请求处理就是由这两个操作组合而成的。&lt;/p&gt;

&lt;p&gt;对于IO操作在java里有两种方式，一种方式叫做阻塞的IO，一种方式叫做非阻塞的IO（nio），阻塞的IO就是在做IO操作时候，CPU要等待IO操作，这就造成了CPU计算资源的浪费，浪费的程度上文里已经写到了，是很可怕的，因此我们就想当一个请求一个线程做IO操作时候，CPU不用等待它而是接着处理其他的线程和请求，这种做法效率必然很高，这时候非阻塞IO就登场了，非阻塞IO可以在线程进行IO操作时候让CPU去处理别的线程，那么非阻塞IO怎么做到这一点的呢？非阻塞IO操作在请求和cpu计算之间添加了一个中间层（Selector），请求先发到这个中间层，中间层获取了请求后就直接通知请求发送者，请求接收到了，注意这个时候中间层啥都没干，只是接收了请求，真正的计算任务还没开始哦，这个时候中间层如果要CPU处理那么就让cpu处理，如果计算过程到了要进行IO操作，中间层就告诉cpu不用等我了，中间层就让请求做IO操作，CPU这时候可以处理别的请求，等IO操作做完了，中间层再把任务交给CPU去处理，处理完成后，中间层将处理结果再发送给客户端，这种方式就可以充分利用CPU的计算机资源，有了非阻塞IO其实使用单线程也可以开发多线程任务，甚至这个单线程的处理效率可能比多线程更高，因为它没有线程创建销毁的开销，也没有线程上下文切换的开销。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;其实实现一个非阻塞的请求是个大课题，里面使用到了很多先进和复杂的技术例如：回调函数和轮询等，不里要提到的是像java里netty技术，Apache Mina，nginx，php的并发处理都用到这种机制的原理，特别是现在很火的nodejs它产生的原因就是依靠这种非阻塞的技术来编写更高效的web服务器，可以说nodejs把这种技术用到了极致，不过这里要纠正下，非阻塞是针对IO操作的技术，对于nodejs，netty的实现机制有更好的术语描述就是事件驱动（其实就是使用回调函数，观察者模式实现的）以及异步的IO技术（就是非阻塞的IO技术）。现在我们回到做法三的描述，做法三的核心思想就是让每个线程资源利用率更加有效，做法三是建立在做法二的基础上，使用事件驱动的开发思想，采用非阻塞的IO编程模式，当客户端多个请求发到服务端，服务端可以只用一个线程对这些请求进行处理，利用IO操作的性能瓶颈，充分利用CPU的计算能力，这样就达到一个线程处理多个请求的效率并不比多线程差，甚至还高，同时单线程处理能力的增强也会导致整个web服务并发性能的提升。大家可以想想，按这种方式在一个多核服务器下，假如这个服务器有8个内核，每个内核开启一个线程，这8个线程也许就能承载数千并发量，同时也充分利用每个CPU计算能力，如果我们开启线程越多（当然新增的线程数最好是8的倍数，这样对多核利用率更好）那么并发的效率也就更高，提升是按几何倍数进行的，大家想想nginx，它就采用此模式，所以它刚推出来的时候其并发处理能力是apache服务器的数倍，现在nginx已经和apache一样普及了，事件驱动的异步机制功不可没。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>计算机算法--图算法介绍</title>
   <link href="http://http://coolshell.info/blog/2014/11/graph.html"/>
   <updated>2014-11-29T00:00:00+00:00</updated>
   <id>/blog/2014/11/graph</id>
   <content type="html">&lt;p&gt;##图的定义：&lt;/p&gt;

&lt;p&gt;图（graph）由顶点（vertex）和边（edge）的集合组成，每一条边就是一个点对（v,w)。&lt;/p&gt;

&lt;p&gt;图的种类：地图，电路图，调度图，事物，网络，程序结构&lt;/p&gt;

&lt;p&gt;图的属性：有V个顶点的图最多有V*（V-1）/2条边
&lt;img src=&quot;/images/images/githubpages/graph/graph1.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/images/images/githubpages/graph/graph2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###邻接矩阵：&lt;/p&gt;

&lt;p&gt;邻接矩阵是一个元素为bool值的V&lt;em&gt;V矩阵，若图中存在一条连接顶点V和W的边，折矩阵adj[v][w]=1,否则为0。占用的空间为V&lt;/em&gt;V，当图是稠密时，邻接矩阵是比较合适的表达方法。
&lt;img src=&quot;/images/images/githubpages/graph/graph3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;###邻接表的表示&lt;/p&gt;

&lt;p&gt;对于非稠密的图，使用邻接矩阵有点浪费存储空间，可以使用邻接表，我们维护一个链表向量，给定一个顶点时，可以立即访问其链表,占用的空间为O(V+E)。
&lt;img src=&quot;/images/images/githubpages/graph/graph4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;##深度优先搜索&lt;/p&gt;

&lt;p&gt;###深度优先搜索介绍&lt;/p&gt;

&lt;p&gt;图的深度优先搜索(Depth First Search)，和树的先序遍历比较类似。&lt;/p&gt;

&lt;p&gt;它的思想：假设初始状态是图中所有顶点均未被访问，则从某个顶点v出发，首先访问该顶点，然后依次从它的各个未被访问的邻接点出发深度优先搜索遍历图，直至图中所有和v有路径相通的顶点都被访问到。 若此时尚有其他顶点未被访问到，则另选一个未被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。&lt;/p&gt;

&lt;p&gt;显然，深度优先搜索是一个递归的过程。&lt;/p&gt;

&lt;p&gt;###深度优先搜索图解&lt;/p&gt;

&lt;p&gt;####无向图的深度优先搜索&lt;/p&gt;

&lt;p&gt;下面以”无向图”为例，来对深度优先搜索进行演示。
&lt;img src=&quot;/images/images/githubpages/graph/graph5.jpg&quot; alt=&quot;&quot; /&gt;
对上面的图G1进行深度优先遍历，从顶点A开始。
&lt;img src=&quot;/images/images/githubpages/graph/graph6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第1步：访问A。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第2步：访问(A的邻接点)C。&lt;/p&gt;

    &lt;p&gt;在第1步访问A之后，接下来应该访问的是A的邻接点，即”C,D,F”中的一个。但在本文的实现中，顶点ABCDEFG是按照顺序存储，C在”D和F”的前面，因此，先访问C。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第3步：访问(C的邻接点)B。&lt;/p&gt;

    &lt;p&gt;在第2步访问C之后，接下来应该访问C的邻接点，即”B和D”中一个(A已经被访问过，就不算在内)。而由于B在D之前，先访问B。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第4步：访问(C的邻接点)D。&lt;/p&gt;

    &lt;p&gt;在第3步访问了C的邻接点B之后，B没有未被访问的邻接点；因此，返回到访问C的另一个邻接点D。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第5步：访问(A的邻接点)F。&lt;/p&gt;

    &lt;p&gt;前面已经访问了A，并且访问完了”A的邻接点B的所有邻接点(包括递归的邻接点在内)”；因此，此时返回到访问A的另一个邻接点F。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第6步：访问(F的邻接点)G。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;第7步：访问(G的邻接点)E。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此访问顺序是：A -&amp;gt; C -&amp;gt; B -&amp;gt; D -&amp;gt; F -&amp;gt; G -&amp;gt; E&lt;/p&gt;

&lt;p&gt;####有向图的深度优先搜索&lt;/p&gt;

&lt;p&gt;下面以”有向图”为例，来对深度优先搜索进行演示。
&lt;img src=&quot;/images/images/githubpages/graph/graph7.jpg&quot; alt=&quot;&quot; /&gt;
对上面的图G2进行深度优先遍历，从顶点A开始。
&lt;img src=&quot;/images/images/githubpages/graph/graph8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第1步：访问A。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第2步：访问B。&lt;/p&gt;

    &lt;p&gt;在访问了A之后，接下来应该访问的是A的出边的另一个顶点，即顶点B。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第3步：访问C。&lt;/p&gt;

    &lt;p&gt;在访问了B之后，接下来应该访问的是B的出边的另一个顶点，即顶点C,E,F。在本文实现的图中，顶点ABCDEFG按照顺序存储，因此先访问C。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第4步：访问E。&lt;/p&gt;

    &lt;p&gt;接下来访问C的出边的另一个顶点，即顶点E。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第5步：访问D。&lt;/p&gt;

    &lt;p&gt;接下来访问E的出边的另一个顶点，即顶点B,D。顶点B已经被访问过，因此访问顶点D。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第6步：访问F。&lt;/p&gt;

    &lt;p&gt;接下应该回溯”访问A的出边的另一个顶点F”。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;第7步：访问G。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此访问顺序是：A -&amp;gt; B -&amp;gt; C -&amp;gt; E -&amp;gt; D -&amp;gt; F -&amp;gt; G&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;##广度优先搜索&lt;/p&gt;

&lt;p&gt;###广度优先搜索介绍&lt;/p&gt;

&lt;p&gt;广度优先搜索算法(Breadth First Search)，又称为”宽度优先搜索”或”横向优先搜索”，简称BFS。&lt;/p&gt;

&lt;p&gt;它的思想是：从图中某顶点v出发，在访问了v之后依次访问v的各个未曾访问过的邻接点，然后分别从这些邻接点出发依次访问它们的邻接点，并使得“先被访问的顶点的邻接点先于后被访问的顶点的邻接点被访问，直至图中所有已被访问的顶点的邻接点都被访问到。如果此时图中尚有顶点未被访问，则需要另选一个未曾被访问过的顶点作为新的起始点，重复上述过程，直至图中所有顶点都被访问到为止。&lt;/p&gt;

&lt;p&gt;换句话说，广度优先搜索遍历图的过程是以v为起点，由近至远，依次访问和v有路径相通且路径长度为1,2…的顶点。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;广度优先搜索图解&lt;/h3&gt;

&lt;p&gt;####无向图的广度优先搜索&lt;/p&gt;

&lt;p&gt;下面以”无向图”为例，来对广度优先搜索进行演示。还是以上面的图G1为例进行说明。
&lt;img src=&quot;/images/images/githubpages/graph/graph9.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第1步：访问A。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第2步：依次访问C,D,F。&lt;/p&gt;

    &lt;p&gt;在访问了A之后，接下来访问A的邻接点。前面已经说过，在本文实现中，顶点ABCDEFG按照顺序存储的，C在”D和F”的前面，因此，先访问C。再访问完C之后，再依次访问D,F。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第3步：依次访问B,G。&lt;/p&gt;

    &lt;p&gt;在第2步访问完C,D,F之后，再依次访问它们的邻接点。首先访问C的邻接点B，再访问F的邻接点G。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第4步：访问E。&lt;/p&gt;

    &lt;p&gt;在第3步访问完B,G之后，再依次访问它们的邻接点。只有G有邻接点E，因此访问G的邻接点E。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此访问顺序是：A -&amp;gt; C -&amp;gt; D -&amp;gt; F -&amp;gt; B -&amp;gt; G -&amp;gt; E&lt;/p&gt;

&lt;p&gt;####有向图的广度优先搜索&lt;/p&gt;

&lt;p&gt;下面以”有向图”为例，来对广度优先搜索进行演示。还是以上面的图G2为例进行说明。
&lt;img src=&quot;/images/images/githubpages/graph/graph10.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;第1步：访问A。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;第2步：访问B。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第3步：依次访问C,E,F。&lt;/p&gt;

    &lt;p&gt;在访问了B之后，接下来访问B的出边的另一个顶点，即C,E,F。前面已经说过，在本文实现中，顶点ABCDEFG按照顺序存储的，因此会先访问C，再依次访问E,F。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第4步：依次访问D,G。&lt;/p&gt;

    &lt;p&gt;在访问完C,E,F之后，再依次访问它们的出边的另一个顶点。还是按照C,E,F的顺序访问，C的已经全部访问过了，那么就只剩下E,F；先访问E的邻接点D，再访问F的邻接点G。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此访问顺序是：A -&amp;gt; B -&amp;gt; C -&amp;gt; E -&amp;gt; F -&amp;gt; D -&amp;gt; G&lt;/p&gt;

&lt;p&gt;##搜索算法的源码&lt;/p&gt;

&lt;p&gt;1.邻接矩阵表示的”无向图&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    /**
    * C++: 邻接矩阵表示的&quot;无向图(Matrix Undirected Graph)&quot;
    *
    * @author LippiOuYang
    * @date 2013/04/19
    */
        
        #include &amp;lt;iomanip&amp;gt;
        #include &amp;lt;iostream&amp;gt;
        #include &amp;lt;vector&amp;gt;
        using namespace std;
        
    #define MAX 100
    class MatrixUDG {
	private:
        char mVexs[MAX];    // 顶点集合
        int mVexNum;             // 顶点数
        int mEdgNum;             // 边数
        int mMatrix[MAX][MAX];   // 邻接矩阵

    public:
        // 创建图(自己输入数据)
		MatrixUDG();
        // 创建图(用已提供的矩阵)
        MatrixUDG(char vexs[], int vlen, char edges[][2], int elen);
		~MatrixUDG();

        // 深度优先搜索遍历图
        void DFS();
        // 广度优先搜索（类似于树的层次遍历）
        void BFS();
        // 打印矩阵队列图
        void print();

	private:
        // 读取一个输入字符
        char readChar();
        // 返回ch在mMatrix矩阵中的位置
        int getPosition(char ch);
        // 返回顶点v的第一个邻接顶点的索引，失败则返回-1
        int firstVertex(int v);
        // 返回顶点v相对于w的下一个邻接顶点的索引，失败则返回-1
        int nextVertex(int v, int w);
        // 深度优先搜索遍历图的递归实现
        void DFS(int i, int *visited);

};

/* 
 * 创建图(自己输入数据)
 */
MatrixUDG::MatrixUDG()
{
    char c1, c2;
    int i, p1, p2;
    
    // 输入&quot;顶点数&quot;和&quot;边数&quot;
    cout &amp;lt;&amp;lt; &quot;input vertex number: &quot;;
    cin &amp;gt;&amp;gt; mVexNum;
    cout &amp;lt;&amp;lt; &quot;input edge number: &quot;;
    cin &amp;gt;&amp;gt; mEdgNum;
    if ( mVexNum &amp;lt; 1 || mEdgNum &amp;lt; 1 || (mEdgNum &amp;gt; (mVexNum * (mVexNum-1))))
    {
        cout &amp;lt;&amp;lt; &quot;input error: invalid parameters!&quot; &amp;lt;&amp;lt; endl;
        return ;
    }
    
    // 初始化&quot;顶点&quot;
    for (i = 0; i &amp;lt; mVexNum; i++)
    {
        cout &amp;lt;&amp;lt; &quot;vertex(&quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &quot;): &quot;;
        mVexs[i] = readChar();
    }

    // 初始化&quot;边&quot;
    for (i = 0; i &amp;lt; mEdgNum; i++)
    {
        // 读取边的起始顶点和结束顶点
        cout &amp;lt;&amp;lt; &quot;edge(&quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &quot;): &quot;;
        c1 = readChar();
        c2 = readChar();

        p1 = getPosition(c1);
        p2 = getPosition(c2);
        if (p1==-1 || p2==-1)
        {
            cout &amp;lt;&amp;lt; &quot;input error: invalid edge!&quot; &amp;lt;&amp;lt; endl;
            return ;
        }

        mMatrix[p1][p2] = 1;
        mMatrix[p2][p1] = 1;
    }
}

/*
 * 创建图(用已提供的矩阵)
 *
 * 参数说明：
 *     vexs  -- 顶点数组
 *     vlen  -- 顶点数组的长度
 *     edges -- 边数组
 *     elen  -- 边数组的长度
 */
MatrixUDG::MatrixUDG(char vexs[], int vlen, char edges[][2], int elen)
{
    int i, p1, p2;
    
    // 初始化&quot;顶点数&quot;和&quot;边数&quot;
    mVexNum = vlen;
    mEdgNum = elen;
    // 初始化&quot;顶点&quot;
    for (i = 0; i &amp;lt; mVexNum; i++)
        mVexs[i] = vexs[i];

    // 初始化&quot;边&quot;
    for (i = 0; i &amp;lt; mEdgNum; i++)
    {
        // 读取边的起始顶点和结束顶点
        p1 = getPosition(edges[i][0]);
        p2 = getPosition(edges[i][1]);

        mMatrix[p1][p2] = 1;
        mMatrix[p2][p1] = 1;
    }
}

/* 
 * 析构函数
 */
MatrixUDG::~MatrixUDG() 
{
}

/*
 * 返回ch在mMatrix矩阵中的位置
 */
int MatrixUDG::getPosition(char ch)
{
    int i;
    for(i=0; i&amp;lt;mVexNum; i++)
        if(mVexs[i]==ch)
            return i;
    return -1;
}

/*
 * 读取一个输入字符
 */
char MatrixUDG::readChar()
{
    char ch;

    do {
        cin &amp;gt;&amp;gt; ch;
    } while(!((ch&amp;gt;=&#39;a&#39;&amp;amp;&amp;amp;ch&amp;lt;=&#39;z&#39;) || (ch&amp;gt;=&#39;A&#39;&amp;amp;&amp;amp;ch&amp;lt;=&#39;Z&#39;)));

    return ch;
}


/*
 * 返回顶点v的第一个邻接顶点的索引，失败则返回-1
 */
int MatrixUDG::firstVertex(int v)
{
    int i;

    if (v&amp;lt;0 || v&amp;gt;(mVexNum-1))
        return -1;

    for (i = 0; i &amp;lt; mVexNum; i++)
        if (mMatrix[v][i] == 1)
            return i;

    return -1;
}

/*
 * 返回顶点v相对于w的下一个邻接顶点的索引，失败则返回-1
 */
int MatrixUDG::nextVertex(int v, int w)
{
    int i;

    if (v&amp;lt;0 || v&amp;gt;(mVexNum-1) || w&amp;lt;0 || w&amp;gt;(mVexNum-1))
        return -1;

    for (i = w + 1; i &amp;lt; mVexNum; i++)
        if (mMatrix[v][i] == 1)
            return i;

    return -1;
}

/*
 * 深度优先搜索遍历图的递归实现
 */
void MatrixUDG::DFS(int i, int *visited)
{
    int w;

    visited[i] = 1;
    cout &amp;lt;&amp;lt; mVexs[i] &amp;lt;&amp;lt; &quot; &quot;;
    // 遍历该顶点的所有邻接顶点。若是没有访问过，那么继续往下走
    for (w = firstVertex(i); w &amp;gt;= 0; w = nextVertex(i, w))
    {
        if (!visited[w])
            DFS(w, visited);
    }
       
}

/*
 * 深度优先搜索遍历图
 */
void MatrixUDG::DFS()
{
    int i;
    int visited[MAX];       // 顶点访问标记

    // 初始化所有顶点都没有被访问
    for (i = 0; i &amp;lt; mVexNum; i++)
        visited[i] = 0;

    cout &amp;lt;&amp;lt; &quot;DFS: &quot;;
    for (i = 0; i &amp;lt; mVexNum; i++)
    {
        //printf(&quot;\n== LOOP(%d)\n&quot;, i);
        if (!visited[i])
            DFS(i, visited);
    }
    cout &amp;lt;&amp;lt; endl;
}

/*
 * 广度优先搜索（类似于树的层次遍历）
 */
void MatrixUDG::BFS()
{
    int head = 0;
    int rear = 0;
    int queue[MAX];     // 辅组队列
    int visited[MAX];   // 顶点访问标记
    int i, j, k;

    for (i = 0; i &amp;lt; mVexNum; i++)
        visited[i] = 0;

    cout &amp;lt;&amp;lt; &quot;BFS: &quot;;
    for (i = 0; i &amp;lt; mVexNum; i++)
    {
        if (!visited[i])
        {
            visited[i] = 1;
            cout &amp;lt;&amp;lt; mVexs[i] &amp;lt;&amp;lt; &quot; &quot;;
            queue[rear++] = i;  // 入队列
        }
        while (head != rear) 
        {
            j = queue[head++];  // 出队列
            for (k = firstVertex(j); k &amp;gt;= 0; k = nextVertex(j, k)) //k是为访问的邻接顶点
            {
                if (!visited[k])
                {
                    visited[k] = 1;
                    cout &amp;lt;&amp;lt; mVexs[k] &amp;lt;&amp;lt; &quot; &quot;;
                    queue[rear++] = k;
                }
            }
        }
    }
    cout &amp;lt;&amp;lt; endl;
}

/*
 * 打印矩阵队列图
 */
void MatrixUDG::print()
{
    int i,j;

    cout &amp;lt;&amp;lt; &quot;Martix Graph:&quot; &amp;lt;&amp;lt; endl;
    for (i = 0; i &amp;lt; mVexNum; i++)
    {
        for (j = 0; j &amp;lt; mVexNum; j++)
            cout &amp;lt;&amp;lt; mMatrix[i][j] &amp;lt;&amp;lt; &quot; &quot;;
        cout &amp;lt;&amp;lt; endl;
    }
}


int main()
{
    char vexs[] = {&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;};
    char edges[][2] = {
        {&#39;A&#39;, &#39;C&#39;}, 
        {&#39;A&#39;, &#39;D&#39;}, 
        {&#39;A&#39;, &#39;F&#39;}, 
        {&#39;B&#39;, &#39;C&#39;}, 
        {&#39;C&#39;, &#39;D&#39;}, 
        {&#39;E&#39;, &#39;G&#39;}, 
        {&#39;F&#39;, &#39;G&#39;}};
    int vlen = sizeof(vexs)/sizeof(vexs[0]);
    int elen = sizeof(edges)/sizeof(edges[0]);
    MatrixUDG* pG;

    // 自定义&quot;图&quot;(输入矩阵队列)
    //pG = new MatrixUDG();
    // 采用已有的&quot;图&quot;
    pG = new MatrixUDG(vexs, vlen, edges, elen);

    pG-&amp;gt;print();   // 打印图
    pG-&amp;gt;DFS();     // 深度优先遍历
    pG-&amp;gt;BFS();     // 广度优先遍历

    return 0;
} 2.邻接表表示的&quot;无向图

/**
 * C++: 邻接表表示的&quot;无向图(List Undirected Graph)&quot;
 *
 * @author LippiOuYang
 * @date 2013/04/19
 */

    #include &amp;lt;iomanip&amp;gt;
    #include &amp;lt;iostream&amp;gt;
    #include &amp;lt;vector&amp;gt;
    using namespace std;

#define MAX 100
// 邻接表
class ListUDG
{
    private: // 内部类
        // 邻接表中表对应的链表的顶点
        class ENode
        {
            public:
                int ivex;           // 该边所指向的顶点的位置
                ENode *nextEdge;    // 指向下一条弧的指针
        };

        // 邻接表中表的顶点
        class VNode
        {
            public:
                char data;          // 顶点信息
                ENode *firstEdge;   // 指向第一条依附该顶点的弧
        };

	private: // 私有成员
        int mVexNum;             // 图的顶点的数目
        int mEdgNum;             // 图的边的数目
        VNode mVexs[MAX];

    public:
        // 创建邻接表对应的图(自己输入)
		ListUDG();
        // 创建邻接表对应的图(用已提供的数据)
        ListUDG(char vexs[], int vlen, char edges[][2], int elen);
		~ListUDG();

        // 深度优先搜索遍历图
        void DFS();
        // 广度优先搜索（类似于树的层次遍历）
        void BFS();
        // 打印邻接表图
        void print();

	private:
        // 读取一个输入字符
        char readChar();
        // 返回ch的位置
        int getPosition(char ch);
        // 深度优先搜索遍历图的递归实现
        void DFS(int i, int *visited);
        // 将node节点链接到list的最后
        void linkLast(ENode *list, ENode *node);
};

/*
 * 创建邻接表对应的图(自己输入)
 */
ListUDG::ListUDG()
{
    char c1, c2;
    int v, e;
    int i, p1, p2;
    ENode *node1, *node2;

    // 输入&quot;顶点数&quot;和&quot;边数&quot;
    cout &amp;lt;&amp;lt; &quot;input vertex number: &quot;;
    cin &amp;gt;&amp;gt; mVexNum;
    cout &amp;lt;&amp;lt; &quot;input edge number: &quot;;
    cin &amp;gt;&amp;gt; mEdgNum;
    if ( mVexNum &amp;lt; 1 || mEdgNum &amp;lt; 1 || (mEdgNum &amp;gt; (mVexNum * (mVexNum-1))))
    {
        cout &amp;lt;&amp;lt; &quot;input error: invalid parameters!&quot; &amp;lt;&amp;lt; endl;
        return ;
    }
 
    // 初始化&quot;邻接表&quot;的顶点
    for(i=0; i&amp;lt;mVexNum; i++)
    {
        cout &amp;lt;&amp;lt; &quot;vertex(&quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &quot;): &quot;;
        mVexs[i].data = readChar();
        mVexs[i].firstEdge = NULL;
    }

    // 初始化&quot;邻接表&quot;的边
    for(i=0; i&amp;lt;mEdgNum; i++)
    {
        // 读取边的起始顶点和结束顶点
        cout &amp;lt;&amp;lt; &quot;edge(&quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &quot;): &quot;;
        c1 = readChar();
        c2 = readChar();

        p1 = getPosition(c1);
        p2 = getPosition(c2);
        // 初始化node1
        node1 = new ENode();
        node1-&amp;gt;ivex = p2;
        // 将node1链接到&quot;p1所在链表的末尾&quot;
        if(mVexs[p1].firstEdge == NULL)
          mVexs[p1].firstEdge = node1;
        else
            linkLast(mVexs[p1].firstEdge, node1);
        // 初始化node2
        node2 = new ENode();
        node2-&amp;gt;ivex = p1;
        // 将node2链接到&quot;p2所在链表的末尾&quot;
        if(mVexs[p2].firstEdge == NULL)
          mVexs[p2].firstEdge = node2;
        else
            linkLast(mVexs[p2].firstEdge, node2);
    }
}

/*
 * 创建邻接表对应的图(用已提供的数据)
 */
ListUDG::ListUDG(char vexs[], int vlen, char edges[][2], int elen)
{
    char c1, c2;
    int i, p1, p2;
    ENode *node1, *node2;

    // 初始化&quot;顶点数&quot;和&quot;边数&quot;
    mVexNum = vlen;
    mEdgNum = elen;
    // 初始化&quot;邻接表&quot;的顶点
    for(i=0; i&amp;lt;mVexNum; i++)
    {
        mVexs[i].data = vexs[i];
        mVexs[i].firstEdge = NULL;
    }

    // 初始化&quot;邻接表&quot;的边
    for(i=0; i&amp;lt;mEdgNum; i++)
    {
        // 读取边的起始顶点和结束顶点
        c1 = edges[i][0];
        c2 = edges[i][1];

        p1 = getPosition(c1);
        p2 = getPosition(c2);
        // 初始化node1
        node1 = new ENode();
        node1-&amp;gt;ivex = p2;
        // 将node1链接到&quot;p1所在链表的末尾&quot;
        if(mVexs[p1].firstEdge == NULL)
          mVexs[p1].firstEdge = node1;
        else
            linkLast(mVexs[p1].firstEdge, node1);
        // 初始化node2
        node2 = new ENode();
        node2-&amp;gt;ivex = p1;
        // 将node2链接到&quot;p2所在链表的末尾&quot;
        if(mVexs[p2].firstEdge == NULL)
          mVexs[p2].firstEdge = node2;
        else
            linkLast(mVexs[p2].firstEdge, node2);
    }
}

/* 
 * 析构函数
 */
ListUDG::~ListUDG() 
{
}

/*
 * 将node节点链接到list的最后
 */
void ListUDG::linkLast(ENode *list, ENode *node)
{
    ENode *p = list;

    while(p-&amp;gt;nextEdge)
        p = p-&amp;gt;nextEdge;
    p-&amp;gt;nextEdge = node;
}

/*
 * 返回ch的位置
 */
int ListUDG::getPosition(char ch)
{
    int i;
    for(i=0; i&amp;lt;mVexNum; i++)
        if(mVexs[i].data==ch)
            return i;
    return -1;
}

/*
 * 读取一个输入字符
 */
char ListUDG::readChar()
{
    char ch;

    do {
        cin &amp;gt;&amp;gt; ch;
    } while(!((ch&amp;gt;=&#39;a&#39;&amp;amp;&amp;amp;ch&amp;lt;=&#39;z&#39;) || (ch&amp;gt;=&#39;A&#39;&amp;amp;&amp;amp;ch&amp;lt;=&#39;Z&#39;)));

    return ch;
}


/*
 * 深度优先搜索遍历图的递归实现
 */
void ListUDG::DFS(int i, int *visited)
{
    ENode *node;

    visited[i] = 1;
    cout &amp;lt;&amp;lt; mVexs[i].data &amp;lt;&amp;lt; &quot; &quot;;
    node = mVexs[i].firstEdge;
    while (node != NULL)
    {
        if (!visited[node-&amp;gt;ivex])
            DFS(node-&amp;gt;ivex, visited);
        node = node-&amp;gt;nextEdge;
    }
}

/*
 * 深度优先搜索遍历图
 */
void ListUDG::DFS()
{
    int i;
    int visited[MAX];       // 顶点访问标记

    // 初始化所有顶点都没有被访问
    for (i = 0; i &amp;lt; mVexNum; i++)
        visited[i] = 0;

    cout &amp;lt;&amp;lt; &quot;DFS: &quot;;
    for (i = 0; i &amp;lt; mVexNum; i++)
    {
        if (!visited[i])
            DFS(i, visited);
    }
    cout &amp;lt;&amp;lt; endl;
}

/*
 * 广度优先搜索（类似于树的层次遍历）
 */
void ListUDG::BFS()
{
    int head = 0;
    int rear = 0;
    int queue[MAX];     // 辅组队列
    int visited[MAX];   // 顶点访问标记
    int i, j, k;
    ENode *node;

    for (i = 0; i &amp;lt; mVexNum; i++)
        visited[i] = 0;

    cout &amp;lt;&amp;lt; &quot;BFS: &quot;;
    for (i = 0; i &amp;lt; mVexNum; i++)
    {
        if (!visited[i])
        {
            visited[i] = 1;
            cout &amp;lt;&amp;lt; mVexs[i].data &amp;lt;&amp;lt; &quot; &quot;;
            queue[rear++] = i;  // 入队列
        }
        while (head != rear) 
        {
            j = queue[head++];  // 出队列
            node = mVexs[j].firstEdge;
            while (node != NULL)
            {
                k = node-&amp;gt;ivex;
                if (!visited[k])
                {
                    visited[k] = 1;
                    cout &amp;lt;&amp;lt; mVexs[k].data &amp;lt;&amp;lt; &quot; &quot;;
                    queue[rear++] = k;
                }
                node = node-&amp;gt;nextEdge;
            }
        }
    }
    cout &amp;lt;&amp;lt; endl;
}

/*
 * 打印邻接表图
 */
void ListUDG::print()
{
    int i,j;
    ENode *node;

    cout &amp;lt;&amp;lt; &quot;List Graph:&quot; &amp;lt;&amp;lt; endl;
    for (i = 0; i &amp;lt; mVexNum; i++)
    {
        cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &quot;(&quot; &amp;lt;&amp;lt; mVexs[i].data &amp;lt;&amp;lt; &quot;): &quot;;
        node = mVexs[i].firstEdge;
        while (node != NULL)
        {
            cout &amp;lt;&amp;lt; node-&amp;gt;ivex &amp;lt;&amp;lt; &quot;(&quot; &amp;lt;&amp;lt; mVexs[node-&amp;gt;ivex].data &amp;lt;&amp;lt; &quot;) &quot;;
            node = node-&amp;gt;nextEdge;
        }
        cout &amp;lt;&amp;lt; endl;
    }
}

int main()
{
    char vexs[] = {&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;};
    char edges[][2] = {
        {&#39;A&#39;, &#39;C&#39;}, 
        {&#39;A&#39;, &#39;D&#39;}, 
        {&#39;A&#39;, &#39;F&#39;}, 
        {&#39;B&#39;, &#39;C&#39;}, 
        {&#39;C&#39;, &#39;D&#39;}, 
        {&#39;E&#39;, &#39;G&#39;}, 
        {&#39;F&#39;, &#39;G&#39;}};
    int vlen = sizeof(vexs)/sizeof(vexs[0]);
    int elen = sizeof(edges)/sizeof(edges[0]);
    ListUDG* pG;

    // 自定义&quot;图&quot;(输入矩阵队列)
    //pG = new ListUDG();
    // 采用已有的&quot;图&quot;
    pG = new ListUDG(vexs, vlen, edges, elen);

    pG-&amp;gt;print();   // 打印图
    pG-&amp;gt;DFS();     // 深度优先遍历
    pG-&amp;gt;BFS();     // 广度优先遍历

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;##迪杰斯特拉算法&lt;/p&gt;

&lt;p&gt;迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个节点到其他节点的最短路径。 
它的主要特点是以起始点为中心向外层层扩展(广度优先搜索思想)，直到扩展到终点为止。&lt;/p&gt;

&lt;p&gt;###基本思想&lt;/p&gt;

&lt;p&gt;通过Dijkstra计算图G中的最短路径时，需要指定起点s(即从顶点s开始计算)。&lt;/p&gt;

&lt;p&gt;此外，引进两个集合S和U。S的作用是记录已求出最短路径的顶点(以及相应的最短路径长度)，而U则是记录还未求出最短路径的顶点(以及该顶点到起点s的距离)。&lt;/p&gt;

&lt;p&gt;初始时，S中只有起点s；U中是除s之外的顶点，并且U中顶点的路径是”起点s到该顶点的路径”。然后，从U中找出路径最短的顶点，并将其加入到S中；接着，更新U中的顶点和顶点对应的路径。 然后，再从U中找出路径最短的顶点，并将其加入到S中；接着，更新U中的顶点和顶点对应的路径。 … 重复该操作，直到遍历完所有顶点。&lt;/p&gt;

&lt;p&gt;###操作步骤&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(1)
初始时，S只包含起点s；U包含除s外的其他顶点，且U中顶点的距离为”起点s到该顶点的距离”[例如，U中顶点v的距离为(s,v)的长度，然后s和v不相邻，则v的距离为∞]。&lt;/li&gt;
  &lt;li&gt;(2) 从U中选出”距离最短的顶点k”，并将顶点k加入到S中；同时，从U中移除顶点k。&lt;/li&gt;
  &lt;li&gt;(3)
更新U中各个顶点到起点s的距离。之所以更新U中顶点的距离，是由于上一步中确定了k是求出最短路径的顶点，从而可以利用k来更新其它顶点的距离；例如，(s,v)的距离可能大于(s,k)+(k,v)的距离。&lt;/li&gt;
  &lt;li&gt;(4) 重复步骤(2)和(3)，直到遍历完所有顶点。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;单纯的看上面的理论可能比较难以理解，下面通过实例来对该算法进行说明。&lt;/p&gt;

&lt;p&gt;5.3迪杰斯特拉算法图解
&lt;img src=&quot;/images/images/githubpages/graph/graph11.jpg&quot; alt=&quot;&quot; /&gt;
以上图G4为例，来对迪杰斯特拉进行算法演示(以第4个顶点D为起点)。
&lt;img src=&quot;/images/images/githubpages/graph/graph12.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;初始状态：S是已计算出最短路径的顶点集合，U是未计算除最短路径的顶点的集合！&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第1步：将顶点D加入到S中。&lt;/p&gt;

    &lt;p&gt;此时，S={D(0)}, U={A(∞),B(∞),C(3),E(4),F(∞),G(∞)}。     注:C(3)表示C到起点D的距离是3。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第2步：将顶点C加入到S中。&lt;/p&gt;

    &lt;p&gt;上一步操作之后，U中顶点C到起点D的距离最短；因此，将C加入到S中，同时更新U中顶点的距离。以顶点F为例，之前F到D的距离为∞；但是将C加入到S之后，F到D的距离为9=(F,C)+(C,D)。 
 此时，S={D(0),C(3)}, U={A(∞),B(23),E(4),F(9),G(∞)}。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第3步：将顶点E加入到S中。&lt;/p&gt;

    &lt;p&gt;上一步操作之后，U中顶点E到起点D的距离最短；因此，将E加入到S中，同时更新U中顶点的距离。还是以顶点F为例，之前F到D的距离为9；但是将E加入到S之后，F到D的距离为6=(F,E)+(E,D)。 
 此时，S={D(0),C(3),E(4)}, U={A(∞),B(23),F(6),G(12)}。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第4步：将顶点F加入到S中。&lt;/p&gt;

    &lt;p&gt;此时，S={D(0),C(3),E(4),F(6)}, U={A(22),B(13),G(12)}。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第5步：将顶点G加入到S中。&lt;/p&gt;

    &lt;p&gt;此时，S={D(0),C(3),E(4),F(6),G(12)}, U={A(22),B(13)}。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第6步：将顶点B加入到S中。&lt;/p&gt;

    &lt;p&gt;此时，S={D(0),C(3),E(4),F(6),G(12),B(13)}, U={A(22)}。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第7步：将顶点A加入到S中。&lt;/p&gt;

    &lt;p&gt;此时，S={D(0),C(3),E(4),F(6),G(12),B(13),A(22)}。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此时，起点D到各个顶点的最短距离就计算出来了：A(22) B(13) C(3) D(0) E(4) F(6) G(12)。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;###代码&lt;/h2&gt;

&lt;p&gt;本文以”邻接矩阵”为例对迪杰斯特拉算法进行说明，
####基本定义&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 邻接矩阵
typedef struct _graph
{
    char vexs[MAX];       // 顶点集合
    int vexnum;           // 顶点数
    int edgnum;           // 边数
    int matrix[MAX][MAX]; // 邻接矩阵
}Graph, *PGraph;

// 边的结构体
typedef struct _EdgeData
{
    char start; // 边的起点
    char end;   // 边的终点
    int weight; // 边的权重
}EData;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Graph是邻接矩阵对应的结构体。 
vexs用于保存顶点，vexnum是顶点数，edgnum是边数；matrix则是用于保存矩阵信息的二维数组。例如，matrix[i][j]=1，则表示”顶点i(即vexs[i])”和”顶点j(即vexs[j])”是邻接点；matrix[i][j]=0，则表示它们不是邻接点。 
EData是邻接矩阵边对应的结构体。&lt;/p&gt;

&lt;p&gt;####迪杰斯特拉算法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
 * Dijkstra最短路径。
 * 即，统计图(G)中&quot;顶点vs&quot;到其它各个顶点的最短路径。
 *
 * 参数说明：
 *        G -- 图
 *       vs -- 起始顶点(start vertex)。即计算&quot;顶点vs&quot;到其它顶点的最短路径。
 *     prev -- 前驱顶点数组。即，prev[i]的值是&quot;顶点vs&quot;到&quot;顶点i&quot;的最短路径所经历的全部顶点中，位于&quot;顶点i&quot;之前的那个顶点。
 *     dist -- 长度数组。即，dist[i]是&quot;顶点vs&quot;到&quot;顶点i&quot;的最短路径的长度。
 */

    void dijkstra(Graph G, int vs, int prev[], int dist[])
    {
        int i,j,k;
        int min;
        int tmp;
    int flag[MAX];      // flag[i]=1表示&quot;顶点vs&quot;到&quot;顶点i&quot;的最短路径已成功获取。

    // 初始化
    for (i = 0; i &amp;lt; G.vexnum; i++)
    {
        flag[i] = 0;              // 顶点i的最短路径还没获取到。
 

           prev[i] = 0;              // 顶点i的前驱顶点为0。
            dist[i] = G.matrix[vs][i];// 顶点i的最短路径为&quot;顶点vs&quot;到&quot;顶点i&quot;的权。
        }
    
        // 对&quot;顶点vs&quot;自身进行

    初始化
    flag[vs] = 1;
    dist[vs] = 0;

    // 遍历G.vexnum-1次；每次找出一个顶点的最短路径。
    for (i = 1; i &amp;lt; G.vexnum; i++)
    {
    // 寻找当前最小的路径；
    // 即，在未获取最短路径的顶点中，找到离vs最近的顶点(k)。
    min = INF;
    for (j = 0; j &amp;lt; G.vexnum; j++)
    {
        if (flag[j]==0 &amp;amp;&amp;amp; dist[j]&amp;lt;min)
        {
            min = dist[j];
            k = j;
        }
    }
    // 标记&quot;顶点k&quot;为已经获取到最短路径
    flag[k] = 1;

    // 修正当前最短路径和前驱顶点
    // 即，当已经&quot;顶点k的最短路径&quot;之后，更新&quot;未获取最短路径的顶点的最短路径和前驱顶点&quot;。
    for (j = 0; j &amp;lt; G.vexnum; j++)
    {
        tmp = (G.matrix[k][j]==INF ? INF : (min + G.matrix[k][j])); // 防止溢出
        if (flag[j] == 0 &amp;amp;&amp;amp; (tmp  &amp;lt; dist[j]) )
        {
            dist[j] = tmp;
            prev[j] = k;
        }
    }
}

    // 打印dijkstra最短路径的结果
    printf(&quot;dijkstra(%c): \n&quot;, G.vexs[vs]);
    for (i = 0; i &amp;lt; G.vexnum; i++)
        printf(&quot;  shortest(%c, %c)=%d\n&quot;, G.vexs[vs], G.vexs[i], dist[i]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>也谈如何构建高性能服务端程序</title>
   <link href="http://http://coolshell.info/blog/2014/11/web-server.html"/>
   <updated>2014-11-19T00:00:00+00:00</updated>
   <id>/blog/2014/11/web-server</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;引子：我接触过很多编程语言，接触过各种各样的服务器端开发，Java，Go，Ruby，Javascript等语言，Spring，Node.js，Rails
等等常见服务器端框架和编程模型都有接触。这里谈一下我个人对高性能服务器端程序的一些看法，希望给各位读者一些认识。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此外，阅读这篇文章，有如下几个前提：不谈硬件，不评论编程语言以及框架的好坏，不谈高级算法，可拍砖，拒绝喷子&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三个关键词&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cache，Asynchronous，Concurrent&lt;/p&gt;

&lt;p&gt;我们一个一个来讲。&lt;/p&gt;

&lt;h2 id=&quot;cache&quot;&gt;Cache&lt;/h2&gt;

&lt;p&gt;Cache 翻译成中文就是缓存，台湾的叫法叫做快取，其本质是将获取缓慢或者计算缓慢的数据结果暂时存储起来，以便以后再次获取或者计算同样的数据可以直接从存储中取得结果，从而可能提升性能的一种手段。Cache 最早是应用在计算机的 CPU 中，这篇文章不谈硬件，所以有需要了解 CPU 的缓存的同学可自行搜索。&lt;/p&gt;

&lt;p&gt;可以想象，如果让一个人一遍一遍的从 1+2+3+4+…+99+100=？ 这样去算，他加到最后发现等于5050，而这个过程耗费了他大量的时间，耗费了大量的脑力，在此期间，他可能把所有精力都放在这个计算上面而无暇顾及其他事情。等到他累得满头大汗，加完了结果，他告诉你是 5050。没过多久，你又让他做同样的事情，我相信这家伙会不加思索的再次告诉你 5050。为什么？你会笑我说，人又不是傻子，这为同学肯定记得这个结果是5050啊。&lt;/p&gt;

&lt;p&gt;可是，计算机不一样，计算机就是你上面要嘲笑的那个傻子，他傻到，完全不会记得刚在做了什么事情，他会傻乎乎的再重新算一遍告诉你结果。没错如果你问他一万遍，这头没有脑子的机器会算一万遍的。虽然上面这个从1加到100这个例子对于一款现代化的计算机来讲简直是小菜一碟，但是计算机往往面临的计算难题是我们人类所无法企及的。&lt;/p&gt;

&lt;p&gt;Cache 就是为了来解决这个事情的，因为事情往往是这样的：你会发现一些非常复杂的过程的计算结果是可重用的，而且把这个结果暂时存储在某些地方，查找起来也是极为方便的。&lt;/p&gt;

&lt;p&gt;所以，现在你理解了缓存，那可以来思考一些缓存的设计策略了。这里做一点说明，不同的缓存策略跟具体的业务系统关系非常大，制定缓存策略需要根据具体的情况来分析。常用的策略：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;最终结果型缓存。这种缓存往往提升性能效果最为明显，但是命中率却低，也就是可重用性不高。&lt;/li&gt;
  &lt;li&gt;中间结果型缓存。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还拿上面的例子来说，1加到100，你可以构建出是个缓存分别是1加到10，10加到20，20加到30 … 一直到 90加到100 这9个缓存。好处是你如果被请求到 1加到60 的时候，仍然可以使用这些缓存结果。可坏处也很明显，你取到几个缓存的结果后不得不再进行一次运算。所以实际情况，往往是在最终结果和中间结果之间找到平衡点，或者是两者配合使用。
不知不觉中，你有没有发现，1+2+3+4+…+99+100=5050 是个永远都成立的事实，这也就意味着，它永远不用被清除。可事实是往往是，缓存是有有效期的，例如需要缓存今天的天气情况，今天是 2014年11月16日，到了明天就是 11月17日，天气就不一样了。再例如需要缓存 Coding 的最新冒泡列表，当有人发布了新的冒泡，那么这个列表就得被更新。从这个角度来看，缓存的策略又有如下常见的几种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;永久式缓存：结果在任何情况下都不发生改变，无需清除或者更新&lt;/li&gt;
  &lt;li&gt;有有效期的缓存：在特定时间点或者时间段后失效&lt;/li&gt;
  &lt;li&gt;触发式失效缓存：当某一事件产生时，缓存失效，当然有有效期式缓存也可以理解成时间点和时间段到期为触发条件的触发式失效缓存&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;嗯，既然提到了缓存的更新或者清除，那么就牵扯到缓存的更新策略。例子永远好过大段的理论：假如我们要缓存 Coding 的冒泡列表。有这么一种策略：当用户请求时我们检查下是否已存在这样的缓存，如果有直接返回缓存数据，否则我们生成这个列表（计算机的计算过程），返回给用户并且把冒泡列表（计算结果）存储起来，以便以后的用户访问时直接获取。当用户发布了一个新的冒泡的时候，我们清除这个缓存，再有用户请求时将重复以上过程。这是其中一种完整的缓存清除策略。另外一种是，每当我们收到一个用户发布的冒泡时，都重新构建这个缓存，用户每次查看冒泡列表都是取的缓存数据。这两种缓存分别称之为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;被动式缓存：需要用到时才构建&lt;/li&gt;
  &lt;li&gt;主动式缓存：预先构建&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于 Cache 还有很多很多需要注意和设计上的思路和策略，这里不再一一赘述。这些缓存在不同的维度有不同的策略，我们需要根据具体的业务情况来选择合适的策略。Coding 的很多业务中使用了上述很多种策略，例如我们常见的分支列表和标签列表就是使用触发式失效缓存，我们的广场项目列表就是使用主动式缓存构建。&lt;/p&gt;

&lt;h2 id=&quot;asynchronous&quot;&gt;Asynchronous&lt;/h2&gt;

&lt;p&gt;Asynchronous 的意思是异步。什么是异步呢？就是不在第一时间告知调用者结果，告诉他我已经收到这个任务了，我会处理，处理完毕后通知你结果，如果你不是等不到结果就无法进行下去的话，你完全可以先干别的事情。
嗯，好像我描述的比较拉杂。还是例子：你去咖啡厅点一杯咖啡，服务员告诉你现磨咖啡需要15分钟才可做好，那么在咖啡做好之前，你不可能盯着服务员或者咖啡师15分钟，你肯定会干点别的，比如说玩手机上一下网，或者跟你女朋友商量下去看电影什么的，总之你不会傻乎乎等着的。等到咖啡做好了，服务员会记得给你端过来的。这就是异步过程，你的大脑不必为一个漫长的过程卡住，可以继续其他的事情。&lt;/p&gt;

&lt;p&gt;服务端程序设计往往也是这样，在你等待一个很缓慢的过程的时候，如果你不是必须要得到这个过程的结果才能继续下去，你完全可以先进行别的过程，等到那个缓慢的过程执行完毕后，它会通知你结果的。&lt;/p&gt;

&lt;p&gt;异步已经在现在的各种编程领域有了很广泛的应用，例如 Ajax 技术，就是一种异步的手段，在浏览器和服务器交互的时候，完全不影响你在网页上的其他操作。&lt;/p&gt;

&lt;p&gt;异步在各种编程语言和框架中都有相应的支持，这里简单介绍一下 Javascript 的异步支持。熟悉它的人的人请无视这段。它使用回调的方式支持异步，大致意思是，A 交代给 B 一个任务，并且告知 B 任务完成后继续执行哪段程序（往往包装成一个匿名function），B执行完任务后，执行这个匿名的 function，这样来完成异步过程。在 Javascript 中大量的使用这种回调的异步方案，已经不再局限于对一个缓慢的过程了，可以对几乎所有的过程都采用异步处理。&lt;/p&gt;

&lt;p&gt;在服务端程序中，除了使用线程，协程，回调之外，另外一种常见的异步的支持方式就是消息队列。其原理是，生产者发送消息到消息队列中，消费者从中取出消息，做出相应处理，并把结果存储起来或者通过某种方式告知生产者。&lt;/p&gt;

&lt;p&gt;异步在很多时候可以运用现代化计算机 CPU 的多核特性和分布式计算特性，能显著的提升应用的性能，但是一个前提就是，异步的任务的结果必须是主进程进行下一步操作所不依赖的，否则主进程必须等待，直到这个任务执行结束，拿到结果再进行下一步，这时就变成了传统的同步计算了。&lt;/p&gt;

&lt;p&gt;异步操作在 Coding 中也有非常广泛的应用。例如当用户执行完一次 Push，Coding 需要生成一条 Push 的动态，需要清理掉相应的缓存，需要触发相关的 WebHook 等等，这些操作都是通过消息队列来异步完成的。因为这些操作非常的耗时，而且完全不需要即时完成，所以用户在 Push 的时候等待着这些操作完成是很不合理的。异步操作在这里即展示出了其应用多核和多台服务器的优势，在某种程度上还能提升用户体验。&lt;/p&gt;

&lt;p&gt;Golang 是 Google 2009 年发布的一门现代化语言，其语言特性对异步提供了良好的支持。这里举个例子体现一下异步的魅力：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//一个查询结构体
type project struct {
    //参数Channel
    name chan string
    result chan string
}

//addProject
func addProject(u user, p project) {

    //检查用户权限
    checkPermission(u)

    //启动协程
    go func() {
        //获取输入
        name := &amp;lt;-p.name
        //访问数据库，输出结果通道
        q.result &amp;lt;- &quot;add project :&quot; + name
    }()

}

//主进程
func main() {
    //初始化project
    p := project{ make(chan string, 1), make(chan string, 1) }
    //某位用户
    u := user{} 
    //执行addProject，注意执行的时候还不需要告知要创建的项目名字
    addProject(u,p)

    //准备参数
    p.name &amp;lt;- &quot;an-asynchronous-project&quot;
    //获取结果
    fmt.Println(&amp;lt;-p.result)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这一段程序涉及到了 Golang 的 goroutine 和 channel，不了解的可以去查一下相关资料。
这段程序实现了在还为准备好参数时就已经调用一个 function 。当我们调用 addProject 的时候还不知道项目的名字，但是这完全不影响我们去检查用户权限。程序完全可以一边去检查权限，一边去获取项目名字，当程序执行到不得不拿到项目的名字才能继续的时候，它将阻塞，直到我们告诉他项目名字。&lt;/p&gt;

&lt;h2 id=&quot;concurrent&quot;&gt;Concurrent&lt;/h2&gt;

&lt;p&gt;Concurrent 的意思是并行。现代化的 CPU 往往具有多个核心，而且有些 CPU 也具有超线程能力。如果我们可以将单个过程拆分成小的任务，交给 CPU 的多个核心，或者是分布式计算系统的多个计算节点，就可以充分利用并行计算来提升性能。前提是这些任务相互之间不要有相互依赖的关系。依然是例子：需要计算网站上某一批用户的活跃度积分，传统的，我们会查出这一批用户，然后写一个循环，然后轮流计算他们的积分，最后得到结果。其实每个用户的积分的计算都是独立的，相互不依赖，那么我们就可以利用这一点来并行化这个计算。&lt;/p&gt;

&lt;p&gt;下面给出一段 Coding 代码托管中的程序，这段程序是指定条件获取一个提交列表，使用了并行计算的一种 并发循环：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public List&amp;lt;Commit&amp;gt; getCommits(String objectId, String path, int offset, int maxCount) {
        List&amp;lt;String&amp;gt; shas = getCommitsSha(this, objectId, path, offset, maxCount);
        List&amp;lt;Commit&amp;gt; commits = new ArrayList&amp;lt;&amp;gt;();

        if (shas != null) {
            List&amp;lt;GetCommit&amp;gt; getCommits = new ArrayList&amp;lt;&amp;gt;();
            for (String sha : shas) {
                getCommits.add(new GetCommit(this, sha));
            }

            //声明一个自适应的线程池
            ExecutorService executor = Executors.newFixedThreadPool(8);

            List&amp;lt;Future&amp;lt;Commit&amp;gt;&amp;gt; futureList = null;

        //并发的调用getCommit
        futureList = executor.invokeAll(getCommits);
        executor.shutdown();
    for (Future&amp;lt;Commit&amp;gt; future : futureList) {
        Commit commit = future.get();
        commits.add(commit);
    }        
}
return commits; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;//Java 是一个啰嗦的语言，还要声明一个类来包装一下这个过程。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class GetCommit implements Callable&amp;lt;Commit&amp;gt; {
    private Repo repo;
    private String sha;

public GetCommit(Repo repo, String sha) {
    this.repo = repo;
    this.sha = sha;
}

@Override
public Commit call() throws Exception {
    return repo.getCommit(sha);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这段程序是一个并发循环的例子，例子中需要根据一些参数查询到 Commit 的列表，而 repo.getCommit 这个过程完全不需要一个一个轮流查询，因为他们是完全独立的，所以可以使用 Java 的 Cocurrent 包来做并发循环，充分利用多核来尽快得到执行结果。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;关于高性能服务器程序需要关注的点还有很多，这里只是简单的介绍了下三个利器（Cache，Asynchronous，Concurrent）。而即便是这三个利器，我的介绍也只是冰山一角，但是请相信你看懂了我介绍的这些东西，重新去思考服务端编程会获得不少收获的。
这三者也是相辅相成的关系，很多时候都是配合着使用才能起到很好的效果。异步和并行在某种程度上是有重叠的，而我们经常使用异步的方式去主动构建缓存。&lt;/p&gt;

&lt;p&gt;最后再给一些小提示：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不要让 CPU 闲着（CPU
正常情况下压力大的时候自然不会闲着，这里指的是CPU负载低谷时，可以让他主动的构建缓存，或者做一些准备工作等等。）&lt;/li&gt;
  &lt;li&gt;提升 CPU 效率，即不要总让 CPU 做重复的劳动，用空间换时间的理念去减轻 CPU 的压力&lt;/li&gt;
  &lt;li&gt;不要让无关紧要的附属的任务卡住主进程，让他们在后台慢慢做,可以提前做好准备工作，这个比较抽象，但是举例子就很明白，连接池，主动缓存，以及我举得那个 Golang 的例子都是很好的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文出自 Coding 官方技术博客:
作者: Coding 架构师 王振威&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>leveldb原理剖析</title>
   <link href="http://http://coolshell.info/blog/2014/11/leveldb.html"/>
   <updated>2014-11-18T00:00:00+00:00</updated>
   <id>/blog/2014/11/leveldb</id>
   <content type="html">&lt;p&gt;在说LevelDb之前，先认识两位大牛，Jeff Dean和Sanjay Ghemawat，这两位是Google公司重量级的工程师，为数甚少的Google Fellow之二。&lt;/p&gt;

&lt;p&gt;　　Jeff Dean其人：&lt;a href=&quot;http://research.google.com/people/jeff/index.html&quot;&gt;http://research.google.com/people/jeff/index.html&lt;/a&gt;，Google大规模分布式平台Bigtable和MapReduce主要设计和实现者。&lt;/p&gt;

&lt;p&gt;　　Sanjay Ghemawat其人：&lt;a href=&quot;http://research.google.com/people/sanjay/index.html&quot;&gt;http://research.google.com/people/sanjay/index.html&lt;/a&gt;，Google大规模分布式平台GFS，Bigtable和MapReduce主要设计和实现工程师。&lt;/p&gt;

&lt;p&gt;　　LevelDb就是这两位大神级别的工程师发起的开源项目，简而言之，LevelDb是能够处理十亿级别规模Key-Value型数据持久性存储的C++ 程序库。正像上面介绍的，这二位是Bigtable的设计和实现者，如果了解Bigtable的话，应该知道在这个影响深远的分布式存储系统中有两个核心的部分：Master Server和Tablet Server。其中Master Server做一些管理数据的存储以及分布式调度工作，实际的分布式数据存储以及读写操作是由Tablet Server完成的，而LevelDb则可以理解为一个简化版的Tablet Server。&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;p&gt;##LevelDb剖析之一：介绍&lt;/p&gt;

&lt;p&gt;　　LevelDb有如下一些特点：&lt;/p&gt;

&lt;p&gt;　　　　首先，LevelDb是一个持久化存储的KV系统，和Redis这种内存型的KV系统不同，LevelDb不会像Redis一样狂吃内存，而是将大部分数据存储到磁盘上。&lt;/p&gt;

&lt;p&gt;　　　　其次，LevleDb在存储数据时，是根据记录的key值有序存储的，就是说相邻的key值在存储文件中是依次顺序存储的，而应用可以自定义key大小比较函数，LevleDb会按照用户定义的比较函数依序存储这些记录。&lt;/p&gt;

&lt;p&gt;　　　　再次，像大多数KV系统一样，LevelDb的操作接口很简单，基本操作包括写记录，读记录以及删除记录。也支持针对多条操作的原子批量操作。&lt;/p&gt;

&lt;p&gt;　　　　另外，LevelDb支持数据快照（snapshot）功能，使得读取操作不受写操作影响，可以在读操作过程中始终看到一致的数据。&lt;/p&gt;

&lt;p&gt;　　除此外，LevelDb还支持数据压缩等操作，这对于减小存储空间以及增快IO效率都有直接的帮助。&lt;/p&gt;

&lt;p&gt;　　LevelDb性能非常突出，官方网站报道其随机写性能达到40万条记录每秒，而随机读性能达到6万条记录每秒。总体来说，LevelDb的写操作要大大快于读操作，而顺序读写操作则大大快于随机读写操作。&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;##LevelDb剖析之二：整体架构&lt;/p&gt;

&lt;p&gt;LevelDb本质上是一套存储系统以及在这套存储系统上提供的一些操作接口。为了便于理解整个系统及其处理流程，我们可以从两个不同的角度来看待LevleDb：静态角度和动态角度。从静态角度，可以假想整个系统正在运行过程中（不断插入删除读取数据），此时我们给LevelDb照相，从照片可以看到之前系统的数据在内存和磁盘中是如何分布的，处于什么状态等；从动态的角度，主要是了解系统是如何写入一条记录，读出一条记录，删除一条记录的，同时也包括除了这些接口操作外的内部操作比如compaction，系统运行时崩溃后如何恢复系统等等方面。&lt;/p&gt;

&lt;p&gt;本节所讲的整体架构主要从静态角度来描述，之后接下来的几节内容会详述静态结构涉及到的文件或者内存数据结构，LevelDb剖析后半部分主要介绍动态视角下的LevelDb，就是说整个系统是怎么运转起来的。&lt;/p&gt;

&lt;p&gt;LevelDb作为存储系统，数据记录的存储介质包括内存以及磁盘文件，如果像上面说的，当LevelDb运行了一段时间，此时我们给LevelDb进行透视拍照，那么您会看到如下一番景象：
&lt;img src=&quot;/images/images/githubpages/level1.png&quot; alt=&quot;&quot; /&gt;
图1.1：LevelDb结构&lt;/p&gt;

&lt;p&gt;从图中可以看出，构成LevelDb静态结构的包括六个主要部分：内存中的MemTable和Immutable MemTable以及磁盘上的几种主要文件：Current文件，Manifest文件，log文件以及SSTable文件。当然，LevelDb除了这六个主要部分还有一些辅助的文件，但是以上六个文件和数据结构是LevelDb的主体构成元素。&lt;/p&gt;

&lt;p&gt;LevelDb的Log文件和Memtable与Bigtable论文中介绍的是一致的，当应用写入一条Key:Value记录的时候，LevelDb会先往log文件里写入，成功后将记录插进Memtable中，这样基本就算完成了写入操作，因为一次写入操作只涉及一次磁盘顺序写和一次内存写入，所以这是为何说LevelDb写入速度极快的主要原因。&lt;/p&gt;

&lt;p&gt;Log文件在系统中的作用主要是用于系统崩溃恢复而不丢失数据，假如没有Log文件，因为写入的记录刚开始是保存在内存中的，此时如果系统崩溃，内存中的数据还没有来得及Dump到磁盘，所以会丢失数据（Redis就存在这个问题）。为了避免这种情况，LevelDb在写入内存前先将操作记录到Log文件中，然后再记入内存中，这样即使系统崩溃，也可以从Log文件中恢复内存中的Memtable，不会造成数据的丢失。&lt;/p&gt;

&lt;p&gt;当Memtable插入的数据占用内存到了一个界限后，需要将内存的记录导出到外存文件中，LevleDb会生成新的Log文件和Memtable，原先的Memtable就成为Immutable Memtable，顾名思义，就是说这个Memtable的内容是不可更改的，只能读不能写入或者删除。新到来的数据被记入新的Log文件和Memtable，LevelDb后台调度会将Immutable Memtable的数据导出到磁盘，形成一个新的SSTable文件。SSTable就是由内存中的数据不断导出并进行Compaction操作后形成的，而且SSTable的所有文件是一种层级结构，第一层为Level 0，第二层为Level 1，依次类推，层级逐渐增高，这也是为何称之为LevelDb的原因。&lt;/p&gt;

&lt;p&gt;SSTable中的文件是Key有序的，就是说在文件中小key记录排在大Key记录之前，各个Level的SSTable都是如此，但是这里需要注意的一点是：Level 0的SSTable文件（后缀为.sst）和其它Level的文件相比有特殊性：这个层级内的.sst文件，两个文件可能存在key重叠，比如有两个level 0的sst文件，文件A和文件B，文件A的key范围是：{bar, car}，文件B的Key范围是{blue,samecity}，那么很可能两个文件都存在key=”blood”的记录。对于其它Level的SSTable文件来说，则不会出现同一层级内.sst文件的key重叠现象，就是说Level L中任意两个.sst文件，那么可以保证它们的key值是不会重叠的。这点需要特别注意，后面您会看到很多操作的差异都是由于这个原因造成的。&lt;/p&gt;

&lt;p&gt;SSTable中的某个文件属于特定层级，而且其存储的记录是key有序的，那么必然有文件中的最小key和最大key，这是非常重要的信息，LevelDb应该记下这些信息。Manifest就是干这个的，它记载了SSTable各个文件的管理信息，比如属于哪个Level，文件名称叫啥，最小key和最大key各自是多少。下图是Manifest所存储内容的示意：
&lt;img src=&quot;/images/images/githubpages/level2.png&quot; alt=&quot;&quot; /&gt;
图2.1：Manifest存储示意图&lt;/p&gt;

&lt;p&gt;图中只显示了两个文件（manifest会记载所有SSTable文件的这些信息），即Level 0的test.sst1和test.sst2文件，同时记载了这些文件各自对应的key范围，比如test.sstt1&lt;/p&gt;

&lt;p&gt;的key范围是“an”到 “banana”，而文件test.sst2的key范围是“baby”到“samecity”，可以看出两者的key范围是有重叠的。&lt;/p&gt;

&lt;p&gt;Current文件是干什么的呢？这个文件的内容只有一个信息，就是记载当前的manifest文件名。因为在LevleDb的运行过程中，随着Compaction的进行，SSTable文件会发生变化，会有新的文件产生，老的文件被废弃，Manifest也会跟着反映这种变化，此时往往会新生成Manifest文件来记载这种变化，而Current则用来指出哪个Manifest文件才是我们关心的那个Manifest文件。&lt;/p&gt;

&lt;p&gt;以上介绍的内容就构成了LevelDb的整体静态结构，在LevelDb剖析接下来的内容中，我们会首先介绍重要文件或者内存数据的具体数据布局与结构。&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;##LevelDb剖析之三：log文件&lt;/p&gt;

&lt;p&gt;上节内容讲到log文件在LevelDb中的主要作用是系统故障恢复时，能够保证不会丢失数据。因为在将记录写入内存的Memtable之前，会先写入Log文件，这样即使系统发生故障，Memtable中的数据没有来得及Dump到磁盘的SSTable文件，LevelDB也可以根据log文件恢复内存的Memtable数据结构内容，不会造成系统丢失数据，在这点上LevelDb和Bigtable是一致的。&lt;/p&gt;

&lt;p&gt;下面我们带大家看看log文件的具体物理和逻辑布局是怎样的，LevelDb对于一个log文件，会把它切割成以32K为单位的物理Block，每次读取的单位以一个Block作为基本读取单位，下图展示的log文件由3个Block构成，所以从物理布局来讲，一个log文件就是由连续的32K大小Block构成的。
&lt;img src=&quot;/images/images/githubpages/level3.png&quot; alt=&quot;&quot; /&gt;
图3.1 log文件布局&lt;/p&gt;

&lt;p&gt;在应用的视野里是看不到这些Block的，应用看到的是一系列的Key:Value对，在LevelDb内部，会将一个Key:Value对看做一条记录的数据，另外在这个数据前增加一个记录头，用来记载一些管理信息，以方便内部处理&lt;/p&gt;

&lt;p&gt;记录头包含三个字段，ChechSum是对“类型”和“数据”字段的校验码，为了避免处理不完整或者是被破坏的数据，当LevelDb读取记录数据时候会对数据进行校验，如果发现和存储的CheckSum相同，说明数据完整无破坏，可以继续后续流程。“记录长度”记载了数据的大小，“数据”则是上面讲的Key:Value数值对，“类型”字段则指出了每条记录的逻辑结构和log文件物理分块结构之间的关系，具体而言，主要有以下四种类型：FULL/FIRST/MIDDLE/LAST。&lt;/p&gt;

&lt;p&gt;如果记录类型是FULL，代表了当前记录内容完整地存储在一个物理Block里，没有被不同的物理Block切割开；如果记录被相邻的物理Block切割开，则类型会是其他三种类型中的一种。我们以图3.1所示的例子来具体说明。&lt;/p&gt;

&lt;p&gt;假设目前存在三条记录，Record A，Record B和Record C，其中Record A大小为10K，Record B 大小为80K，Record C大小为12K，那么其在log文件中的逻辑布局会如图3.1所示。Record A是图中蓝色区域所示，因为大小为10K&amp;lt;32K，能够放在一个物理Block中，所以其类型为FULL；Record B 大小为80K，而Block 1因为放入了Record A，所以还剩下22K，不足以放下Record B，所以在Block 1的剩余部分放入Record B的开头一部分，类型标识为FIRST，代表了是一个记录的起始部分；Record B还有58K没有存储，这些只能依次放在后续的物理Block里面，因为Block 2大小只有32K，仍然放不下Record B的剩余部分，所以Block 2全部用来放Record B，且标识类型为MIDDLE，意思是这是Record B中间一段数据；Record B剩下的部分可以完全放在Block 3中，类型标识为LAST，代表了这是Record B的末尾数据；图中黄色的Record C因为大小为12K，Block 3剩下的空间足以全部放下它，所以其类型标识为FULL。&lt;/p&gt;

&lt;p&gt;从这个小例子可以看出逻辑记录和物理Block之间的关系，LevelDb一次物理读取为一个Block，然后根据类型情况拼接出逻辑记录，供后续流程处理。&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;##LevelDb剖析之四：SSTable文件&lt;/p&gt;

&lt;p&gt;　　SSTable是Bigtable中至关重要的一块，对于LevelDb来说也是如此，对LevelDb的SSTable实现细节的了解也有助于了解Bigtable中一些实现细节。&lt;/p&gt;

&lt;p&gt;本节内容主要讲述SSTable的静态布局结构，我们曾在“LevelDb剖析之二：整体架构”中说过，SSTable文件形成了不同Level的层级结构，至于这个层级结构是如何形成的我们放在后面Compaction一节细说。本节主要介绍SSTable某个文件的物理布局和逻辑布局结构，这对了解LevelDb的运行过程很有帮助。&lt;/p&gt;

&lt;p&gt;　　LevelDb不同层级有很多SSTable文件（以后缀.sst为特征），所有.sst文件内部布局都是一样的。上节介绍Log文件是物理分块的，SSTable也一样会将文件划分为固定大小的物理存储块，但是两者逻辑布局大不相同，根本原因是：Log文件中的记录是Key无序的，即先后记录的key大小没有明确大小关系，而.sst文件内部则是根据记录的Key由小到大排列的，从下面介绍的SSTable布局可以体会到Key有序是为何如此设计.sst文件结构的关键。
&lt;img src=&quot;/images/images/githubpages/level4.png&quot; alt=&quot;&quot; /&gt;
图4.1 .sst文件的分块结构&lt;/p&gt;

&lt;p&gt;　　图4.1展示了一个.sst文件的物理划分结构，同Log文件一样，也是划分为固定大小的存储块，每个Block分为三个部分，红色部分是数据存储区， 蓝色的Type区用于标识数据存储区是否采用了数据压缩算法（Snappy压缩或者无压缩两种），CRC部分则是数据校验码，用于判别数据是否在生成和传输中出错。&lt;/p&gt;

&lt;p&gt;　　以上是.sst的物理布局，下面介绍.sst文件的逻辑布局，所谓逻辑布局，就是说尽管大家都是物理块，但是每一块存储什么内容，内部又有什么结构等。图4.2展示了.sst文件的内部逻辑解释。
&lt;img src=&quot;/images/images/githubpages/level5.png&quot; alt=&quot;&quot; /&gt;
图4.2 逻辑布局&lt;/p&gt;

&lt;p&gt;　　从图4.2可以看出，从大的方面，可以将.sst文件划分为数据存储区和数据管理区，数据存储区存放实际的Key:Value数据，数据管理区则提供一些索引指针等管理数据，目的是更快速便捷的查找相应的记录。两个区域都是在上述的分块基础上的，就是说文件的前面若干块实际存储KV数据，后面数据管理区存储管理数据。管理数据又分为四种不同类型：紫色的Meta Block，红色的MetaBlock 索引和蓝色的数据索引块以及一个文件尾部块。&lt;/p&gt;

&lt;p&gt;　　LevelDb 1.2版对于Meta Block尚无实际使用，只是保留了一个接口，估计会在后续版本中加入内容，下面我们看看数据索引区和文件尾部Footer的内部结构。
&lt;img src=&quot;/images/images/githubpages/level6.png&quot; alt=&quot;&quot; /&gt;
图4.3 数据索引&lt;/p&gt;

&lt;p&gt;　　图4.3是数据索引的内部结构示意图。再次强调一下，Data Block内的KV记录是按照Key由小到大排列的，数据索引区的每条记录是对某个Data Block建立的索引信息，每条索引信息包含三个内容，以图4.3所示的数据块i的索引Index i来说：红色部分的第一个字段记载大于等于数据块i中最大的Key值的那个Key，第二个字段指出数据块i在.sst文件中的起始位置，第三个字段指出Data Block i的大小（有时候是有数据压缩的）。后面两个字段好理解，是用于定位数据块在文件中的位置的，第一个字段需要详细解释一下，在索引里保存的这个Key值未必一定是某条记录的Key,以图4.3的例子来说，假设数据块i 的最小Key=“samecity”，最大Key=“the best”;数据块i+1的最小Key=“the fox”,最大Key=“zoo”,那么对于数据块i的索引Index i来说，其第一个字段记载大于等于数据块i的最大Key(“the best”)同时要小于数据块i+1的最小Key(“the fox”)，所以例子中Index i的第一个字段是：“the c”，这个是满足要求的；而Index i+1的第一个字段则是“zoo”，即数据块i+1的最大Key。&lt;/p&gt;

&lt;p&gt;　　文件末尾Footer块的内部结构见图4.4，metaindex_handle指出了metaindex block的起始位置和大小；inex_handle指出了index Block的起始地址和大小；这两个字段可以理解为索引的索引，是为了正确读出索引值而设立的，后面跟着一个填充区和魔数。&lt;/p&gt;

&lt;p&gt;　　上面主要介绍的是数据管理区的内部结构，下面我们看看数据区的一个Block的数据部分内部是如何布局的（图4.1中的红色部分），图4.5是其内部布局示意图。
&lt;img src=&quot;/images/images/githubpages/level7.png&quot; alt=&quot;&quot; /&gt;
图4.5 数据Block内部结构&lt;/p&gt;

&lt;p&gt;　　从图中可以看出，其内部也分为两个部分，前面是一个个KV记录，其顺序是根据Key值由小到大排列的，在Block尾部则是一些“重启点”（Restart Point）,其实是一些指针，指出Block内容中的一些记录位置。&lt;/p&gt;

&lt;p&gt;　　“重启点”是干什么的呢？我们一再强调，Block内容里的KV记录是按照Key大小有序的，这样的话，相邻的两条记录很可能Key部分存在重叠，比如key i=“the Car”，Key i+1=“the color”,那么两者存在重叠部分“the c”，为了减少Key的存储量，Key i+1可以只存储和上一条Key不同的部分“olor”，两者的共同部分从Key i中可以获得。记录的Key在Block内容部分就是这么存储的，主要目的是减少存储开销。“重启点”的意思是：在这条记录开始，不再采取只记载不同的Key部分，而是重新记录所有的Key值，假设Key i+1是一个重启点，那么Key里面会完整存储“the color”，而不是采用简略的“olor”方式。Block尾部就是指出哪些记录是这些重启点的。
&lt;img src=&quot;/images/images/githubpages/level8.png&quot; alt=&quot;&quot; /&gt;
图4.6 记录格式&lt;/p&gt;

&lt;p&gt;　　在Block内容区，每个KV记录的内部结构是怎样的？图4.6给出了其详细结构，每个记录包含5个字段：key共享长度，比如上面的“olor”记录， 其key和上一条记录共享的Key部分长度是“the c”的长度，即5；key非共享长度，对于“olor”来说，是4；value长度指出Key:Value中Value的长度，在后面的Value内容字段中存储实际的Value值；而key非共享内容则实际存储“olor”这个Key字符串。&lt;/p&gt;

&lt;p&gt;　　上面讲的这些就是.sst文件的全部内部奥秘。&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;##LevelDb剖析之五：MemTable详解&lt;/p&gt;

&lt;p&gt;　　LevelDb剖析前述小节大致讲述了磁盘文件相关的重要静态结构，本小节讲述内存中的数据结构Memtable，Memtable在整个体系中的重要地位也不言而喻。总体而言，所有KV数据都是存储在Memtable，Immutable Memtable和SSTable中的，Immutable Memtable从结构上讲和Memtable是完全一样的，区别仅仅在于其是只读的，不允许写入操作，而Memtable则是允许写入和读取的。当Memtable写入的数据占用内存到达指定数量，则自动转换为Immutable Memtable，等待Dump到磁盘中，系统会自动生成新的Memtable供写操作写入新数据，理解了Memtable，那么Immutable Memtable自然不在话下。&lt;/p&gt;

&lt;p&gt;　　LevelDb的MemTable提供了将KV数据写入，删除以及读取KV记录的操作接口，但是事实上Memtable并不存在真正的删除操作,删除某个Key的Value在Memtable内是作为插入一条记录实施的，但是会打上一个Key的删除标记，真正的删除操作是Lazy的，会在以后的Compaction过程中去掉这个KV。&lt;/p&gt;

&lt;p&gt;　　需要注意的是，LevelDb的Memtable中KV对是根据Key大小有序存储的，在系统插入新的KV时，LevelDb要把这个KV插到合适的位置上以保持这种Key有序性。其实，LevelDb的Memtable类只是一个接口类，真正的操作是通过背后的SkipList来做的，包括插入操作和读取操作等，所以Memtable的核心数据结构是一个SkipList。&lt;/p&gt;

&lt;p&gt;　　SkipList是由William Pugh发明。他在Communications of the ACM June 1990, 33(6) 668-676 发表了Skip lists: a probabilistic alternative to balanced trees，在该论文中详细解释了SkipList的数据结构和插入删除操作。&lt;/p&gt;

&lt;p&gt;SkipList是平衡树的一种替代数据结构，但是和红黑树不相同的是，SkipList对于树的平衡的实现是基于一种随机化的算法的，这样也就是说SkipList的插入和删除的工作是比较简单的。&lt;/p&gt;

&lt;p&gt;关于SkipList的详细介绍可以参考这篇文章，&lt;a href=&quot;http://lippiouyangonline.info/skip-list/&quot;&gt;skip-list原理解析&lt;/a&gt;讲述的很清楚，LevelDb的SkipList基本上是一个具体实现，并无特殊之处。&lt;/p&gt;

&lt;p&gt;　　SkipList不仅是维护有序数据的一个简单实现，而且相比较平衡树来说，在插入数据的时候可以避免频繁的树节点调整操作，所以写入效率是很高的，LevelDb整体而言是个高写入系统，SkipList在其中应该也起到了很重要的作用。Redis为了加快插入操作，也使用了SkipList来作为内部实现数据结构。&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;##LevelDb剖析之六 写入与删除记录&lt;/p&gt;

&lt;p&gt;在之前的五节LevelDb剖析中，我们介绍了LevelDb的一些静态文件及其详细布局，从本节开始，我们看看LevelDb的一些动态操作，比如读写记录，Compaction，错误恢复等操作。&lt;/p&gt;

&lt;p&gt;本节介绍levelDb的记录更新操作，即插入一条KV记录或者删除一条KV记录。levelDb的更新操作速度是非常快的，源于其内部机制决定了这种更新操作的简单性。 
&lt;img src=&quot;/images/images/githubpages/level9.png&quot; alt=&quot;&quot; /&gt;
图6.1 LevelDb写入记录&lt;/p&gt;

&lt;p&gt;图6.1是levelDb如何更新KV数据的示意图，从图中可以看出，对于一个插入操作Put(Key,Value)来说，完成插入操作包含两个具体步骤：首先是将这条KV记录以顺序写的方式追加到之前介绍过的log文件末尾，因为尽管这是一个磁盘读写操作，但是文件的顺序追加写入效率是很高的，所以并不会导致写入速度的降低；第二个步骤是:如果写入log文件成功，那么将这条KV记录插入内存中的Memtable中，前面介绍过，Memtable只是一层封装，其内部其实是一个Key有序的SkipList列表，插入一条新记录的过程也很简单，即先查找合适的插入位置，然后修改相应的链接指针将新记录插入即可。完成这一步，写入记录就算完成了，所以一个插入记录操作涉及一次磁盘文件追加写和内存SkipList插入操作，这是为何levelDb写入速度如此高效的根本原因。&lt;/p&gt;

&lt;p&gt;从上面的介绍过程中也可以看出：log文件内是key无序的，而Memtable中是key有序的。那么如果是删除一条KV记录呢？对于levelDb来说，并不存在立即删除的操作，而是与插入操作相同的，区别是，插入操作插入的是Key:Value 值，而删除操作插入的是“Key:删除标记”，并不真正去删除记录，而是后台Compaction的时候才去做真正的删除操作。&lt;/p&gt;

&lt;p&gt;levelDb的写入操作就是如此简单。真正的麻烦在后面将要介绍的读取操作中。&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;##LevelDb剖析之七：读取记录&lt;/p&gt;

&lt;p&gt;　　LevelDb是针对大规模Key/Value数据的单机存储库，从应用的角度来看，LevelDb就是一个存储工具。而作为称职的存储工具，常见的调用接口无非是新增KV，删除KV，读取KV，更新Key对应的Value值这么几种操作。LevelDb的接口没有直接支持更新操作的接口，如果需要更新某个Key的Value,你可以选择直接生猛地插入新的KV，保持Key相同，这样系统内的key对应的value就会被更新；或者你可以先删除旧的KV， 之后再插入新的KV，这样比较委婉地完成KV的更新操作。&lt;/p&gt;

&lt;p&gt;假设应用提交一个Key值，下面我们看看LevelDb是如何从存储的数据中读出其对应的Value值的。图7-1是LevelDb读取过程的整体示意图。
&lt;img src=&quot;/images/images/githubpages/level10.png&quot; alt=&quot;&quot; /&gt;
图7-1  LevelDb读取记录流程&lt;/p&gt;

&lt;p&gt;　　LevelDb首先会去查看内存中的Memtable，如果Memtable中包含key及其对应的value，则返回value值即可；如果在Memtable没有读到key，则接下来到同样处于内存中的Immutable Memtable中去读取，类似地，如果读到就返回，若是没有读到,那么只能万般无奈下从磁盘中的大量SSTable文件中查找。因为SSTable数量较多，而且分成多个Level，所以在SSTable中读数据是相当蜿蜒曲折的一段旅程。总的读取原则是这样的：首先从属于level 0的文件中查找，如果找到则返回对应的value值，如果没有找到那么到level 1中的文件中去找，如此循环往复，直到在某层SSTable文件中找到这个key对应的value为止（或者查到最高level，查找失败，说明整个系统中不存在这个Key)。&lt;/p&gt;

&lt;p&gt;　　那么为什么是从Memtable到Immutable Memtable，再从Immutable Memtable到文件，而文件中为何是从低level到高level这么一个查询路径呢？道理何在？之所以选择这么个查询路径，是因为从信息的更新时间来说，很明显Memtable存储的是最新鲜的KV对；Immutable Memtable中存储的KV数据对的新鲜程度次之；而所有SSTable文件中的KV数据新鲜程度一定不如内存中的Memtable和Immutable Memtable的。对于SSTable文件来说，如果同时在level L和Level L+1找到同一个key，level L的信息一定比level L+1的要新。也就是说，上面列出的查找路径就是按照数据新鲜程度排列出来的，越新鲜的越先查找。&lt;/p&gt;

&lt;p&gt;　　为啥要优先查找新鲜的数据呢？这个道理不言而喻，举个例子。比如我们先往levelDb里面插入一条数据 {key=”www.samecity.com”  value=”我们”},过了几天，samecity网站改名为：69同城，此时我们插入数据{key=”www.samecity.com”  value=”69同城”}，同样的key,不同的value；逻辑上理解好像levelDb中只有一个存储记录，即第二个记录，但是在levelDb中很可能存在两条记录，即上面的两个记录都在levelDb中存储了，此时如果用户查询key=”www.samecity.com”,我们当然希望找到最新的更新记录，也就是第二个记录返回，这就是为何要优先查找新鲜数据的原因。&lt;/p&gt;

&lt;p&gt;　　前文有讲：对于SSTable文件来说，如果同时在level L和Level L+1找到同一个key，level L的信息一定比level L+1的要新。这是一个结论，理论上需要一个证明过程，否则会招致如下的问题：为神马呢？从道理上讲呢，很明白：因为Level L+1的数据不是从石头缝里蹦出来的，也不是做梦梦到的，那它是从哪里来的？Level L+1的数据是从Level L 经过Compaction后得到的（如果您不知道什么是Compaction，那么……..也许以后会知道的），也就是说，您看到的现在的Level L+1层的SSTable数据是从原来的Level L中来的，现在的Level L比原来的Level L数据要新鲜，所以可证，现在的Level L比现在的Level L+1的数据要新鲜。&lt;/p&gt;

&lt;p&gt;　　SSTable文件很多，如何快速地找到key对应的value值？在LevelDb中，level 0一直都爱搞特殊化，在level 0和其它level中查找某个key的过程是不一样的。因为level 0下的不同文件可能key的范围有重叠，某个要查询的key有可能多个文件都包含，这样的话LevelDb的策略是先找出level 0中哪些文件包含这个key（manifest文件中记载了level和对应的文件及文件里key的范围信息，LevelDb在内存中保留这种映射表）， 之后按照文件的新鲜程度排序，新的文件排在前面，之后依次查找，读出key对应的value。而如果是非level 0的话，因为这个level的文件之间key是不重叠的，所以只从一个文件就可以找到key对应的value。&lt;/p&gt;

&lt;p&gt;　　最后一个问题,如果给定一个要查询的key和某个key range包含这个key的SSTable文件，那么levelDb是如何进行具体查找过程的呢？levelDb一般会先在内存中的Cache中查找是否包含这个文件的缓存记录，如果包含，则从缓存中读取；如果不包含，则打开SSTable文件，同时将这个文件的索引部分加载到内存中并放入Cache中。 这样Cache里面就有了这个SSTable的缓存项，但是只有索引部分在内存中，之后levelDb根据索引可以定位到哪个内容Block会包含这条key，从文件中读出这个Block的内容，在根据记录一一比较，如果找到则返回结果，如果没有找到，那么说明这个level的SSTable文件并不包含这个key，所以到下一级别的SSTable中去查找。&lt;/p&gt;

&lt;p&gt;　　从之前介绍的LevelDb的写操作和这里介绍的读操作可以看出，相对写操作，读操作处理起来要复杂很多，所以写的速度必然要远远高于读数据的速度，也就是说，LevelDb比较适合写操作多于读操作的应用场合。而如果应用是很多读操作类型的，那么顺序读取效率会比较高，因为这样大部分内容都会在缓存中找到，尽可能避免大量的随机读取操作。&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;##LevelDb剖析之八：Compaction操作&lt;/p&gt;

&lt;p&gt;前文有述，对于LevelDb来说，写入记录操作很简单，删除记录仅仅写入一个删除标记就算完事，但是读取记录比较复杂，需要在内存以及各个层级文件中依照新鲜程度依次查找，代价很高。为了加快读取速度，levelDb采取了compaction的方式来对已有的记录进行整理压缩，通过这种方式，来删除掉一些不再有效的KV数据，减小数据规模，减少文件数量等。&lt;/p&gt;

&lt;p&gt;levelDb的compaction机制和过程与Bigtable所讲述的是基本一致的，Bigtable中讲到三种类型的compaction: minor ，major和full。所谓minor Compaction，就是把memtable中的数据导出到SSTable文件中；major compaction就是合并不同层级的SSTable文件，而full compaction就是将所有SSTable进行合并。&lt;/p&gt;

&lt;p&gt;LevelDb包含其中两种，minor和major。&lt;/p&gt;

&lt;p&gt;我将为大家详细叙述其机理。&lt;/p&gt;

&lt;p&gt;先来看看minor Compaction的过程。Minor compaction 的目的是当内存中的memtable大小到了一定值时，将内容保存到磁盘文件中，图8.1是其机理示意图。 &lt;img src=&quot;/images/images/githubpages/level11.png&quot; alt=&quot;&quot; /&gt;
图8.1 minor compaction&lt;/p&gt;

&lt;p&gt;从8.1可以看出，当memtable数量到了一定程度会转换为immutable memtable，此时不能往其中写入记录，只能从中读取KV内容。之前介绍过，immutable memtable其实是一个多层级队列SkipList，其中的记录是根据key有序排列的。所以这个minor compaction实现起来也很简单，就是按照immutable memtable中记录由小到大遍历，并依次写入一个level 0 的新建SSTable文件中，写完后建立文件的index 数据，这样就完成了一次minor compaction。从图中也可以看出，对于被删除的记录，在minor compaction过程中并不真正删除这个记录，原因也很简单，这里只知道要删掉key记录，但是这个KV数据在哪里?那需要复杂的查找，所以在minor compaction的时候并不做删除，只是将这个key作为一个记录写入文件中，至于真正的删除操作，在以后更高层级的compaction中会去做。&lt;/p&gt;

&lt;p&gt;当某个level下的SSTable文件数目超过一定设置值后，levelDb会从这个level的SSTable中选择一个文件（level&amp;gt;0），将其和高一层级的level+1的SSTable文件合并，这就是major compaction。&lt;/p&gt;

&lt;p&gt;我们知道在大于0的层级中，每个SSTable文件内的Key都是由小到大有序存储的，而且不同文件之间的key范围（文件内最小key和最大key之间）不会有任何重叠。Level 0的SSTable文件有些特殊，尽管每个文件也是根据Key由小到大排列，但是因为level 0的文件是通过minor compaction直接生成的，所以任意两个level 0下的两个sstable文件可能再key范围上有重叠。所以在做major compaction的时候，对于大于level 0的层级，选择其中一个文件就行，但是对于level 0来说，指定某个文件后，本level中很可能有其他SSTable文件的key范围和这个文件有重叠，这种情况下，要找出所有有重叠的文件和level 1的文件进行合并，即level 0在进行文件选择的时候，可能会有多个文件参与major compaction。&lt;/p&gt;

&lt;p&gt;　　levelDb在选定某个level进行compaction后，还要选择是具体哪个文件要进行compaction，levelDb在这里有个小技巧， 就是说轮流来，比如这次是文件A进行compaction，那么下次就是在key range上紧挨着文件A的文件B进行compaction，这样每个文件都会有机会轮流和高层的level 文件进行合并。&lt;/p&gt;

&lt;p&gt;如果选好了level L的文件A和level L+1层的文件进行合并，那么问题又来了，应该选择level L+1哪些文件进行合并？levelDb选择L+1层中和文件A在key range上有重叠的所有文件来和文件A进行合并。&lt;/p&gt;

&lt;p&gt;　　也就是说，选定了level L的文件A,之后在level L+1中找到了所有需要合并的文件B,C,D…..等等。剩下的问题就是具体是如何进行major 合并的？就是说给定了一系列文件，每个文件内部是key有序的，如何对这些文件进行合并，使得新生成的文件仍然Key有序，同时抛掉哪些不再有价值的KV 数据。&lt;/p&gt;

&lt;p&gt;图8.2说明了这一过程。
&lt;img src=&quot;/images/images/githubpages/level12.png&quot; alt=&quot;&quot; /&gt;
图8.2 SSTable Compaction&lt;/p&gt;

&lt;p&gt;　　Major compaction的过程如下：对多个文件采用多路归并排序的方式，依次找出其中最小的Key记录，也就是对多个文件中的所有记录重新进行排序。之后采取一定的标准判断这个Key是否还需要保存，如果判断没有保存价值，那么直接抛掉，如果觉得还需要继续保存，那么就将其写入level L+1层中新生成的一个SSTable文件中。就这样对KV数据一一处理，形成了一系列新的L+1层数据文件，之前的L层文件和L+1层参与compaction 的文件数据此时已经没有意义了，所以全部删除。这样就完成了L层和L+1层文件记录的合并过程。&lt;/p&gt;

&lt;p&gt;　　那么在major compaction过程中，判断一个KV记录是否抛弃的标准是什么呢？其中一个标准是:对于某个key来说，如果在小于L层中存在这个Key，那么这个KV在major compaction过程中可以抛掉。因为我们前面分析过，对于层级低于L的文件中如果存在同一Key的记录，那么说明对于Key来说，有更新鲜的Value存在，那么过去的Value就等于没有意义了，所以可以删除。&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;##LevelDb剖析之九 levelDb中的Cache&lt;/p&gt;

&lt;p&gt;　　书接前文，前面讲过对于levelDb来说，读取操作如果没有在内存的memtable中找到记录，要多次进行磁盘访问操作。假设最优情况，即第一次就在level 0中最新的文件中找到了这个key，那么也需要读取2次磁盘，一次是将SSTable的文件中的index部分读入内存，这样根据这个index可以确定key是在哪个block中存储；第二次是读入这个block的内容，然后在内存中查找key对应的value。&lt;/p&gt;

&lt;p&gt;　　levelDb中引入了两个不同的Cache:Table Cache和Block Cache。其中Block Cache是配置可选的，即在配置文件中指定是否打开这个功能。
&lt;img src=&quot;/images/images/githubpages/level3.png&quot; alt=&quot;&quot; /&gt;
图9.1 table cache&lt;/p&gt;

&lt;p&gt;　　图9.1是table cache的结构。在Cache中，key值是SSTable的文件名称，Value部分包含两部分，一个是指向磁盘打开的SSTable文件的文件指针，这是为了方便读取内容；另外一个是指向内存中这个SSTable文件对应的Table结构指针，table结构在内存中，保存了SSTable的index内容以及用来指示block cache用的cache_id ,当然除此外还有其它一些内容。&lt;/p&gt;

&lt;p&gt;　　比如在get(key)读取操作中，如果levelDb确定了key在某个level下某个文件A的key range范围内，那么需要判断是不是文件A真的包含这个KV。此时，levelDb会首先查找Table Cache，看这个文件是否在缓存里，如果找到了，那么根据index部分就可以查找是哪个block包含这个key。如果没有在缓存中找到文件，那么打开SSTable文件，将其index部分读入内存，然后插入Cache里面，去index里面定位哪个block包含这个Key 。如果确定了文件哪个block包含这个key，那么需要读入block内容，这是第二次读取。&lt;/p&gt;

&lt;p&gt;　　Block Cache是为了加快这个过程的，图9.2是其结构示意图。其中的key是文件的cache_id加上这个block在文件中的起始位置block_offset。而value则是这个Block的内容。&lt;/p&gt;

&lt;p&gt;　　如果levelDb发现这个block在block cache中，那么可以避免读取数据，直接在cache里的block内容里面查找key的value就行，如果没找到呢？那么读入block内容并把它插入block cache中。levelDb就是这样通过两个cache来加快读取速度的。从这里可以看出，如果读取的数据局部性比较好，也就是说要读的数据大部分在cache里面都能读到，那么读取效率应该还是很高的，而如果是对key进行顺序读取效率也应该不错，因为一次读入后可以多次被复用。但是如果是随机读取，您可以推断下其效率如何。&lt;/p&gt;

&lt;p&gt;##LevelDb剖析之十 Version、VersionEdit、VersionSet&lt;/p&gt;

&lt;p&gt;　　Version 保存了当前磁盘以及内存中所有的文件信息，一般只有一个Version叫做”current” version（当前版本）。Leveldb还保存了一系列的历史版本，这些历史版本有什么作用呢？&lt;/p&gt;

&lt;p&gt;当一个Iterator创建后，Iterator就引用到了current version(当前版本)，只要这个Iterator不被delete那么被Iterator引用的版本就会一直存活。这就意味着当你用完一个Iterator后，需要及时删除它。&lt;/p&gt;

&lt;p&gt;　　当一次Compaction结束后（会生成新的文件，合并前的文件需要删除），Leveldb会创建一个新的版本作为当前版本，原先的当前版本就会变为历史版本。&lt;/p&gt;

&lt;p&gt;　　VersionSet 是所有Version的集合，管理着所有存活的Version。&lt;/p&gt;

&lt;p&gt;　　VersionEdit 表示Version之间的变化，相当于delta 增量，表示有增加了多少文件，删除了文件。下图表示他们之间的关系。&lt;/p&gt;

&lt;p&gt;Version0 +VersionEdit–&amp;gt;Version1&lt;/p&gt;

&lt;p&gt;　　VersionEdit会保存到MANIFEST文件中，当做数据恢复时就会从MANIFEST文件中读出来重建数据。&lt;/p&gt;

&lt;p&gt;　　leveldb的这种版本的控制，让我想到了双buffer切换，双buffer切换来自于图形学中，用于解决屏幕绘制时的闪屏问题，在服务器编程中也有用处。&lt;/p&gt;

&lt;p&gt;　　比如我们的服务器上有一个字典库，每天我们需要更新这个字典库，我们可以新开一个buffer，将新的字典库加载到这个新buffer中，等到加载完毕，将字典的指针指向新的字典库。&lt;/p&gt;

&lt;p&gt;leveldb的version管理和双buffer切换类似，但是如果原version被某个iterator引用，那么这个version会一直保持，直到没有被任何一个iterator引用，此时就可以删除这个version。&lt;/p&gt;

&lt;p&gt;注：本文参考了这篇文章：&lt;a href=&quot;http://www.samecity.com/blog/Index.asp?SortID=12&quot;&gt;http://www.samecity.com/blog/Index.asp?SortID=12&lt;/a&gt;
参考资料：1.&lt;a href=&quot;http://zh.wikipedia.org/wiki/LevelDB&quot;&gt;维基百科&lt;/a&gt;
　　　　　2.&lt;a href=&quot;http://code.google.com/p/leveldb/&quot;&gt;google code&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>java中内部类</title>
   <link href="http://http://coolshell.info/blog/2014/11/java-inner-class.html"/>
   <updated>2014-11-14T00:00:00+00:00</updated>
   <id>/blog/2014/11/java-inner-class</id>
   <content type="html">&lt;p&gt;最近在想一个问题，Java语言为什么要设计内部类呢，经过查阅相关的书籍后在这里总结一下。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;## 从多继承的角度来分析 ##
C++作为比较早期的面向对象编程语言，摸着石头过河，不幸的当了炮灰，比如多重继承，在使用的过程中会出现死亡菱形的情况，而Java的设计者意识到了这个问题，所以Java是不支持多重继承的，想要扩展功能可以使用interface，但是后来Java的设计者意识到多重继承也不是一无是处，比如说当你的父类和实现的接口有相同签名的方法时，接口的方法会覆盖父类的方法，怎么办呢，这个时候内部类就应运而生了。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;java的非静态内部类可以使用外部类的所有成员方法和变量。这给继承多个类的同名成员并共享带来可能。同时非匿名内部类可以继承一个父类和实现多个接口，因此外部类想要多继承的类可以分别由内部类继承，并进行Override或者直接复用。然后外部类通过创建内部类的对象来使用该内部对象的方法和成员，从而达到复用的目的，这样外部内就具有多个父类的所有特征。这里的多继承可以说是外部类继承自一个内部类对象，而不是类，内部类 is in a 外部类，外部内的所有行为都是通过内部类对象动态获得的。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;上面所说的多继承是站在外部类的角度来看的，即它们是通过外部类引用内部类来达到多态与复用的目的。反过来，内部类继承了一个类，同时拥有了外部类的所有成员方法和属性，我们是否可以认为内部类集成了两个类呢？——一个是类层面的，一个是对象层面的（因为非静态内部类使用前一定有外部类的对象来创建它，它持有外部类某个对象的引用）。如果外部类还继承了其他类呢？内部类还是可以访问其他类的方法与属性。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;如果你想继承一个类或实现一个接口，但是这个接口或类中的一个方法和你构想的这个类中的一个方法的名称，参数相同，但访问权限缩小了或者是在继承时不想覆盖签名相同但功能不同的方法，所以你不能直接继承与实现它，你应该怎么办？这时候，你可以建一个内部类继承这个类或实现这个接口（当然你可以修改访问权限是可以的）。由于内部类对外部类的所有内容都是可访问的，内部类可以通过调用外部类的这个方法来重写那个类或接口。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;## 从回调的角度来分析 ##
编程上来说，一般使用一个库或类时，是你主动调用人家的API，这个叫Call，有的时候这样不能满足需要，需要你注册（注入）你自己的程序（比如一个对象)，然后让人家在合适的时候来调用你，这叫Callback(回调)。&lt;/p&gt;

&lt;p&gt;设计模式中的Observer就是例子：所有的观察者都需要向自己关心的主题Observable注册，然后主题在适当时机（主题类对象的属性发生变化时）通知所有订阅它的观察者并更新，其中观察者都实现了一个统一的Observer接口中的。事件驱动机制也是这样的，你给感兴趣的事件注册相应的回调函数，当对应的事件发生了会调用回调函数，比如libevent的实现就是这样的。&lt;/p&gt;

&lt;p&gt;再举个安卓开发的例子，安卓的button组件需要注册相应的按钮按下事件监听器，在按钮按下的时候调用注册的事件，&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    	&lt;span class=&quot;nd&quot;&gt;@override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;.........&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;new OnClickListener(…)这里是个匿名内部类，实现了onClick接口，我们给Button注册相应的回调事件，当按钮被按下时调用click里面的代码。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;## 从闭包的角度 ##
javaScript中闭包的产生是由于JavaScript中允许内部function，也就是在一个function内部声明的function。内部function可以访问外部 function中的局部变量、传入的参数和其它内部function。当内部 function可以在包含它的外部 function之外被引用时，就形成了一个闭包。这个时候，即便外部 function 已经执行完成，该内部 function 仍然可以被执行，并且其中所用到的外部function的局部变量、传入的参数等仍然保留外部function执行结束时的值。下面是一个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function Outer(){  
var i=0;  
function Inner(){  
alert(++i);  
}  
return Inner;  
}  
var inner = Outer();  
inner();  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为函数Outer外的变量inner引用了函数Outer内的函数Inner，就是说：当函数Outer的内部函数Inner被函数Outer外的一个变量inner引用的时候，就创建了一个闭包。&lt;/p&gt;

&lt;p&gt;闭包有什么作用：简而言之，闭包的作用就是在Outer执行完并返回后，闭包使得Javascript的垃圾回收机制GC不会收回Outer所占用的资源，因为Outer的内部函数Inner的执行需要依赖Outer中的变量。&lt;/p&gt;

&lt;p&gt;闭包是一个可调用的对象，它记录了一些信息，这些信息来自于创建它的作用域。通过这个定义，可以看出内部类是面向对象的闭包，因为它不仅包含创建内部类的作用域的信息，还自动拥有一个指向此外围类对象的引用，在此作用域内，内部类有权操作所有的成员，包括private成员。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>java同步容器与并发容器</title>
   <link href="http://http://coolshell.info/blog/2014/11/java-concurrent-collections.html"/>
   <updated>2014-11-08T00:00:00+00:00</updated>
   <id>/blog/2014/11/java-concurrent-collections</id>
   <content type="html">&lt;p&gt;在编程的时候经常会用到容器，当容器被多线程读取的时候我们就要考虑线程安全的问题，哪些容器是线程是线程安全的，容器的哪些操作又是线程安全的，这些安全机制是怎么实现的，本文将一一介绍。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;# 同步容器 #&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. vector和hashtable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jdk很早的时候就支持vector和hashtable，vector内部是一个数组，它的同步是在所有对元素的存取操作上进行synchronized的，也就是说每个时刻只能由一个线程可以访问容器的元素，这种线程安全是比较粗粒度的。
比如你在进行vector容器的迭代操作(iterator.next())时再调用vector.put(object o)时会抛出ConcurrentModificationException&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;hashtable的内部实现：
  首先回顾下hashmap的实现，我们初始化一个hashmap时有两个参数inital capacity用来定义hashmap的初始化buckets数，reload factor加载因子，初始值为0.75，当hashmap中entry的数量超过这个比值时hashmap就会进行扩容，然后所有的entry进行rehash，这两个初始参数都必须选择合适的值，如果inital capacity选择太小，由于容器是开链的，会给查找元素增加额外的负担，reload factor不能选的过大，否则插入元素时出现碰撞的几率会增大。
hashtable就是在hashmap的基础上对所有元素的访问和插入操作用synchronized关键字同步，同样，在对容器元素迭代访问时进行插入操作会抛出ConcurrentModificationException。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;2. collections.synchronizedXXX工厂方法创建&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;collections.synchronizedXXX是在jdk2引入的，和vector,hashtable一样，都是在整个容器上进行同步操作。
举个例子，下面这个是jdk7种collections.synchronizedMap的实现，这里只列出部分代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static class SynchronizedMap&amp;lt;K,V&amp;gt;
    implements Map&amp;lt;K,V&amp;gt;, Serializable {
    private static final long serialVersionUID = 1978198479659022715L;

    private final Map&amp;lt;K,V&amp;gt; m;     // Backing Map
    final Object      mutex;        // Object on which to synchronize

    SynchronizedMap(Map&amp;lt;K,V&amp;gt; m) {
        this.m = Objects.requireNonNull(m);
        mutex = this;
    }

    SynchronizedMap(Map&amp;lt;K,V&amp;gt; m, Object mutex) {
        this.m = m;
        this.mutex = mutex;
    }
	//所有的操作都是在同一个监视器上进行同步
    public int size() {
        synchronized (mutex) {return m.size();}
    }
    public boolean isEmpty() {
        synchronized (mutex) {return m.isEmpty();}
    }
    public boolean containsKey(Object key) {
        synchronized (mutex) {return m.containsKey(key);}
    }
    public boolean containsValue(Object value) {
        synchronized (mutex) {return m.containsValue(value);}
    }
    public V get(Object key) {
        synchronized (mutex) {return m.get(key);}
    }

    public V put(K key, V value) {
        synchronized (mutex) {return m.put(key, value);}
    }
    public V remove(Object key) {
        synchronized (mutex) {return m.remove(key);}
    }
    public void putAll(Map&amp;lt;? extends K, ? extends V&amp;gt; map) {
        synchronized (mutex) {m.putAll(map);}
    }
    public void clear() {
        synchronized (mutex) {m.clear();}
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;# 并发容器 #
JDK5中添加了新的concurrent包，其中包含了很多并发容器，这些容器针对多线程环境进行了优化，大大提高了容器类在并发环境下的执行效率。
下面所有的代码都是来源于jdk7。&lt;/p&gt;

&lt;h2 id=&quot;copyonwritearraylist&quot;&gt;CopyOnWriteArrayList&lt;/h2&gt;

&lt;p&gt;CopyOnWriteArrayList类是一个线程安全的List接口的实现，在该类的内部进行元素的&lt;strong&gt;写操作时，底层的数组将被完整的复制&lt;/strong&gt;，这对于读操作远远多于写操作的应用非常适合。在CopyOnWriteArrayList上进行操作时，&lt;strong&gt;读操作不需要加锁，而写操作类实现中对其进行了加锁&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;底层实现如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class CopyOnWriteArrayList&amp;lt;E&amp;gt;  
    implements List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable {  
  
/** The lock protecting all mutators */
final transient ReentrantLock lock = new ReentrantLock();

/** The array, accessed only via getArray/setArray. */
private transient volatile Object[] array;
 final Object[] getArray() {
    return array;
}

  ...  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;读写操作：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; @SuppressWarnings(&quot;unchecked&quot;)
private E get(Object[] a, int index) {
    return (E) a[index];
}

public E get(int index) {
    return get(getArray(), index);
}
//使用ReentrantLock加锁保护
 public E set(int index, E element) {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
        Object[] elements = getArray();
        E oldValue = get(elements, index);

        if (oldValue != element) {
            int len = elements.length;
//创建一个新的数组，复制原来的元素
            Object[] newElements = Arrays.copyOf(elements, len);
//set的元素
            newElements[index] = element;
            setArray(newElements);
        } else {
// 替换底层的数组
            setArray(elements);
        }
        return oldValue;
    } finally {
        lock.unlock();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;特别注意：在CopyOnWriteArrayList上获得的Iterator是不能进行set和remove操作的，否则会抛出ConcurrentModificationException。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;## BlockingQueue ##
BlockingQueue接口定义了一种阻塞的FIFO queue，基于生产者消费者模式，每一个BlockingQueue都有一个容量，让容量满时往BlockingQueue中添加数据时会造成阻塞，当容量为空时取元素操作会阻塞。&lt;/p&gt;

&lt;p&gt;ArrayBlockingQueue是对BlockingQueue的一个数组实现，它使用一把全局的锁并行对queue的读写操作，同时使用两个Condition阻塞容量为空时的取操作和容量满时的写操作。
底层实现：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ArrayBlockingQueue&amp;lt;E&amp;gt; extends AbstractQueue&amp;lt;E&amp;gt;  
    implements BlockingQueue&amp;lt;E&amp;gt;, java.io.Serializable {  
  
// 使用循环数组来实现queue，初始时takeIndex和putIndex均为0  
private final E[] items;  
private transient int takeIndex;  
private transient int putIndex;  
private int count;  
  
// 用于并发的锁和条件  
private final ReentrantLock lock;  
private final Condition notEmpty;  
private final Condition notFull;  
  
/** 
 * 循环数组 
 * Circularly increment i. 
 */  
final int inc(int i) {  
    return (++i == items.length)? 0 : i;  
}  
  
public ArrayBlockingQueue(int capacity, boolean fair) {  
    if (capacity &amp;lt;= 0)  
        throw new IllegalArgumentException();  
    this.items = (E[]) new Object[capacity];  
    // 分配锁及该锁上的condition  
    lock = new ReentrantLock(fair);  
    notEmpty = lock.newCondition();  
    notFull =  lock.newCondition();  
}  
  
  ...  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ArrayBlockingQueue的取操作：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ArrayBlockingQueue&amp;lt;E&amp;gt; extends AbstractQueue&amp;lt;E&amp;gt;  
    implements BlockingQueue&amp;lt;E&amp;gt;, java.io.Serializable {  
  
private E extract() {  
    final E[] items = this.items;  
    E x = items[takeIndex];  
    items[takeIndex] = null;  
    takeIndex = inc(takeIndex);  
    --count;  
   // 激发notFull条件  
    notFull.signal();  
    return x;  
}  
  
 /** 
 * condition的await的语义如下： 
 *　与condition相关的锁以原子方式释放，并禁用该线程 
 *　方法返回时，线程必须获得与该condition相关的锁 
 */  
public E take() throws InterruptedException {  
    final ReentrantLock lock = this.lock;  
    lock.lockInterruptibly();  
    try {  
        try {  
              // 等待notEmpty的条件  
            while (count == 0)  
                notEmpty.await();  
        } catch (InterruptedException ie) {  
		// 唤醒其他正在等待的线程  
            notEmpty.signal(); 
  
            throw ie;  
        }  
        E x = extract();  
        return x;  
    } finally {  
        lock.unlock();  
    }  
}  
  
  ...  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ArrayBlockingQueue的写操作：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ArrayBlockingQueue&amp;lt;E&amp;gt; extends AbstractQueue&amp;lt;E&amp;gt;  
    implements BlockingQueue&amp;lt;E&amp;gt;, java.io.Serializable {  
  
private void insert(E x) {  
    items[putIndex] = x;  
    putIndex = inc(putIndex);  
    ++count;  
    notEmpty.signal();  
}  
  
public void put(E o) throws InterruptedException {  
    if (o == null) throw new NullPointerException();  
    final E[] items = this.items;  
    final ReentrantLock lock = this.lock;  
    lock.lockInterruptibly();  
    try {  
        try {  
              // 等待notFull条件  
       while (count == items.length)  
                notFull.await();  
        } catch (InterruptedException ie) {  
    // 唤醒其他正在等待的线程      
			  notFull.signal(); 

            throw ie;  
        }  
        insert(o);  
    } finally {  
        lock.unlock();  
    }  
}  
  
  ...  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意：ArrayBlockingQueue&lt;strong&gt;在读写操作上都需要锁住整个容器&lt;/strong&gt;，因此吞吐量与一般的实现是相似的，适合于实现“生产者消费者”模式。&lt;/p&gt;

&lt;h2 id=&quot;linkedblockingqueue&quot;&gt;LinkedBlockingQueue&lt;/h2&gt;

&lt;p&gt;LinkedBlockingQueue是BlockingQueue的一种使用Link List的实现，它&lt;strong&gt;对头和尾（取和添加操作）采用两把不同的锁&lt;/strong&gt;，相对于ArrayBlockingQueue提高了吞吐量。它也是一种阻塞型的容器，适合于实现“消费者生产者”模式。&lt;/p&gt;

&lt;p&gt;LinkedBlockingQueue底层的定义如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class LinkedBlockingQueue&amp;lt;E&amp;gt; extends AbstractQueue&amp;lt;E&amp;gt;  
    implements BlockingQueue&amp;lt;E&amp;gt;, java.io.Serializable {  
  
static class Node&amp;lt;E&amp;gt; {  
    /** The item, volatile to ensure barrier separating write and read */  

    volatile E item;  
    Node&amp;lt;E&amp;gt; next;  
    Node(E x) { item = x; }  
}  
  
// 支持原子操作  
private final AtomicInteger count = new AtomicInteger(0);  
  
// 链表的头和尾  
private transient Node&amp;lt;E&amp;gt; head;  
private transient Node&amp;lt;E&amp;gt; last;  
  
// 针对取和添加操作的两把锁及其上的条件  
private final ReentrantLock takeLock = new ReentrantLock();  
private final Condition notEmpty = takeLock.newCondition();  

private final ReentrantLock putLock = new ReentrantLock();  
private final Condition notFull = putLock.newCondition();  
  
   ...  
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;LinkedBlockingQueue的添加操作：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class LinkedBlockingQueue&amp;lt;E&amp;gt; extends AbstractQueue&amp;lt;E&amp;gt;  
    implements BlockingQueue&amp;lt;E&amp;gt;, java.io.Serializable {  
  
private void insert(E x) {  
    last = last.next = new Node&amp;lt;E&amp;gt;(x);  
}  
  
/** 
 * signal方法在被调用时，当前线程必须拥有该condition相关的锁! 
 * Signal a waiting take. Called only from put/offer (which do not otherwise ordinarily lock takeLock.) 
 */  
private void signalNotEmpty() {  
    final ReentrantLock takeLock = this.takeLock;  
    takeLock.lock();  
    try {  
        notEmpty.signal();  
    } finally {  
        takeLock.unlock();  
    }  
}  
  
public void put(E o) throws InterruptedException {  
    if (o == null) throw new NullPointerException();  
    int c = -1;  
    final ReentrantLock putLock = this.putLock;  
    final AtomicInteger count = this.count;  
    // 使用putLock  
    putLock.lockInterruptibly();  
    try {  
        try {  
              // 当容量已满时，等待notFull条件  
        while (count.get() == capacity)  
                notFull.await();  
        } catch (InterruptedException ie) {  
            notFull.signal(); // propagate to a non-interrupted thread  
            throw ie;  
        }  
        insert(o);  
        // 取出当前值，并将原数据增加1  
        c = count.getAndIncrement();  
        // 容量不满，再次激活notFull上等待的put线程  
    if (c + 1 &amp;lt; capacity)  
            notFull.signal();  
    } finally {  
        putLock.unlock();  
    }  
    // 必须先释放putLock再在notEmpty上signal，否则会造成死锁  
 if (c == 0)  
        signalNotEmpty();  
}  
  
  ...  
}   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;LinkedBlockingQueue的取操作：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class LinkedBlockingQueue&amp;lt;E&amp;gt; extends AbstractQueue&amp;lt;E&amp;gt;  
    implements BlockingQueue&amp;lt;E&amp;gt;, java.io.Serializable {  
  
private E extract() {  
    Node&amp;lt;E&amp;gt; first = head.next;  
    head = first;  
    E x = first.item;  
    first.item = null;  
    return x;  
}  
  
private void signalNotFull() {  
    final ReentrantLock putLock = this.putLock;  
    putLock.lock();  
    try {  
        notFull.signal();  
    } finally {  
        putLock.unlock();  
    }  
}  
  
public E take() throws InterruptedException {  
    E x;  
    int c = -1;  
    final AtomicInteger count = this.count;  
    final ReentrantLock takeLock = this.takeLock;  
    // 使用takeLock  
    takeLock.lockInterruptibly();  
    try {  
        try {  
              // 若容量为空，等待notEmpty  
            while (count.get() == 0)  
                notEmpty.await();  
        } catch (InterruptedException ie) {  
            notEmpty.signal(); // propagate to a non-interrupted thread  
            throw ie;  
        }  
  
        x = extract();  
        c = count.getAndDecrement();  
        // 再次激活notEmpty  
        if (c &amp;gt; 1)  
            notEmpty.signal();  
    } finally {  
        takeLock.unlock();  
    }  
    // take执行之前容量已满，则激活notFull  
    if (c == capacity)  
        signalNotFull();  
    return x;  
}  
  
  ...  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;concurrenthashmap&quot;&gt;ConcurrentHashMap&lt;/h2&gt;

&lt;p&gt;ConcurrentHashMap是Map的一种并发实现，在该类中&lt;strong&gt;元素的read操作都是无锁了，而write操作需要被同步&lt;/strong&gt;。这非常适合于读操作远大于写操作的情况。在实现过程中，ConcurrentHashMap将所有元素分成了若干个segment，每个segment是独立的，在一个segment上加锁并不影响其他segment的操作。segment本身是一个hashtable，对于一个加入ConcurrentHashMap的&amp;lt;key, value&amp;gt;对，key的hash值中的高位被用来索引segment，而低位用于segment中的索引。&lt;/p&gt;

&lt;p&gt;虽然读操作不阻塞，但是读到的值可能不是最新的值，因为可能有其他线程又更新了元素，Iterator操作也是一样，包括size(),isEmpty(),containValue()返回的结果可能是错误的，而且每个时刻只有一个线程可以访问迭代器。&lt;/p&gt;

&lt;p&gt;segment是ConcurrentHashMap存储元素的基本段，它本身是一个hashtable的实现，read操作时无锁的，write需要同步，定义如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ConcurrentHashMap&amp;lt;K, V&amp;gt; extends AbstractMap&amp;lt;K, V&amp;gt;  
    implements ConcurrentMap&amp;lt;K, V&amp;gt;, Serializable {  
  
  
/** 
 *  key, hash, next都是不可改的 
*  value值可被重写 
*/  
static final class HashEntry&amp;lt;K,V&amp;gt; {  
    final K key;  
    final int hash;  
    volatile V value;  
    final HashEntry&amp;lt;K,V&amp;gt; next;  
  
    ...  
 }  
  
   static final class Segment&amp;lt;K,V&amp;gt; extends ReentrantLock   implements Serializable {  
  
    transient volatile int count;  
    transient volatile HashEntry[] table;  
    // 当segment中元素个数达到threshold时，需要rehash  
    transient int threshold;  
}  
  
  ...  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;segment的read操作：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static final class Segment&amp;lt;K,V&amp;gt; extends ReentrantLock implements Serializable {  
  
  HashEntry&amp;lt;K,V&amp;gt; getFirst(int hash) {  
      HashEntry[] tab = table;  
      return (HashEntry&amp;lt;K,V&amp;gt;) tab[hash &amp;amp; (tab.length - 1)];  
  }  
  
 V get(Object key, int hash) { // 该操作是无锁的  
      if (count != 0) { // read-volatile  
          HashEntry&amp;lt;K,V&amp;gt; e = getFirst(hash);  
          while (e != null) {  
              if (e.hash == hash &amp;amp;&amp;amp; key.equals(e.key)) {  
                  V v = e.value;  
                  if (v != null)  
                      return v;  
					// recheck  
                  return readValueUnderLock(e);
 
              }  
              e = e.next;  
          }  
      }  
      return null;  
  }  
  
...  
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;由于HashEntry当中的key和next都是final的，所以segment之上的操作不可能影响HashEntry列表之间相对的顺序，而value是可变的，当第一次读值失败时，尝试加锁读。
  segment的replace操作：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static final class Segment&amp;lt;K,V&amp;gt; extends ReentrantLock implements Serializable {  
  
   /** 
   * replace操作是就地替换，HashEntry的value是非final的 
   */  
    boolean replace(K key, int hash, V oldValue, V newValue) {  
        lock();  // replace操作是同步的  
    try {  
            // 得到该hash值对应的entry列表  
       HashEntry&amp;lt;K,V&amp;gt; e = getFirst(hash);  
       while (e != null &amp;amp;&amp;amp; (e.hash != hash || !				key.equals(e.key)))  
             e = e.next;  
 
            boolean replaced = false;  
            if (e != null &amp;amp;&amp;amp; oldValue.equals(e.value)) { 	// 替换  
         		 replaced = true;  
                 e.value = newValue;  
            }  
            return replaced;  
        } finally {  
            unlock();  
        }  
    }  
  
  ...  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;segment的remove操作一种copy on write 的方法，保留被删元素之后的列表，copy被删元素之前的hashEntry：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static final class Segment&amp;lt;K,V&amp;gt; extends ReentrantLock implements Serializable {  
  
    V remove(Object key, int hash, Object value) {  
        lock();  
        try {  
            int c = count - 1;  
            HashEntry[] tab = table;  
            int index = hash &amp;amp; (tab.length - 1);  
            HashEntry&amp;lt;K,V&amp;gt; first = (HashEntry&amp;lt;K,V&amp;gt;)tab[index];  
            HashEntry&amp;lt;K,V&amp;gt; e = first;  
            while (e != null &amp;amp;&amp;amp; (e.hash != hash || !key.equals(e.key)))  
                e = e.next;  
  
            V oldValue = null;  
            if (e != null) {  
                V v = e.value;  
                if (value == null || value.equals(v)) { // copy on write  
                    oldValue = v;  
                    ++modCount;  
                    // e之后的列表可以保留，只需要重新创建e之前的HashEntry即可  
             HashEntry&amp;lt;K,V&amp;gt; newFirst = e.next;  
                    // copy on write e之前的HashEntry  
                    for (HashEntry&amp;lt;K,V&amp;gt; p = first; p != e; p = p.next)  
                        newFirst = new HashEntry&amp;lt;K,V&amp;gt;(p.key, p.hash,    
                                                      newFirst, p.value);  
                    tab[index] = newFirst;  
                    count = c; // write-volatile  
                }  
            }  
            return oldValue;  
        } finally {  
            unlock();  
        }  
    }  
  
  ...  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;segment的rehash操作实现比较特别，为了保证rehash过程中copy的元素尽可能少，segment在rehash时Entry入口的个数是以2的倍数增长，这可以保证一个entry在rehash之后要么在原来的列表中，要么在下一个列表中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static final class Segment&amp;lt;K,V&amp;gt; extends ReentrantLock implements Serializable {  
  
    void rehash() {  
        // 局部变量引用table  
        HashEntry[] oldTable = table;              
        int oldCapacity = oldTable.length;  
        if (oldCapacity &amp;gt;= MAXIMUM_CAPACITY)  
            return;  
  
        // 右移1位相当于乘以2  
        HashEntry[] newTable = new HashEntry[oldCapacity &amp;lt;&amp;lt; 1];  
        threshold = (int)(newTable.length * loadFactor);  
        int sizeMask = newTable.length - 1;  
        for (int i = 0; i &amp;lt; oldCapacity ; i++) {  
            // 第i个entry列表  
       HashEntry&amp;lt;K,V&amp;gt; e = (HashEntry&amp;lt;K,V&amp;gt;)oldTable[i];  
  
            if (e != null) {  
                HashEntry&amp;lt;K,V&amp;gt; next = e.next;  
                // 在新table上的索引  
                int idx = e.hash &amp;amp; sizeMask;  
  
                if (next == null)  
                    newTable[idx] = e;  
                else {  
                    // 寻找该entry列表末端，rehash之后idx相同的元素  
                    // 这些元素不需要被copy  
                    HashEntry&amp;lt;K,V&amp;gt; lastRun = e;  
                    int lastIdx = idx;  
                    for (HashEntry&amp;lt;K,V&amp;gt; last = next;  
                         last != null;  
                         last = last.next) {  
                        int k = last.hash &amp;amp; sizeMask;  
                        if (k != lastIdx) {  
                            lastIdx = k;  
                            lastRun = last;  
                        }  
                    }  
                    // 将lastRun之后的整个列表挂到新位置上  
                    newTable[lastIdx] = lastRun;  
  
                    // Clone all remaining nodes  
                    for (HashEntry&amp;lt;K,V&amp;gt; p = e; p != lastRun; p = p.next) {  
                        int k = p.hash &amp;amp; sizeMask;  
                        HashEntry&amp;lt;K,V&amp;gt; n = (HashEntry&amp;lt;K,V&amp;gt;)newTable[k];  
                        newTable[k] = new HashEntry&amp;lt;K,V&amp;gt;(p.key, p.hash,  
                                                         n, p.value);  
                    }  
                }  
            }  
        }  
        table = newTable;  
    }  
  
  ...  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ConcurrentHashMap在Segment的基础上，通过首先将&amp;lt;key, value&amp;gt;对hash到一个segment，再由segment实现对entry的管理。&lt;/p&gt;

&lt;p&gt;ConcurrentHashMap的get实现：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ConcurrentHashMap&amp;lt;K, V&amp;gt; extends AbstractMap&amp;lt;K, V&amp;gt;  
    implements ConcurrentMap&amp;lt;K, V&amp;gt;, Serializable {  
  
final Segment&amp;lt;K,V&amp;gt; segmentFor(int hash) {  
    return (Segment&amp;lt;K,V&amp;gt;) segments[(hash &amp;gt;&amp;gt;&amp;gt; segmentShift) &amp;amp; segmentMask];  
}  
  
public V get(Object key) {  
    int hash = hash(key); // throws NullPointerException if key null  
    return segmentFor(hash).get(key, hash);  
}  
  
  ...  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ConcurrentHashMap的put和get方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ConcurrentHashMap&amp;lt;K, V&amp;gt; extends AbstractMap&amp;lt;K, V&amp;gt;  
    implements ConcurrentMap&amp;lt;K, V&amp;gt;, Serializable {  
  
public V put(K key, V value) {  
    if (value == null)  
        throw new NullPointerException();  
    int hash = hash(key);  
    return segmentFor(hash).put(key, hash, value, false);  
}  
  
public V remove(Object key) {  
    int hash = hash(key);  
    return segmentFor(hash).remove(key, hash, null);  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;…&lt;br /&gt;
}&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;concurrentlinkedqueue&quot;&gt;ConcurrentLinkedQueue&lt;/h2&gt;

&lt;p&gt;ConcurrentLinkedQueue充分使用了atomic包的实现&lt;strong&gt;打造了一个无锁并发线程安全的队列&lt;/strong&gt;。对比锁机制的实现，个人认为使用无锁机制的难点在于要充分考虑线程间的协调。简单的说就是多个线程对内部数据结构进行访问时，如果其中一个线程执行的中途因为一些原因出现故障，其他的线程能够检测并帮助完成剩下的操作。这就需要把对数据结构的操作过程精细的划分成多个状态或阶段，考虑每个阶段或状态多线程访问会出现的情况。上述的难点在此次分析的并发Queue的实现中有很好的说明。&lt;/p&gt;

&lt;p&gt;对于多线程同时访问容器元素的情况，concurrentLinkedQueue是一个很好的选择，因为所有的操作都是非阻塞的，所以它的迭代操作返回的结果并不是最新的，不会出现concurrentmodificationException。&lt;/p&gt;

&lt;p&gt;而且不像很多其他容器，ConcurrentLinkedQueue的size()操作不是常量时间，返回的结果也不一定是准确的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ConcurrentLinkedQueue&amp;lt;E&amp;gt; extends AbstractQueue&amp;lt;E&amp;gt;  
    implements Queue&amp;lt;E&amp;gt;, java.io.Serializable {  
private static final long serialVersionUID = 196745693267521676L;  
  
private static class Node&amp;lt;E&amp;gt; {  
    private volatile E item;  
    private volatile Node&amp;lt;E&amp;gt; next;  
  
    private static final  
        AtomicReferenceFieldUpdater&amp;lt;Node, Node&amp;gt;  
        nextUpdater =  
        AtomicReferenceFieldUpdater.newUpdater  
        (Node.class, Node.class, &quot;next&quot;);  
    private static final  
        AtomicReferenceFieldUpdater&amp;lt;Node, Object&amp;gt;  
        itemUpdater =  
        AtomicReferenceFieldUpdater.newUpdater  
        (Node.class, Object.class, &quot;item&quot;);  
  
    Node(E x) { item = x; }  
  
    Node(E x, Node&amp;lt;E&amp;gt; n) { item = x; next = n; }  
  
    E getItem() {  
        return item;  
    }  
  
    boolean casItem(E cmp, E val) {  
        return itemUpdater.compareAndSet(this, cmp, val);  
    }  
  
    void setItem(E val) {  
        itemUpdater.set(this, val);  
    }  
  
    Node&amp;lt;E&amp;gt; getNext() {  
        return next;  
    }  
  
    boolean casNext(Node&amp;lt;E&amp;gt; cmp, Node&amp;lt;E&amp;gt; val) {  
        return nextUpdater.compareAndSet(this, cmp, val);  
    }  
  
    void setNext(Node&amp;lt;E&amp;gt; val) {  
        nextUpdater.set(this, val);  
    }  
  
}  
  
private static final  
    AtomicReferenceFieldUpdater&amp;lt;ConcurrentLinkedQueue, Node&amp;gt;  
    tailUpdater =  
    AtomicReferenceFieldUpdater.newUpdater  
    (ConcurrentLinkedQueue.class, Node.class, &quot;tail&quot;);  
private static final  
    AtomicReferenceFieldUpdater&amp;lt;ConcurrentLinkedQueue, Node&amp;gt;  
    headUpdater =  
    AtomicReferenceFieldUpdater.newUpdater  
    (ConcurrentLinkedQueue.class,  Node.class, &quot;head&quot;);  
  
private boolean casTail(Node&amp;lt;E&amp;gt; cmp, Node&amp;lt;E&amp;gt; val) {  
    return tailUpdater.compareAndSet(this, cmp, val);  
}  
  
private boolean casHead(Node&amp;lt;E&amp;gt; cmp, Node&amp;lt;E&amp;gt; val) {  
    return headUpdater.compareAndSet(this, cmp, val);  
}  
  
private transient volatile Node&amp;lt;E&amp;gt; head = new Node&amp;lt;E&amp;gt;(null, null);  
  
private transient volatile Node&amp;lt;E&amp;gt; tail = head;  
...  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;先看看其内部数据结构Node的实现。由于使用了原子字段更新器&lt;code class=&quot;highlighter-rouge&quot;&gt;AtomicReferenceFieldUpdater&amp;lt;T,V&amp;gt;&lt;/code&gt;（其中T表示持有字段的类的类型，V表示字段的类型），所以其对应的需要更新的字段要使用volatile进行声明。其&lt;code class=&quot;highlighter-rouge&quot;&gt;newUpdater(Class&amp;lt;U&amp;gt; tclass, Class&amp;lt;W&amp;gt; vclass, String fieldName)&lt;/code&gt;方法实例化一个指定字段的更新器，参数分别表示：持有需要更新字段的类，字段的类，要更新的字段的名称。Node的内部变量item，next分别有对应自己的字段更新器，并且包含了对其原子性操作的方法&lt;code class=&quot;highlighter-rouge&quot;&gt;compareAndSet(T obj, V expect, V update)&lt;/code&gt;，其中T是持有被设置字段的对象，后两者分别是期望值和新值。&lt;/p&gt;

&lt;p&gt;对于ConcurrentLinkedQueue自身也有&lt;strong&gt;两个volatile的线程共享变量：head，tail分别对应队列的头指针和尾指针&lt;/strong&gt;。要保证这个队列的线程安全就是保证对这两个Node的引用的访问（更新，查看）的原子性和可见性，由于volatile本身能够保证可见性，所以就是对其修改的原子性要被保证：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public boolean offer(E e) {  
if (e == null) throw new NullPointerException();  
Node&amp;lt;E&amp;gt; n = new Node&amp;lt;E&amp;gt;(e, null);  
for (;;) {  
    Node&amp;lt;E&amp;gt; t = tail;  
    Node&amp;lt;E&amp;gt; s = t.getNext();  
    if (t == tail) { //-----------------------------a  
        if (s == null) { //-------------------------b  
            if (t.casNext(s, n)) { //---------------c  
                casTail(t, n); //-------------------d  
                return true;  
            }  
        } else {  
            casTail(t, s); //-----------------------e  
        }  
    }  
}   }  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;offer()方法都很熟悉了，就是入队的操作。涉及到改变尾指针的操作，所以要看这个方法实现是否保证了原子性。CAS操作配合循环是原子性操作的保证，这里也不例外。此方法的循环内首先获得尾指针和其next指向的对象，由于tail和Node的next均是volatile的，所以保证了获得的分别都是最新的值。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;代码a：&lt;code class=&quot;highlighter-rouge&quot;&gt;t==tail&lt;/code&gt;是最上层的协调，如果其他线程改变了tail的引用，则说明现在获得不是最新的尾指针需要重新循环获得最新的值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码b：&lt;code class=&quot;highlighter-rouge&quot;&gt;s==null&lt;/code&gt;的判断。静止状态下tail的next一定是指向null的，但是多线程下的另一个状态就是中间态：tail的指向没有改变，但是其next已经指向新的结点，即完成tail引用改变前的状态，这时候&lt;code class=&quot;highlighter-rouge&quot;&gt;s!=null&lt;/code&gt;。这里就是协调的典型应用，直接进入代码e去协调参与中间态的线程去完成最后的更新，然后重新循环获得新的tail开始自己的新一次的入队尝试。另外值得注意的是a,b之间，其他的线程可能会改变tail的指向，使得协调的操作失败。从这个步骤可以看到无锁实现的复杂性。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码c：&lt;code class=&quot;highlighter-rouge&quot;&gt;t.casNext(s, n)&lt;/code&gt;是入队的第一步，因为入队需要两步：更新Node的next，改变tail的指向。代码c之前可能发生tail引用指向的改变或者进入更新的中间态，这两种情况均会使得t指向的元素的next属性被原子的改变，不再指向null。这时代码c操作失败，重新进入循环。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码d：这是完成更新的最后一步了，就是更新tail的指向，最有意思的协调在这儿又有了体现。从代码看&lt;code class=&quot;highlighter-rouge&quot;&gt;casTail(t, n)&lt;/code&gt;不管是否成功都会接着返回true标志着更新的成功。首先如果成功则表明本线程完成了两步的更新，返回true是理所当然的；如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;casTail(t, n)&lt;/code&gt;不成功呢？要清楚的是完成代码c则代表着更新进入了中间态，代码d不成功则是tail的指向被其他线程改变。意味着对于其他的线程而言：它们得到的是中间态的更新，&lt;code class=&quot;highlighter-rouge&quot;&gt;s!=null&lt;/code&gt;，进入代码e帮助本线程执行最后一步并且先于本线程成功。这样本线程虽然代码d失败了，但是是由于别的线程的协助先完成了，所以返回true也就理所当然了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;通过分析这个入队的操作，可以清晰的看到无锁实现的每个步骤和状态下多线程之间的协调和工作。理解了入队的整个过程，出队的操作&lt;code class=&quot;highlighter-rouge&quot;&gt;poll()&lt;/code&gt;的实现也就变得简单了。基本上是大同小异的，无非就是同时牵涉到了head和tail的状态，在改变head的同时照顾到tail的协调，在此不多赘述。下面介绍一下其无锁下的查看访问，其内部不单单是查看更包含了线程间的协调，这是无锁实现的一个特点。不管是&lt;code class=&quot;highlighter-rouge&quot;&gt;contains()，size()&lt;/code&gt;还是isEmpty()，只要获得了head后面第一个最新的Node就可以很轻松的实现，毕竟Node的&lt;code class=&quot;highlighter-rouge&quot;&gt;getNext()和getItem()&lt;/code&gt;返回的都是对应的最新值。所以先看看这些方法内部的first()如何获得最新的第一个Node：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Node&amp;lt;E&amp;gt; first() {  
for (;;) {  
    Node&amp;lt;E&amp;gt; h = head;  
    Node&amp;lt;E&amp;gt; t = tail;  
    Node&amp;lt;E&amp;gt; first = h.getNext();  
    if (h == head) { //----------------  ---------a  
        if (h == t) { //--------------------------b  
            if (first ==null) --------------------c  
                return null;  
            else  
                casTail(t, first); //-------------d  
        } else {  
            if (first.getItem() != null) //-------e  
                return first;  
            else
			 // remove deleted node and continue  
                casHead(h, first); //-------------f  
        }  
    }  
}   }  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此方法在尝试获得最新的第一个非head结点的时候，在不同的阶段同样在协调着head和tail的更新任务，让人感觉无锁的世界没有纯粹的工作，呵呵。 
- 代码a：还是最上层的协调，head指向没改变的情况下才继续下面的操作。这时侯head只可能是静止的，因为&lt;code class=&quot;highlighter-rouge&quot;&gt;poll()&lt;/code&gt;出队操作的步骤是反着的：首先更新head的指向进入中间态，然后更新原head的next的item为null。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;代码b：之所以&lt;code class=&quot;highlighter-rouge&quot;&gt;h==t&lt;/code&gt;的情况独立于其他的情况(在出队&lt;code class=&quot;highlighter-rouge&quot;&gt;poll()&lt;/code&gt;方法中同样)，主要是因为&lt;code class=&quot;highlighter-rouge&quot;&gt;first!=null&lt;/code&gt;时可能对应着某一个更新的中间态，而产生中间态的的必要条件就是代码b成立。如果&lt;code class=&quot;highlighter-rouge&quot;&gt;h==t&lt;/code&gt;则表示当前线程获得的首尾指针指向同一个结点，当然代码b执行之后可能其他线程会进行head或者tail的更新。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码c：&lt;code class=&quot;highlighter-rouge&quot;&gt;first==null&lt;/code&gt;表明tail并没有进入更新的中间态而是处于静止状态，并且由于tail指向的是head的指向，所以返回null是唯一的选择。但是这美好的一切都是建立在代码b和代码c之间没有其他的线程更新tail。一旦有其他的线程执行了入队的操作并至少进入中间态的话，&lt;code class=&quot;highlighter-rouge&quot;&gt;h==t和first==null&lt;/code&gt;都遗憾的成立，这就造成了取得幻象值，而实际上h.getNext()已经不再为null。个人认为代码c改成&lt;code class=&quot;highlighter-rouge&quot;&gt;if((first = h.getNext()) == null)&lt;/code&gt;更能提高命中率。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码d：只要`first!=null，本线程则去尝试协调其他的线程先完成tail的更新，等待循环再次获取最新的head和tail。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码e：此处first一定不为null，tail更新与否不影响first的item的获取，但是head的更新会有影响。如果head正在被另一个线程更新并进入中间态，既是poll()内的&lt;code class=&quot;highlighter-rouge&quot;&gt;else if (casHead(h, first))&lt;/code&gt; 成功，但是并没有执行first.setItem(null)之前。此时代码e是满足的，返回的也是当前的first的，但是随后head全部更新成功则first的item为null。所以此处返回的first的item并不一定是&lt;code class=&quot;highlighter-rouge&quot;&gt;item!=null&lt;/code&gt;的结点，在使用此方法获得的结点的item时一定要再次的进行判断，这点在contains(…)等方法内都有体现。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码f：如果first的&lt;code class=&quot;highlighter-rouge&quot;&gt;item==null&lt;/code&gt;，则更新head的指向。直观上看似乎多余，因为出队的操作是先更新head的指向再更新item为null的。但是另一个方法remove(…)则仅仅更新item的值而不改变head的指向，所以针对这样的多线程调用，代码f变得非常的必需了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;这样通过这两个方法的分析可以推及对ConcurrentLinkedQueue共享变量的其他操作的实现，这样的无锁的实现印象最深的就是要考虑线程间的协调。不像锁机制的实现虽然牺牲了一定的性能，但是至少操作这些非线程安全的共享变量时不用过多的考虑其他线程的操作。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>如何评价『黑客与画家』</title>
   <link href="http://http://coolshell.info/blog/2014/11/how-to-evaluate-the-hackers-and-painters.html"/>
   <updated>2014-11-01T00:00:00+00:00</updated>
   <id>/blog/2014/11/how-to-evaluate-the-hackers-and-painters</id>
   <content type="html">&lt;p&gt;传送门：&lt;a href=&quot;http://t.cn/zlg4njc&quot;&gt;黑客与画家:硅谷创业之父Paul Graham文集&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一本好的书，让我们收获的不单单是某种技巧，或者某种方法论， 
&lt;strong&gt;他教给我们的是一种严密的思维方式，是一种学会把自己的眼光放得更加长远的决策习惯，他促使我们养成独立思考的习惯。&lt;/strong&gt;
他没有送给我们一条大鱼，却把捕捉大鱼的方法交给了我们， &lt;strong&gt;授人以鱼，不如授人以渔&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我一直觉得把一个我们所熟知的很普通的问题讲的非常透彻而且非常清楚是一种相当了不起的能力，
保罗·格雷尔姆 不仅把问题讲的非常透彻，而且还非常有趣，
让我们在读的时候感觉趣味盎然，这一点是非常不容易的。&lt;/p&gt;

&lt;p&gt;很多的互联网从业者想必早就听说过这本书，而且大部分人应该都已经阅读过这本书了，
所以我就简单的从其他的角度来谈一下我读完本书的一些感想，希望对大家有所帮助。&lt;/p&gt;

&lt;p&gt;在阅读「为什么书呆子不受欢迎」这章时，我想到了这么一句话，「&lt;strong&gt;你的时间在哪里，你的成就就在哪里&lt;/strong&gt;」。
生活中的我们，总是喜欢羡慕那些成功人士，我们总觉得那些成功人士与我们普通人不一样，
他们必然懂得某种通往成功的诀窍，他们生下来就与周围的人们有所不同。
我们也总是希望能从这些成功人士那里获得某些珍贵的建议，获得那些能使人最终功成名就的万用妙方。
在武侠小说里面， &lt;strong&gt;渴望成为武林高手的人，都希望得到一本有着盖世神功的武林秘籍。&lt;/strong&gt;
因为这秘籍一旦得手，只要依葫芦画瓢，就可大功告成。&lt;/p&gt;

&lt;p&gt;但是世事又怎会如此简单，也永远不会有这样或者那样的武林秘诀。
&lt;strong&gt;所谓的成功人士不过是把自己的时间投入到那些他们感兴趣的领域里面罢了。&lt;/strong&gt;
其实， &lt;strong&gt;我们每一个人也许都是我们所投入时间的那个领域的成功人士。&lt;/strong&gt;
有的同学，可能在学校里没有把时间投入学习中，但是呢，投入了很多的时间在游戏领域，每天花费大量的时间去玩游戏，
看游戏讲解视频，研究游戏的战略，思考游戏的玩法，在这个游戏里面，他就是王者；
有的人呢，可能喜欢计算机，他喜欢与程序打交道，他希望了解计算机是如何思考的，于是最终他就成了黑客。&lt;/p&gt;

&lt;p&gt;画家能够把画画的比我们更好，只是因为他把他的时间都投入到里面罢了，田径运动员跑的比我们更快，
同样只不过因为他把他的时间都投入到跑步里面罢了。
&lt;strong&gt;书呆子也并非不想让自己不受欢迎，他们只是更愿意把时间投入到让自己聪明上去罢了。&lt;/strong&gt;
我们每一个人，都可以自己去决定把自己的时间投入到哪个领域，我们所投入的时间最终也会成就我们。&lt;/p&gt;

&lt;p&gt;在阅读本书的其他章节的时候，我更加深刻的发觉，黑客们，其实与我们并没有多大的不同，
&lt;strong&gt;他们只是比我们普通人更加崇尚分享、开放和民主，他们对任何被禁止的东西都怀有特别强烈的好奇心，他们喜欢去思考那些似乎不应该被思考的问题，他们相信计算机将会深刻的改变人们的生活。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;虽然这是一本讲述黑客的书，不过个人觉得每个人都应该看看。
如同译者阮一峰所言：未来的人类生活不仅是人与人的互动，而且更多的将是人与计算机的互动。
想要把握这个时代，就必须理解计算机。
理解计算机的关键，则是要理解计算机背后的人。
表面上这是一个机器的时代，但是实际上机器的设计者决定了我们的时代。
&lt;strong&gt;程序员的审美决定了你看到的软件界面，程序员的爱好决定了你有什么样的软件可以使用。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你想要进一步了解作者的话，下面这两个链接可以帮助你：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作者博客主页： &lt;a href=&quot;http://www.paulgraham.com&quot;&gt;http://www.paulgraham.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Wiki 百科上关于他的介绍： &lt;a href=&quot;http://en.wikipedia.org/wiki/Paul_Graham_(computer_programmer)&quot;&gt;http://en.wikipedia.org/wiki/Paul_Graham_(computer_programmer)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>XMPP协议分析-具体分析</title>
   <link href="http://http://coolshell.info/blog/2014/10/xmpp-analise.html"/>
   <updated>2014-10-31T00:00:00+00:00</updated>
   <id>/blog/2014/10/xmpp-analise</id>
   <content type="html">&lt;p&gt;通过WireShark抓包来具体分析XMPP协议，下面用人人桌面版演示了，XMPP客户端从登录到获取新鲜事的过程，通过分析具体的数据包能够更容易的理解协议。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step1.TCP三次握手建立连接&lt;/strong&gt;
&lt;img src=&quot;/images/images/openfire/xmpp2.jpeg&quot; alt=&quot;&quot; /&gt;
图1.xmpp客户端使用5222端口，设置SYN请求连接&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/openfire/xmpp3.jpeg&quot; alt=&quot;&quot; /&gt;
图2.服务器返回ACK，确认请求，同样设置SYN请求连接&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/openfire/xmpp4.jpeg&quot; alt=&quot;&quot; /&gt;
图3.客户端确认服务器连接请求，连接建立完毕。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step2.客户端请求，服务器响应。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/openfire/xmpp5.jpeg&quot; alt=&quot;&quot; /&gt;
图4.客户端发送Jabber/x Request请求，&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;客户端初始化流给服务器&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/openfire/xmpp6.jpeg&quot; alt=&quot;&quot; /&gt;
图5.服务器返回Jabber/x Response，服务器发送一个流标签给客户端作为应答&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/openfire/xmpp7.jpeg&quot; alt=&quot;&quot; /&gt;
图5.5服务器发送 STARTTLS 范围给客户端（包括验证机制和任何其他流特性）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/openfire/xmpp8.jpeg&quot; alt=&quot;&quot; /&gt;
图6.客户端发送请求，发送，请求使用传输层加密协议[TLS]&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/openfire/xmpp9.jpeg&quot; alt=&quot;&quot; /&gt;
图7.服务器端响应，返回元素，确认传输加密&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/openfire/xmpp10.jpeg&quot; alt=&quot;&quot; /&gt;
图8.之后的请求，数据均已经加密&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/openfire/xmpp11.jpeg&quot; alt=&quot;&quot; /&gt;
图9.之后的响应，返回数据也是加密的&lt;/p&gt;

&lt;p&gt;这次抓包分析，可以看到，xml文档的安全性有了一定的保障，加密过的数据无法看到。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Androidpn 消息推送总结</title>
   <link href="http://http://coolshell.info/blog/2014/10/androidDP-project.html"/>
   <updated>2014-10-31T00:00:00+00:00</updated>
   <id>/blog/2014/10/androidDP-project</id>
   <content type="html">&lt;p&gt;Androidpn 开源项目托管地址：http://sourceforge.net/projects/androidpn/&lt;/p&gt;

&lt;p&gt;Androidpn 开源项目自身描述：This is an open source project to provide push notification support for Android, a xmpp based notification server and a client tool kit.&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;源码分析&lt;/h1&gt;

&lt;p&gt;在程序的入口 DemoAppActivity 中设置通知的 icon 并开启消息接收服务，代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number：1-1 
ServiceManager serviceManager = new ServiceManager(this);
serviceManager.setNotificationIcon(R.drawable.notification);
serviceManager.startService();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在上面的代码中可以看到程序对 ServiceManager 进行了初始化操作，在 ServiceManager 类的构造函数中我们可以看到程序对传递过来的 context 进行了判断，如果这个 context 是一个 Activity 实例，紧接着会获取对应的包名和类名。之后再去加载 res/raw/androidpn.properties 配置文件中的参数信息，并将读取到的信息和之前从 context 中获取的包名和类名一起存入首选项中。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number：2-1 
public ServiceManager(Context context) {
this.context = context;

if (context instanceof Activity) {
Activity callbackActivity = (Activity) context;
callbackActivityPackageName = callbackActivity.getPackageName();
callbackActivityClassName = callbackActivity.getClass().getName();
}

props = loadProperties();
apiKey = props.getProperty(&quot;apiKey&quot;, &quot;&quot;);
xmppHost = props.getProperty(&quot;xmppHost&quot;, &quot;127.0.0.1&quot;);
xmppPort = props.getProperty(&quot;xmppPort&quot;, &quot;5222&quot;);

sharedPrefs = context.getSharedPreferences(Constants.SHARED_PREFERENCE_NAME, Context.MODE_PRIVATE);
Editor editor = sharedPrefs.edit();
editor.putString(Constants.API_KEY, apiKey);
editor.putString(Constants.VERSION, version);
editor.putString(Constants.XMPP_HOST, xmppHost);
editor.putInt(Constants.XMPP_PORT, Integer.parseInt(xmppPort));
editor.putString(Constants.CALLBACK_ACTIVITY_PACKAGE_NAME, callbackActivityPackageName);
editor.putString(Constants.CALLBACK_ACTIVITY_CLASS_NAME, callbackActivityClassName);
editor.commit();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完成上述操作之后，紧接着调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ServiceManager.startService()&lt;/code&gt; 方法来开启服务，实际上 ServiceManager 只是一个普通的类，方法 ServiceManager.startService() 只是开启一个子线程来开启真正的服务类 NotificationService ，许多人认为开一个线程不停的去开启服务会不会消耗相当一部分资源？答案是不会的，因为服务的生命周期决定了onCreate() 方法在服务被创建时调用，该方法只会被调用一次，无论调用多少次 startService() 方法，服务也只被创建一次，细心的读者会发现 Androidpn 的作者在 NotificationService 类的 &lt;code class=&quot;highlighter-rouge&quot;&gt;onStart(Intent intent, int startId)&lt;/code&gt; 方法中没有做任何事，而是在onCreate() 方法中完成了诸多操作。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number：3-1
public void startService() {
Thread serviceThread = new Thread(new Runnable() {
public void run() {
Intent intent = NotificationService.getIntent();
context.startService(intent);
}
});
serviceThread.start();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面我们来看 NotificationService 类的onCreate() 方法中都完成什么操作？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number：4-1
public void onCreate() {
telephonyManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
sharedPrefs = getSharedPreferences(Constants.SHARED_PREFERENCE_NAME, Context.MODE_PRIVATE);

deviceId = telephonyManager.getDeviceId();
Editor editor = sharedPrefs.edit();
editor.putString(Constants.DEVICE_ID, deviceId);
editor.commit();

if (deviceId == null || deviceId.trim().length() == 0 || deviceId.matches(&quot;0+&quot;)) {
if (sharedPrefs.contains(&quot;EMULATOR_DEVICE_ID&quot;)) {
deviceId = sharedPrefs.getString(Constants.EMULATOR_DEVICE_ID, &quot;&quot;);
} else {
deviceId = (new StringBuilder(&quot;EMU&quot;)).append((new Random(System.currentTimeMillis())).nextLong()).toString();
editor.putString(Constants.EMULATOR_DEVICE_ID, deviceId);
editor.commit();
}
}
xmppManager = new XmppManager(this);
taskSubmitter.submit(new Runnable() {
public void run() {
NotificationService.this.start();
}
});
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在上面的方法中作者获取了设备号并将设备号存入了首选项中，同时还对在模拟器下运行的情况做了处理，这些操作是次要的。真正的核心的操作是 taskSubmitter 里调用了NotificationService.this.start()，这里的 NotificationService.this 完成了 NotificationService 的实例化，我们可以看到 NotificationService 类的构造方法中完成了 NotificationReceiver、ConnectivityReceiver、PhoneStateChangeListener、Executors、TaskSubmitter、TaskTracker 等类的实例化。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number：5-1
public NotificationService() {
notificationReceiver = new NotificationReceiver();
connectivityReceiver = new ConnectivityReceiver(this);
phoneStateListener = new PhoneStateChangeListener(this);
executorService = Executors.newSingleThreadExecutor();
taskSubmitter = new TaskSubmitter(this);
taskTracker = new TaskTracker(this);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;NotificationService 的实例化完成后调用的start() 方法中注册了一个广播接收者 NotificationReceiver 用来处理从服务器推送过来的消息；同时还注册了一个广播接收者来监听网络连接状况，如果有网络连接，则执行 xmppManager.connect()，如果没有网络连接，则执行 xmppManager.disconnect()。但是在start() 方法中最终还是会执行 xmppManager.connect()。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number：6-1
private void start() {
registerNotificationReceiver();
registerConnectivityReceiver();
xmppManager.connect();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再来看看 xmppManager.connect() 方法中都做了些什么？程序在这个方法中提交了一个登录任务：submitLoginTask()，在提交的登录任务中又提交了一个注册任务：submitRegisterTask()，同时将新建的登录任务添加到任务集合中并交由 TaskTracker 来对添加的任务进行监视，此时 TaskTracker 的计数加一。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number：7-1
public void connect() {
 submitLoginTask();
}

Number：7-2
private void submitLoginTask() {
 submitRegisterTask();
 addTask(new LoginTask());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面继续来看新添加的登录任务 new LoginTask() 具体做了什么？看 Number：8-2 代码，程序在登录任务线程的 run() 方法中首先去判断当前客户端是否已经经过身份验证，验证身份的代码请看 Number：8-1 。&lt;/p&gt;

&lt;p&gt;如果没有通过身份验证：xmppManager 会获取当前连并接携带着从首选项中读取的 username 和password 执行登录操作，登录成功后 xmppManager 会在登录成功的连接上添加连接监听器&lt;code class=&quot;highlighter-rouge&quot;&gt;PersistentConnectionListener&lt;/code&gt;，这个监听器可以监听连接关闭和和连接错误，并在连接错误的情况下执行重连操作。接下来会在当前连接上添加包过滤器 PacketFilter packetFilter 和包监听器 &lt;code class=&quot;highlighter-rouge&quot;&gt;NotificationPacketListener packetListener&lt;/code&gt;，包过滤器用来校验从服务器发送过来的数据包是否符合 NotificationIQ 格式，打开 NotificationIQ 类我们可以看到这个类中定义了数据包中需要封装的信息：id、apiKey、title、message、uri。包监听器则是用来真正处理从服务器发过来的数据。&lt;/p&gt;

&lt;p&gt;请看 Number：8-3 代码，在 NotificationPacketListener 类的 &lt;code class=&quot;highlighter-rouge&quot;&gt;processPacket(Packet packet)&lt;/code&gt; 方法中程序首先会判断获得的数据包是否是 NotificationIQ 的一个实例，如果是程序会调用 NotificationIQ 的&lt;code class=&quot;highlighter-rouge&quot;&gt;getChildElementXML()&lt;/code&gt; 方法将数据包中携带的信息拼装为一个字符串进行判断动作是否为发送广播，如果动作为发送广播，程序会将数据包的信息填充到 Intent 中并发送广播，注意这个广播中填充到 Intent 的动作名称 Constants.ACTION_SHOW_NOTIFICATION 为显示广播，这个动作被另一个广播接收者 NotificationReceiver (该广播接收者在之前的&lt;code class=&quot;highlighter-rouge&quot;&gt; NotificationService 的start()&lt;/code&gt; 方法中已经注册)所监听。&lt;/p&gt;

&lt;p&gt;另外需要注意的是，如果客户端在登录过程中出现INVALID_CREDENTIALS_ERROR_CODE = “401” 错误，在 Number：8-2 的代码中我们可以看到程序执行了 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmppManager.reregisterAccount()&lt;/code&gt; 操作和 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmppManager.startReconnectionThread() &lt;/code&gt;操作。在 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmppManager.reregisterAccount()&lt;/code&gt; 操作中程序会删除保存在首选项中的 username 和password 并重新提交登录任务 submitLoginTask()，在这个登录任务中依次再嵌套执行注册、连接任务。这些任务执行完毕之后程序继续调用 xmppManager.startReconnectionThread() 执行重连操作。如果客户端在登录过程中出现不可预知的错误，在 Number：8-2 的代码中我们可以看到程序执直接调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmppManager.startReconnectionThread()&lt;/code&gt; 来执行重连操作。&lt;/p&gt;

&lt;p&gt;如果已经通过身份验证：意味着客户端已经登录成功，程序直接调用 xmppManager.runTask() 方法来执行之前添加到任务集合中的任务 new LoginTask()，同时 TaskTracker 的计数减一。&lt;/p&gt;

&lt;p&gt;Number：8-1
private boolean isAuthenticated() {
return connection != null &amp;amp;&amp;amp; connection.isConnected() &amp;amp;&amp;amp; connection.isAuthenticated();
}&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number：8-2
private class LoginTask implements Runnable {
final XmppManager xmppManager;
private LoginTask() {
this.xmppManager = XmppManager.this;
}
public void run() {
if (!xmppManager.isAuthenticated()) {
Log.d(LOGTAG, &quot;username=&quot; + username);
Log.d(LOGTAG, &quot;password=&quot; + password);
try {
xmppManager.getConnection().login(xmppManager.getUsername(), xmppManager.getPassword(), XMPP_RESOURCE_NAME);
Log.d(LOGTAG, &quot;Loggedn in successfully&quot;);
if (xmppManager.getConnectionListener() != null) {
xmppManager.getConnection().addConnectionListener(xmppManager.getConnectionListener());
}
PacketFilter packetFilter = new PacketTypeFilter(NotificationIQ.class);
PacketListener packetListener = xmppManager.getNotificationPacketListener();
connection.addPacketListener(packetListener, packetFilter);
xmppManager.runTask();
} catch (XMPPException e) {
Log.e(LOGTAG, &quot;LoginTask.run()... xmpp error&quot;);
Log.e(LOGTAG, &quot;Failed to login to xmpp server. Caused by: &quot; + e.getMessage());
String INVALID_CREDENTIALS_ERROR_CODE = &quot;401&quot;;
String errorMessage = e.getMessage();
if (errorMessage != null &amp;amp;&amp;amp; errorMessage.contains(INVALID_CREDENTIALS_ERROR_CODE)) {
xmppManager.reregisterAccount();
return;
}
xmppManager.startReconnectionThread();
} catch (Exception e) {
Log.e(LOGTAG, &quot;LoginTask.run()... other error&quot;);
Log.e(LOGTAG, &quot;Failed to login to xmpp server. Caused by: &quot; + e.getMessage());
xmppManager.startReconnectionThread();
}
} else {
Log.i(LOGTAG, &quot;Logged in already&quot;);
xmppManager.runTask();
}
}
}


Number：8-3
public class NotificationPacketListener implements PacketListener {

private static final String LOGTAG = LogUtil.makeLogTag(NotificationPacketListener.class);

private final XmppManager xmppManager;

public NotificationPacketListener(XmppManager xmppManager) {
this.xmppManager = xmppManager;
}

public void processPacket(Packet packet) {
Log.d(LOGTAG, &quot;NotificationPacketListener.processPacket()...&quot;);
Log.d(LOGTAG, &quot;packet.toXML()=&quot; + packet.toXML());

if (packet instanceof NotificationIQ) {
NotificationIQ notification = (NotificationIQ) packet;

if (notification.getChildElementXML().contains(&quot;androidpn:iq:notification&quot;)) {
String notificationId = notification.getId();
String notificationApiKey = notification.getApiKey();
String notificationTitle = notification.getTitle();
String notificationMessage = notification.getMessage();
String notificationUri = notification.getUri();

Intent intent = new Intent(Constants.ACTION_SHOW_NOTIFICATION);
intent.putExtra(Constants.NOTIFICATION_ID, notificationId);
intent.putExtra(Constants.NOTIFICATION_API_KEY, notificationApiKey);
intent.putExtra(Constants.NOTIFICATION_TITLE, notificationTitle);
intent.putExtra(Constants.NOTIFICATION_MESSAGE, notificationMessage);
intent.putExtra(Constants.NOTIFICATION_URI, notificationUri);

xmppManager.getContext().sendBroadcast(intent);
}
}
}
}


Number：8-4
public void reregisterAccount() {
removeAccount();
submitLoginTask();
runTask();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;NotificationReceiver 在接收到NotificationPacketListener 中发出的广播后，先判断Intent 中携带的动作和自己所收听的动作是否一致，如果一致，则继续从Intent 中取出Intent 所携带的信息并调用 Notifier 的&lt;code class=&quot;highlighter-rouge&quot;&gt;notify(String notificationId, String apiKey, String title, String message, String uri)&lt;/code&gt; 来发送通知。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number：9-1
public final class NotificationReceiver extends BroadcastReceiver {

private static final String LOGTAG = LogUtil.makeLogTag(NotificationReceiver.class);

public NotificationReceiver() {
}

public void onReceive(Context context, Intent intent) {
Log.d(LOGTAG, &quot;NotificationReceiver.onReceive()...&quot;);
String action = intent.getAction();
Log.d(LOGTAG, &quot;action=&quot; + action);

if (Constants.ACTION_SHOW_NOTIFICATION.equals(action)) {
String notificationId = intent.getStringExtra(Constants.NOTIFICATION_ID);
String notificationApiKey = intent.getStringExtra(Constants.NOTIFICATION_API_KEY);
String notificationTitle = intent.getStringExtra(Constants.NOTIFICATION_TITLE);
String notificationMessage = intent.getStringExtra(Constants.NOTIFICATION_MESSAGE);
String notificationUri = intent.getStringExtra(Constants.NOTIFICATION_URI);

Notifier notifier = new Notifier(context);
notifier.notify(notificationId, notificationApiKey, notificationTitle, notificationMessage, notificationUri);
}
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notifier 在发送通知之前会先去首选项中读取用户的配置信息，如果配置信息中&lt;code class=&quot;highlighter-rouge&quot;&gt; Constants.SETTINGS_NOTIFICATION_ENABLED&lt;/code&gt; 的值为 true，然后开始组装通知并为通知进行参数配置，这些操作完成后再调用 NotificationManager 将组装好的通知发送出去。至此，在客户端已经注册的前提下，执行的登录、接收服务器数据包、发送广播、发送通知的流程就结束了，添加在当前连接上的NotificationPacketListener 会一直监听从服务器发送过来的数据包并重复执行数据包解析、发送广播、发送通知的操作。&lt;/p&gt;

&lt;p&gt;但是需要注意的是从代码 Number：7-1 至代码 Number：9-1 的流程是以客户端已经完成注册为前提的；如果客户端是第一次执行消息推送的服务，显然不会直接进入到登录的逻辑中来，让我们继续跳到 Number：7-2 中的岔路口，程序在提交登录任务的内部嵌套着提交了一个注册任务 submitRegisterTask()，继续来看这个注册任务做了什么操作。在这个注册任务中继续将新建的注册任务添加到任务集合中并交由 TaskTracker 来对添加的任务进行监视，此时 TaskTracker 的计数加一；与此同时内嵌提交了一个连接任务&lt;code class=&quot;highlighter-rouge&quot;&gt;submitConnectTask()&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number：10-1
private void submitRegisterTask() {
submitConnectTask();
addTask(new RegisterTask());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;先来看登录任务中做了什么操作？参看代码 Number：11-1。&lt;/p&gt;

&lt;p&gt;如果没有注册：则使用UUID生成2个随机数作为 username 和 password，同时实例化 Registration，将创建的包过滤器和包监听器添加到当前连接上，然后使用 Registration 实例将生成的 username 和 password 作为属性添加到 Registration 实例上，再由当前连接调用&lt;code class=&quot;highlighter-rouge&quot;&gt; connection.sendPacket(registration)&lt;/code&gt; 向服务器发送数据包执行注册操作。创建的包监听器会监听并处理服务器会送的数据包，PacketListener 在接收到服务器会送的数据包后，同样会判断数据包的格式是否符合包过滤器中定义的格式，只有格式匹配的情况下进行后续处理。在格式匹配的情况下，程序继续进行判断：如果服务器返回信息的类型是 &lt;code class=&quot;highlighter-rouge&quot;&gt;IQ.Type.ERROR&lt;/code&gt; 则进行报错处理；如果服务器返回信息的类型是 &lt;code class=&quot;highlighter-rouge&quot;&gt;IQ.Type.RESULT &lt;/code&gt;证明在服务器注册成功，这时程序会将 username 和 password 存储到首选项中，之后程序直接调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmppManager.runTask() &lt;/code&gt;方法来执行之前添加到任务集合中的任务 &lt;code class=&quot;highlighter-rouge&quot;&gt;new LoginTask()&lt;/code&gt;，同时 TaskTracker 的计数减一。&lt;/p&gt;

&lt;p&gt;如果已经注册：意味着首选项中已经有了配置信息，程序直接调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;xmppManager.runTask() &lt;/code&gt;方法来执行之前添加到任务集合中的任务 &lt;code class=&quot;highlighter-rouge&quot;&gt;new LoginTask()&lt;/code&gt;，同时 TaskTracker 的计数减一。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number：11-1
private class RegisterTask implements Runnable {

final XmppManager xmppManager;
private RegisterTask() {
    xmppManager = XmppManager.this;
}

public void run() {
    if (!xmppManager.isRegistered()) {
        final String newUsername = newRandomUUID();
        final String newPassword = newRandomUUID();

        Registration registration = new Registration();
        PacketFilter packetFilter = new AndFilter(new PacketIDFilter(registration.getPacketID()), new PacketTypeFilter(IQ.class));

        PacketListener packetListener = new PacketListener() {

            public void processPacket(Packet packet) {
                Log.d(&quot;RegisterTask.PacketListener&quot;, &quot;processPacket().....&quot;);
                Log.d(&quot;RegisterTask.PacketListener&quot;, &quot;packet=&quot; + packet.toXML());
                if (packet instanceof IQ) {
                    IQ response = (IQ) packet;
                    if (response.getType() == IQ.Type.ERROR) {
                        if (!response.getError().toString().contains(&quot;409&quot;)) {
                            Log.e(LOGTAG, &quot;Unknown error while registering XMPP account! &quot; + response.getError().getCondition());
                        }
                    } else if (response.getType() == IQ.Type.RESULT) {
                        xmppManager.setUsername(newUsername);
                        xmppManager.setPassword(newPassword);
                        Log.d(LOGTAG, &quot;username=&quot; + newUsername);
                        Log.d(LOGTAG, &quot;password=&quot; + newPassword);
                        Editor editor = sharedPrefs.edit();
                        editor.putString(Constants.XMPP_USERNAME, newUsername);
                        editor.putString(Constants.XMPP_PASSWORD, newPassword);
                        editor.commit();
                        Log.i(LOGTAG, &quot;Account registered successfully&quot;);
                        xmppManager.runTask();
                    }
                }
            }
        };
        connection.addPacketListener(packetListener, packetFilter);
        registration.setType(IQ.Type.SET);
        registration.addAttribute(&quot;username&quot;, newUsername);
        registration.addAttribute(&quot;password&quot;, newPassword);
        connection.sendPacket(registration);
    } else {
        Log.i(LOGTAG, &quot;Account registered already&quot;);
        xmppManager.runTask();
    }
} }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至此，在客户端已经连接到服务器的前提下，执行的注册、登录、接收服务器数据包、发送广播、发送通知的流程就结束了，添加在当前连接上的 &lt;code class=&quot;highlighter-rouge&quot;&gt;NotificationPacketListener&lt;/code&gt; 会一直监听从服务器发送过来的数据包并重复执行数据包解析、发送广播、发送通知的操作。&lt;/p&gt;

&lt;p&gt;同样需要注意的是从代码 Number：10-1 至代码 Number：11-1 的流程是以客户端已经连接到服务器为前提的；如果客户端是第一次执行消息推送的服务，显然也不会直接进入到注册的逻辑中来，让我们继续跳到 Number：10-1 中的岔路口，程序在提交注册任务的内部嵌套着提交了一个连接任务 &lt;code class=&quot;highlighter-rouge&quot;&gt;submitConnectTask()&lt;/code&gt;，继续来看这个连接任务做了什么操作。在这个连接任务中程序直接将新建的连接任务添加到任务集合中并交由 TaskTracker 来对添加的任务进行监视，此时 TaskTracker 的计数加一。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number：12-1
private void submitConnectTask() {
addTask(new ConnectTask());
} 继续来看连接任务中做了什么操作？参看代码 Number：13-1。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果没有连接到服务器：程序会从首选项中读取 xmppHost 和 xmppPort 并使用 XMPPConnection 通过配置信息实例化一个连接，然后再由该连接执行连接操作。连接成功后，程序调用&lt;code class=&quot;highlighter-rouge&quot;&gt;xmppManager.runTask() &lt;/code&gt;方法来执行之前添加到任务集合中的任务 &lt;code class=&quot;highlighter-rouge&quot;&gt;new RegisterTask()&lt;/code&gt;，同时 TaskTracker 的计数减一。&lt;/p&gt;

&lt;p&gt;如果已经连接到服务器：程序直接调用&lt;code class=&quot;highlighter-rouge&quot;&gt; xmppManager.runTask()&lt;/code&gt; 方法来执行之前添加到任务集合中的任务 new RegisterTask()，同时 TaskTracker 的计数减一。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number：13-1
private class ConnectTask implements Runnable {

final XmppManager xmppManager;

private ConnectTask() {
    this.xmppManager = XmppManager.this;
}

public void run() {
    if (!xmppManager.isConnected()) {
        // Create the configuration for this new connection
        ConnectionConfiguration connConfig = new ConnectionConfiguration(xmppHost, xmppPort);
        connConfig.setSecurityMode(SecurityMode.required);
        connConfig.setSASLAuthenticationEnabled(false);
        connConfig.setCompressionEnabled(false);

        XMPPConnection connection = new XMPPConnection(connConfig);
        xmppManager.setConnection(connection);

        try {
            // Connect to the server
            connection.connect();
            Log.i(LOGTAG, &quot;XMPP connected successfully&quot;);
            // packet provider
            ProviderManager.getInstance().addIQProvider(&quot;notification&quot;, &quot;androidpn:iq:notification&quot;, new NotificationIQProvider());
        } catch (XMPPException e) {
            Log.e(LOGTAG, &quot;XMPP connection failed&quot;, e);
        }
        xmppManager.runTask();
    } else {
        Log.i(LOGTAG, &quot;XMPP connected already&quot;);
        xmppManager.runTask();
    }
} }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至此，在客户端执行的连接、注册、登录、接收服务器数据包、发送广播、发送通知的流程就结束了，添加在当前连接上的 &lt;code class=&quot;highlighter-rouge&quot;&gt;NotificationPacketListener &lt;/code&gt;会一直监听从服务器发送过来的数据包并重复执行数据包解析、发送广播、发送通知的操作。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;二、后续问题&lt;/h2&gt;

&lt;p&gt;▐ 关于服务器重启客户端自动重连服务器的问题？&lt;/p&gt;

&lt;p&gt;▐ 在 XmppManager 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;addTask(Runnable runnable)&lt;/code&gt; 方法中添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;runTask() &lt;/code&gt;方法即可解决。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void addTask(Runnable runnable) {
taskTracker.increase();
synchronized (taskList) {
    if (taskList.isEmpty() &amp;amp;&amp;amp; !running) {
        running = true;
        futureTask = taskSubmitter.submit(runnable);
        if (futureTask == null) {
            taskTracker.decrease();
        }
    } else {
        /**
         * runTask(); 解决服务器端重启后,客户端不能成功连接  Androidpn 服务器
         */
        runTask();
            
        taskList.add(runnable);
    }
} }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;▐ 关于使用设备ID或 MAC替换源码中的 UUID作为 username 和 password 带来的问题？&lt;/p&gt;

&lt;p&gt;如果把客户端随机生成的UUID代码，替换为设备的ID或者MAC作为用户名，服务器端会出现重复插入的错误。&lt;/p&gt;

&lt;p&gt;把客户端的数据清除(或卸载后重新安装)，那么 SharedPreferences 里的数据也会被清除，然而服务器端又有我们手机的设备 ID，这时客户端启动程序从首选项中读取不到 username 和 password 会重新拿着相同的设备 ID 提交给服务器进行注册，这时服务器端就会出现重复插入的问题。&lt;/p&gt;

&lt;p&gt;▐ 在服务器端保存用户信息的时候，检查数据库中是否存在该用户。&lt;/p&gt;

&lt;p&gt;▐ Android 消息推送的其他途径&lt;/p&gt;

&lt;p&gt;▐ 极光推送&lt;/p&gt;

&lt;p&gt;网站参考地址 : http://www.jpush.cn/&lt;/p&gt;

&lt;p&gt;▐ Google Cloud Messaging for Android&lt;/p&gt;

&lt;p&gt;网站参考地址 : http://developer.android.com/google/gcm/index.html&lt;/p&gt;

&lt;p&gt;▐ MQTT 协议推送&lt;/p&gt;

&lt;p&gt;客户端下载地址 : https://github.com/tokudu/AndroidPushNotificationsDemo&lt;/p&gt;

&lt;p&gt;服务器下载地址 : https://github.com/tokudu/PhpMQTTClient&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Smack开发手册</title>
   <link href="http://http://coolshell.info/blog/2014/10/how-to-use-smack.html"/>
   <updated>2014-10-30T00:00:00+00:00</updated>
   <id>/blog/2014/10/how to use smack</id>
   <content type="html">&lt;p&gt;这篇文章翻译自Smack的官方文档，&lt;a href=&quot;http://www.igniterealtime.org/builds/smack/docs/latest/documentation/&quot;&gt;http://www.igniterealtime.org/builds/smack/docs/latest/documentation/&lt;/a&gt;，转载请注明出处。&lt;/p&gt;

&lt;p&gt;Smack是一个为使用XMPP服务器聊天和发送即时消息交流而提供的库。&lt;/p&gt;

&lt;h2 id=&quot;smack&quot;&gt;Smack的主要优势：&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用简单且拥有强大的API。向用户发送一条文本消息只需用一下三行代码即可完成&lt;/p&gt;

    &lt;p&gt;XMPPConnection connection = new XMPPConnection(“jabber.org”);
 connection.login(“mtucker”, “password”);
 connection.createChat(“jsmith@jivesoftware.com”).sendMessage(“Howdy!;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;不像其它库那样，强制你在信息报级（packet level）编码。Smack提供智能的、更高级别的结构，例如：Chat和GroupChat类，这写能让你的程序效率更高。
    &lt;ul&gt;
      &lt;li&gt;你不需要熟悉XMPP  XML格式，甚至不熟XML。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提供简单的机器到机器的通讯。Smack允许你对每一条消息设置任何数字的属性，包括Java对象的属性。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Apache许可的开放源码，你可将其用于商业的和非商业的应用。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;xmpp&quot;&gt;关于XMPP&lt;/h2&gt;
&lt;p&gt;XMPP (eXtensible Messaging and Presence Protocol)是一个开放的，&lt;/p&gt;

&lt;p&gt;如何使用本文档
本文档假定你已经熟悉XMPP即时消息的主要特征。我们推荐你在阅读该文档时打开Javadoc API作为参考。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开始Smack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本文档将向你介绍Smack API，并大概介绍几个重要的类和概念。
必备的条件
你只需要有JDK 1.2或之后的版本1和已经内嵌在smack..jar文件中的XML分析器，不需要第三部分库。
1JDK 1.2 and 1.3的用户若想使用SSL连接必须在他的类路径下有JSSE库。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;建立一个连接&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;XMPPConnection类是为XMPP服务器建立连接的类。若要创建SSL连接，需使用SSLXMPPConnection类，以下是创建连接的例子。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Create a connection to the jabber.org server.
XMPPConnection conn1 = new XMPPConnection(&quot;jabber.org&quot;);
 
// Create a connection to the jabber.org server on a specific port.
XMPPConnection conn2 = new XMPPConnection(&quot;jabber.org&quot;, 5222);
 
// Create an SSL connection to jabber.org.
XMPPConnection connection = new SSLXMPPConnection(&quot;jabber.org&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果创建了一个连接，你应该使用&lt;code class=&quot;highlighter-rouge&quot;&gt;XMPPConnection.login(String username, String password)&lt;/code&gt;方法（参数为用户名和密码）进行登陆。一旦登陆成功，你就可以通过创建一个新的Chat 或GroupChat对象与其它用户聊天。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;working-with-the-roster&quot;&gt;使用花名册（Working with the Roster）&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;花名册让你很清楚的知道其它可用的用户。用户可以被分成像“朋友”、“合作者”这样的组，从而知道其它的用户在线还是离线。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以使用XMPPConnection.getRoster()方法检索花名册。你可以用花名册（roster）类查找花名册的所有条目，它们所属的组以及每个条目当前呈现的状态。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;读、写信息包（Reading and Writing Packets）&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;从客户端发送到XMPP的每一条消息称为一个信息包，并作为XML发送。The org.jivesoftware.smack.packet包含封装了三个XMPP允许的、不同的基本包类型(message, presence, and IQ)的类。像Chat和GroupChat这样的类提供更高级别的结构，它可以自动的创建和发送信息包，当然你也可以直接创建和发送信息包。以下代码是一个将你的当前状态改为“隐身“，从而不被别人看到的例子：&lt;/p&gt;

    &lt;p&gt;// Create a new presence. Pass in false to indicate we’re unavailable.
 Presence presence = new Presence(Presence.Type.UNAVAILABLE);
 presence.setStatus(“Gone fishing”);
 // Send the packet (assume we have a XMPPConnection instance called “con”).
 con.sendPacket(presence);&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Smack提供以下两种方法阅读收到的信息包：PacketListener和PacketCollector。它们都使用PacketFilter的实例来决定应该处理哪个信息包。信息包监听器（packet listener）用于事件类型的设计，而信息包收集器（packet collector）有一个信息包的结果队列，你可以对其实施polling和blocking操作。所以，信息包监听器在你收到任何一个信息包，且你想对其进行操作时是有用的，而信息包收集器在你想等待某个特殊的信息包时是有用的。信息包收集器和监听器可以通过XMPPConnection的实例来创建。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;messaging-basics&quot;&gt;Messaging Basics&lt;/h1&gt;
&lt;p&gt;## Messaging using Chat and GroupChat ##
互相发送消息是即时通讯的核心，以下是两个在收发消息是用的类：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;org.jivesoftware.smack.Chat – 用于两个人之间发送消息&lt;/li&gt;
  &lt;li&gt;org.jivesoftware.smack.GroupChat –用于加入聊天室，很多人之间相互发送消息。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Chat和GroupChat类都用org.jivesoftware.smack.packet .Message信息包类发送消息。在某些情况下，也许你希望绕过更高级别的Chat和GroupChat类直接发送和接受消息。
聊天（Chat）
聊天时在两个用户间创建了一个新的线程（使用一个线程ID）。以下程序片示例了如何如何与一个用户进行开始聊天并发送一段文本消息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Assume we&#39;ve created an XMPPConnection name &quot;connection&quot;.
Chat newChat = connection.createChat(&quot;jsmith@jivesoftware.com&quot;);
newChat.sendMessage(&quot;Howdy!&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Chat.sendMessage(String)方法可以很方便的创建一个消息对象，方法体使用字符串类型的参数，然后发送消息。如果想在发送消息前对消息设置额外的只，可以使用Chat.createMessage() and Chat.sendMessage(Message)方法，如下例所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Assume we&#39;ve created an XMPPConnection name &quot;connection&quot;.
Chat newChat = connection.createChat(&quot;jsmith@jivesoftware.com&quot;);
Message newMessage = newChat.createMessage();
newMessage.setBody(&quot;Howdy!&quot;);
message.setProperty(&quot;favoriteColor&quot;, &quot;red&quot;);
newChat.sendMessage(newMessage);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用Chat对象可以轻松的收听其它聊天者的回复。以下程序片是parrot-bot，它映射会其它用户类型的所有事情：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Assume we&#39;ve created an XMPPConnection name &quot;connection&quot;.
Chat newChat = connection.createChat(&quot;jsmith@jivesoftware.com&quot;);
newMessage.setBody(&quot;Hi, I&#39;m an annoying parrot-bot! Type something back to me.&quot;);
while (true) {
// Wait for the next message the user types to us.
Message message = newChat.nextMessage();
// Send back the same text the other user sent us.
newChat.sendMessage(message.getBody());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上代码使用Chat.nextMessage()方法获得下一条消息，它必需一直等待直到收到下一条消息。也有其它的方法可以等待特定的时间来接受下一条消息，或者你也可以增加一个监听器，它可以在每次收到消息时通知你。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;群聊（GroupChat）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;群聊在通过一个服务器连接到聊天室，你可以向一组人发送消息或接收他们的消息。在你能接收和发送消息前，你必须使用一个昵称登陆到聊天室。以下程序段可以连接到一个聊天室并发送消息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Assume we&#39;ve created an XMPPConnection name &quot;connection&quot;.
GroupChat newGroupChat = connection.createGroupChat(&quot;test@jivesoftware.com&quot;);
// Join the group chat using the nickname &quot;jsmith&quot;.
newGroupChat.join(&quot;jsmith&quot;);
// Send a message to all the other people in the chat room.
newGroupChat.sendMessage(&quot;Howdy!&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;群聊时收发消息和私聊时工作原理大体一致。同样，也有方法可以获得聊天室里其它用户的列表。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;roster-and--presence&quot;&gt;Roster and  Presence&lt;/h2&gt;
&lt;p&gt;花名册让你很清楚的知道其它可用的用户。用户可以被分成像“朋友”、“合作者”这样的组。其它的即使通讯系统将花名册作为好友列表、联系列表等。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   **当你成功登陆服务器后，可以使用XMPPConnection.getRoster()获得Roster类的实例。**
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;花名册条目（Roster Entries）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;花名册里的每一个用户都以一条花名册条目的形式呈现，包括以下几部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一个XMPP地址(例如：jsmith@example.com).&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分配给你的用户名 (例如： “Joe”).
该条目在花名册中所属组的列表。如果该条目不属于任何一个组，将被称为“尚未分类的条目。
以下程序段可以打印出花名册中的所有条目：&lt;/p&gt;

    &lt;p&gt;Roster roster = con.getRoster();
 for (Iterator i=roster.getEntries(); i.hasNext(); ) {
 System.out.println(i.next());
 }&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;也有获得个人条目、尚未分类条目的列表、一个或者所有组的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;呈现（Presence）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;花名册中的每一个条目都有相关的呈现方式。Roster.getPresence(String user)方法将通过用户的状态或当用户不在线或不同意将其在线状态显示出来时使用空对象（null）返回一个Presence对象。&lt;/p&gt;

&lt;p&gt;注意：一般情况下，用户是否同意显示其状态依赖于用户所在的花名册，但这不是在所有情况下都成立的。&lt;/p&gt;

&lt;p&gt;用户也有一个在线或离线的状态，如果用户在线，他们的显示信息中将会有一些扩展的信息，例如他当前正在做什么，是否希望被打扰等等，详细内容可以参看Presence类。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listening for Roster and Presence Changes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Roster类的典型用途是用树状形式显示组和每一个条目以及它的当前状态。如下图所示是 Exodus XMPP客户端的花名册。&lt;/p&gt;

&lt;p&gt;显示的信息很可能会经常改变，也有可能是花名册的条目被改变甚至被删除。为了监视花名册的改变和显示的信息，应该使用一个花名册监听器（RosterListener）。以下代码使用Roster（它可以打印出花名册中的任何变化）注册了一个RosterListener。标准的客户端应该使用相似的代码更新花名册的用户信息（roster UI）以正确显示变化的信息。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;final Roster roster = con.getRoster();
roster.addRosterListener(new RosterListener() {
public void rosterModified() {
// Ignore event for this example.
}
 
public void presenceChanged(String user) {
// If the presence is unavailable then &quot;null&quot; will be printed,
// which is fine for this example.
System.out.println(&quot;Presence changed: &quot; + roster.getPresence(user));
}
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;向花名册中添加条目（Adding Entries to the Roster）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;花名册和显示使用基于许可的模型，这要求用户在加入别人的花名册前必须得到允许。这样，确保只有被允许的人才可以看到自己所显示的信息，从而保护了用户的隐私。因此，在你想添加一个新的条目，且对方没有接受你的请求前，该条目将处于等待状态。&lt;/p&gt;

&lt;p&gt;如果另一个用户请求同意显示，从而你他们可以将你加入他们的花名册，你必须接受或拒绝请求。Smack通过以下三种方式之一操作同意显示请求：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;自动接受所有的同意显示请求。&lt;/li&gt;
  &lt;li&gt;自动拒绝所有的同意显示请求。&lt;/li&gt;
  &lt;li&gt;手动处理同意显示请求。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可以使用Roster.setSubscriptionMode(int subscriptionMode)方法设置模式。简单的客户通常使用一个自动接受或拒绝同意显示请求的模式，而用更多特征的用户应该使用手动处理同意显示请求的模式，并让终端用户接受或拒绝每一个请求。如果使用手动模式，应该声明一个信息包监听器（PacketListener）来监听有Presence.Type.SUBSCRIBE类型的显示信息包。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;处理收到的信息包(Processing Incoming Packets)&lt;/strong&gt;
Smack提供一个使用以下两个结构的灵活框架来处理收到的信息包：&lt;/p&gt;

&lt;p&gt;org.jivesoftware.smack.PacketCollector – 一个允许你同步的等待新的信息包的类&lt;/p&gt;

&lt;p&gt;org.jivesoftware.smack.PacketListener – 一个异步的通知你收到信息包的接口&lt;/p&gt;

&lt;p&gt;信息包监听器（packet listener）用于事件类型的设计，而信息包收集器（packet collector）有一个信息包的结果队列，你可以对其实施polling和blocking操作。所以，信息包监听器在你收到任何一个信息包，且你想对其进行操作时是有用的，而信息包收集器在你想等待某个特殊的信息包时是有用的。信息包收集器和监听器可以通过
XMPPConnection的实例来创建。&lt;/p&gt;

&lt;p&gt;由org.jivesoftware.smack.filter.PacketFilter接口来决定哪个特殊的信息包将被转交给信息包收集器（PacketCollector）或信息包监听器（PacketListener）。可以在org.jivesoftware.smack.filter包中找到许多预先定义的过滤器。
以下代码阐释了如何注册一个信息包收集器（packet collector）和信息包监听器（packet listener）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Create a packet filter to listen for new messages from a particular
// user. We use an AndFilter to combine two other filters.
PacketFilter filter = new AndFilter(new PacketTypeFilter(Message.class),
new FromContainsFilter(&quot;mary@jivesoftware.com&quot;));
// Assume we&#39;ve created an XMPPConnection name &quot;connection&quot;.
 
// First, register a packet collector using the filter we created.
PacketCollector myCollector = connection.createPacketCollector(filter);
// Normally, you&#39;d do something with the collector, like wait for new packets.
 
// Next, create a packet listener. We use an anonymous inner class for brevity.
PacketListener myListener = new PacketListener() {
public void processPacket(Packet packet) {
// Do something with the incoming packet here.
}
};
// Register the listener.
connection.addPacketListener(myListener, filter);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;标准信息包过滤器（Standard Packet Filters）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Smack包含一套丰富的信息包过滤器，你也可以通过信息包过滤器接口（PacketFilter interface）编写程序来创建自己的过滤器。缺省的过滤器集包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PacketTypeFilter – 某个特殊的类类型的信息包过滤器&lt;/li&gt;
  &lt;li&gt;PacketIDFilter – 拥有特殊的信息包ID（packet ID）的过滤器&lt;/li&gt;
  &lt;li&gt;ThreadFilter – 拥有特殊线程ID（thread ID）的信息包的过滤器&lt;/li&gt;
  &lt;li&gt;ToContainsFilter –发送到某个特殊地址的信息包的过滤器&lt;/li&gt;
  &lt;li&gt;FromContainsFilter –发送到某个特殊地址的信息包的过滤器&lt;/li&gt;
  &lt;li&gt;PacketExtensionFilter – 拥有特殊的信息包扩展的信息包的过滤器&lt;/li&gt;
  &lt;li&gt;AndFilter –对两个过滤器实施逻辑与操作的过滤器&lt;/li&gt;
  &lt;li&gt;OrFilter –对两个过滤器实施逻辑或操作的过滤器&lt;/li&gt;
  &lt;li&gt;NotFilter –对一个过滤器实施逻辑非操作的过滤器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Provider Architecture: Packet Extensions and Custom IQ’s
Smack提供的体系是堵塞自定义的XML信息包扩展和IQ包分析器的系统（The Smack provider architecture is a system for plugging in custom XML parsing of packet extensions and IQ packets）。标准的Smack扩展（Smack Extensions）是使用提供者的体系结构搭建的。存在以下两种类型的提供者：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;IQProvider –将IQ请求（ IQ requests）解析成Java对象（Java objects）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PacketExtension – 将附属在信息包上的XML子文档解析成信息包扩展实例（PacketExtension instances）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;IQProvider&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;默认情况下，Smack致知道如何处理只有类似以下几个名字空间的子信息包的IQ信息包（IQ packets）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jabber:iq:auth&lt;/li&gt;
  &lt;li&gt;jabber:iq:roster&lt;/li&gt;
  &lt;li&gt;jabber:iq:register&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为许多IQ类型是XMPP及其扩展部分的一部分，所以提供一个可插入的IQ分析机制。IQ Providers被程序自动的注册或通过创建在你的JAR 文件的META-INF目录下创建一个mack.providers文件。该文件是一个包含一个或多个iqProvider条目（iqProvider entries）的XML文档，如下例所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;smackProviders&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;iqProvider&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;elementName&amp;gt;&lt;/span&gt;query&lt;span class=&quot;nt&quot;&gt;&amp;lt;/elementName&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;namespace&amp;gt;&lt;/span&gt;jabber:iq:time&lt;span class=&quot;nt&quot;&gt;&amp;lt;/namespace&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;className&amp;gt;&lt;/span&gt;org.jivesoftware.smack.packet.Time&lt;span class=&quot;nt&quot;&gt;&amp;lt;/className&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/iqProvider&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/smackProviders&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每一个IQ provider都和一个元素名（element name）和名字空间（ namespace）相联系。在上面的例子中，元素名是query，名字空间是abber:iq:time。如果有多重提供者条目（multiple provider entries）尝试注册并控制相同的名字空间，那么从类路径（classpath）载入的第一个条目将有优先权。&lt;/p&gt;

&lt;p&gt;IQ provider类可以实现IQProvide接口，或者继承IQ类。在前面的例子中，每一个IQProvider负责解析原始的XML流从而创建一个IQ实例。在下面的例子中，bean introspection将被用于尝试自动使用在IQ packet XML中发现的值设置IQ实例的属性。一个XMPP时间信息包如下所示：
    &lt;iq type=&quot;result&quot; to=&quot;joe@example.com&quot; from=&quot;mary@example.com&quot; id=&quot;time_1&quot;&gt;
    &lt;query xmlns=&quot;jabber:iq:time&quot;&gt;
    &lt;utc&gt;20020910T17:58:35&lt;/utc&gt;
    &lt;tz&gt;MDT&lt;/tz&gt;
    &lt;display&gt;Tue Sep 10 12:58:35 2002&lt;/display&gt;
    &lt;/query&gt;
    &lt;/iq&gt;&lt;/p&gt;

&lt;p&gt;为了让这个信息包自动的映射成上面的providers file中所列的时间对象（Time object），它必须有以下几个方法：setUtc(String), setTz(String), 和 setDisplay(String)。自动检查（introspection）的服务将试着自动的将字符串值转化成a boolean, int, long, float, double,或 Class 类型。转化成何种类型由IQ实例的需要来决定。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PacketExtensionProvider&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;信息包插件提供者（Packet extension providers）为信息包提供一个可插入的系统，这些信息包是一个IQ, message和presence packets的自定义名字空间的子元素。每一个插件提供者（extension provider）使用一个元素名（element name）和名字空间（namespace）在smack.providers文件中注册，如下例所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;smackProviders&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;extensionProvider&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;elementName&amp;gt;&lt;/span&gt;x&lt;span class=&quot;nt&quot;&gt;&amp;lt;/elementName&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;namespace&amp;gt;&lt;/span&gt;jabber:iq:event&lt;span class=&quot;nt&quot;&gt;&amp;lt;/namespace&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;className&amp;gt;&lt;/span&gt;org.jivesoftware.smack.packet.MessageEvent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/className&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/extensionProvider&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/smackProviders&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果有多重提供者条目（multiple provider entries）尝试注册并控制相同的名字空间，那么从类路径（classpath）载入的第一个条目将有优先权。&lt;/p&gt;

&lt;p&gt;一旦在一个信息包中发现信息包插件，解析器将传递到正确的提供者。每一个提供者可以实现PacketExtensionProvider接口或者是一个标准的Java Bean。在前面的例子中，每一个插件提供者（extension provider）负责解析原始的XML流去构造一个实例。在下面的例子中，bean introspection将被用于尝试自动使用在信息包插件子元素（packet extension sub-element）中的值设置类的属性。&lt;/p&gt;

&lt;p&gt;当一个插件提供者（extension provider）没有用元素名（element name）和名字空间（namespace）对注册是，Smack将存储所有在缺省信息包插件（DefaultPacketExtension）对象中的最高级别元素（top-level elements），并匹配到信息包上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;信息包属性（Packet Properties）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Smack提供简单的机制来将任意的属性附加到信息包上。每一个属性有个字符串类型的名字和一个值，这个值或者是Java原始数据类型（int, long, float, double, boolean）的，或者是任何可序列化的对象（Serializable object）（当一个java对象实现了Serializable接口时，它就是可序列化的）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用API（Using the API）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所有主要对象都有属性支持，例如消息对象（Message objects）。以下代码阐释了如何设置属性：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Message message = chat.createMessage();
// Add a Color object as a property.
message.setProperty(&quot;favoriteColor&quot;, new Color(0, 0, 255));
// Add an int as a property.
message.setProperty(&quot;favoriteNumber&quot;, 4);
chat.sendMessage(message);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;获得这些相同的属性要用到以下的代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Message message = chat.nextMessage();
// Get a Color object property.
Color favoriteColor = (Color)message.getProperty(&quot;favoriteColor&quot;);
// Get an int property. Note that properties are always returned as
// Objects, so we must cast the value to an Integer, then convert
// it to an int.
int favoriteNumber = ((Integer)message.getProperty(&quot;favoriteNumber&quot;)).intValue();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;将对象作为属性（Objects as Properties）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;将对象作为属性值是改变数据的一个非常有力和简单的方法。但是，你应该记住以下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;信息包插件（Packet extensions）是向XMPP增加额外数据的更权威的方式。使用属性在某种情况下也许会比较方便，但是，Smack将会控制XML。&lt;/li&gt;
  &lt;li&gt;当你将Java对象（Java object）作为属性发送时，只有在客户机运行的Java能够解释数据。所以，可以考虑使用一系列的原始值来传递数据。&lt;/li&gt;
  &lt;li&gt;作为属性值发送的对象必须实现序列化接口（Serialiable）。&lt;/li&gt;
  &lt;li&gt;除此之外，发送者和接受者都必须由相同版本的类，否则在反序列化（de-serializing the object）对象时将发生序列化异常。&lt;/li&gt;
  &lt;li&gt;序列化的对象将会非常大，将会占用很多的服务器资源和带宽。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;XML格式（XML Format）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当前的用于发送属性的XML格式不是标准的，所以可能不会得到使用Smack的客户的认可。XML如下所示（为了更清晰添加了注释）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- All properties are in a x block. --&amp;gt;
&amp;lt;properties xmlns=&quot;http://www.jivesoftware.com/xmlns/xmpp/properties&quot;&amp;gt;
&amp;lt;!-- First, a property named &quot;prop1&quot; that&#39;s an integer. --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;prop1&amp;lt;/name&amp;gt;
&amp;lt;value type=&quot;integer&quot;&amp;gt;123&amp;lt;/value&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;!-- Next, a Java object that&#39;s been serialized and then converted
 from binary data to base-64 encoded text. --&amp;gt; 
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;blah2&amp;lt;/name&amp;gt;
&amp;lt;value type=&quot;java-object&quot;&amp;gt;adf612fna9nab&amp;lt;/value&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;/properties&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当前支持的数据类型有：integer, long, float, double, boolean, string, 和java-object。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用Smack调试（Debugging with Smack）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Smack包含两个内置的调试控制台，他们允许你在服务器和客户机建跟踪XML的踪迹。简单的调试器（lite debugger）是smack.jar的一部分，加强的调试器（enhanced debugger）包含在（smackx-debug.jar）中。&lt;/p&gt;

&lt;p&gt;可以用两种不同的方法激活调试模式：&lt;/p&gt;

&lt;p&gt;1．在创建连接前加入以下一行代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;XMPPConnection.DEBUG_ENABLED = true;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2．将Java的系统属性smack.debugEnabled设置为true。这一系统属性可通过下一命令行设置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -Dsmack.debugEnabled=true SomeApp 在你的应用程序中，如果你想明确的禁用调试模式，包括使用命令行参数，则在打开新的连接前在你的应用程序中添加以下一行代码：

XMPPConnection.DEBUG_ENABLED = false;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Smack使用一下的逻辑来决定使用哪个调制控制台：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;它将首先尝试使用Java系统属性smack.debuggerClass 所指定的调试类（debugger class）。如果你需要开发自己的调试器 I，可以实现SmackDebugger 接口然后使用下面的命令行设置系统属性：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -Dsmack.debuggerClass=my.company.com.MyDebugger SomeApp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;如果第一步失败了，Smack就会尝试使用增强的调试器（enhanced debugger）。 文件 smackx-debug.jar 包含，因此你要把jar文件放到类路径（classpath）下。如果空间确定你只是想要配置smack.jar文件，这种情况下增强的调试器（enhanced debugger）将不可用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后一种是前面两种都失败后使用简单的调试器（ite debugger）。在你的内存很小的时候，简单的调试器（ite debugger）是一个很好的选择。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;增强的调试器（enhanced debugger）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当调试模式可用时，将出现一个包含每一个创建的连接的标签调试窗口，该窗口包含以下信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;连接标签（Connection tabs） -每一个标签显示连接相关的调试信息&lt;/li&gt;
  &lt;li&gt;Smack信息标签（Smack info tab） -显示关于Smack的信息 (例如： Smack的版本（Smack version）, 安装的组件（installed components）,等等)。&lt;/li&gt;
  &lt;li&gt;连接标签包含以下信息:&lt;/li&gt;
  &lt;li&gt;所有的信息包（All Packets） -显示由Smack解析的发送和收到的信息包的信息。&lt;/li&gt;
  &lt;li&gt;未经处理的发送信息包（Raw Sent Packets） -未经处理的XML traffic（raw XML traffic）由Smack生成并发送至服务器 。&lt;/li&gt;
  &lt;li&gt;未经处理的接收信息包（Raw Received Packets） –未经处理的XML traffic（raw XML traffic）由服务器发送给客户机。&lt;/li&gt;
  &lt;li&gt;Ad-hoc 消息（Ad-hoc message） -允许发送各种类型的ad-hoc信息包（ad-hoc packets）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;信息—显示连接状态和统计信息。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;简单的调试器（Lite Debugger ）
当调试模式可用时，每创建一个连接将出现调试窗口，该窗口包含以下信息：&lt;/p&gt;

&lt;p&gt;客户端的流量（Client Traffic） (红色的文本) –未经处理的XML traffic（raw XML traffic）由Smack生成并发送至服务器 。&lt;/p&gt;

&lt;p&gt;服务器端的流量（Server Traffic）(蓝色的文本) –未经处理的XML traffic（raw XML traffic）由服务器发送给客户机。&lt;/p&gt;

&lt;p&gt;解释的信息包（Interpreted Packets）(绿色的文本) – 显示来自服务器的由Smack解析的XML信息包（XML packets）&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>AndroidPN消息推送</title>
   <link href="http://http://coolshell.info/blog/2014/10/androidDP-introduction.html"/>
   <updated>2014-10-30T00:00:00+00:00</updated>
   <id>/blog/2014/10/androidDP-introduction</id>
   <content type="html">&lt;p&gt;Androidpn是韩国Sehwan No写的开源消息推送项目，很多大公司都用这个消息推送方式构建自己的消息推送服务，缺点是导致客户端比较耗电。通信机制分别由客户端和服务器完成。&lt;/p&gt;

&lt;p&gt;客户端采用基于java的XMPP协议包asmack（该包依赖于openfire下的开源项目smack）。通过该协议包提供的XMPPConnetcion类与服务器建立持久连接，并通过该连接进行用户注册和登录认证，以及接受服务器消息。&lt;/p&gt;

&lt;p&gt;服务器是基于开源的openfire工程，采用java语言实现和Spring框架提供Web服务。主要有两个部分，一个是侦听在5222端口上的XMPP服务，负责与客户端的XMPPConnection类进行通信，作用是用户注册和身份认证，并推送消息。另外是Web服务器，采用一个轻量级的HTTP服务器，负责接收用户的Web请求。&lt;/p&gt;

&lt;p&gt;整个基于XMPP的通信中，服务器端和客户端的通信是基于一个session（会话）过程，会话开始，首先客户端会指定端口号，然后把准备的连接信息发送到服务器端，客户端通过XMPP协议做的只有接收消息，其他的管理连接和保存消息等都由服务器负责。消息的传递是以根节点&lt;stream&gt;为起始，以&lt;/stream&gt;为结束。&lt;/p&gt;

&lt;p&gt;服务器和客户端建立Tcp连接过程如下。首先，建立会话协商，Client 准备connecting to server (127.0.0.1:5222)。其次，服务器询问Client所支持的安全认证。再者，Client发送给服务器要注册的用户。然后，Client根据服务器的要求提交用户信息。最后，Client关闭注册的STREAM元素。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section&quot;&gt;客户端&lt;/h1&gt;
&lt;p&gt;Client这边包含有消息的收发，解析以及持久连接的发起，重连等功能呢，十分强大，我们开发时完全不用管底层的连接，也不用担心断线，可以专注于业务部分的开发。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;控制器&lt;/h2&gt;
&lt;p&gt;XmppManager是Client的主控制器，主要用来管理连接信息，包括XMPP端口、IP地址、登录的用户名和密码，以及对连接的维护。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;消息解析处理&lt;/h2&gt;
&lt;p&gt;NotificationIQ、NotificationPackerListener以及NotificationIQProvider三个类负责对收到的Notification格式的消息进行解析和处理。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;手机状态监听&lt;/h2&gt;
&lt;p&gt;PersistentConnetcionListener、PhoneStateChangeListener以及ReconnectionThread三个类负责监听手机状态和断线重连。&lt;/p&gt;

&lt;p&gt;同时，代码结构也很简单。去除android的Service和BroadCast类以及一些工具类和常量类不谈：&lt;/p&gt;

&lt;p&gt;1.NotificationIQ,NotificationIQProvider,NotificationPacketListener三个类负责对收到的Notification格式的消息进行解析和处理，&lt;/p&gt;

&lt;p&gt;2.XmppManager是主控制器，NotificationService通过这个类，在后台维护androidpn连接。&lt;/p&gt;

&lt;p&gt;3.PersistentConnectionListener，PhoneStateChangeListener，ReconnectionThread.java三个类则负责监听手机的状态并进行断线重连。&lt;/p&gt;

&lt;p&gt;我们自定义消息时需要定义3个类：在NotificationIQ中定义消息的实体，在NotificationIQProvider中将消息转化为NotificationIQ实体，在NotificationPacketListener中对实体进行处理，具体的实现可参考NotificationIQ,NotificationIQProvider,NotificationPacketListener三个类。在定义这些类之后，还需要在XmppManager中将这3个类中注册到connection中，代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;connection.connect();
Log.i(LOGTAG, &quot;XMPP connected successfully&quot;);
// packet provider
ProviderManager.getInstance().addIQProvider(&quot;message&quot;,
Constants.NOTIFICATION_NAMESPACE,
new NotificationIQProvider());
//packet filter
PacketFilter packetFilter = new PacketTypeFilter(
NotificationIQ.class);
// packet listener
PacketListener packetListener = xmppManager.getNotificationPacketListener();
connection.addPacketListener(packetListener, packetFilter);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;需要注意的是，注册NotificationIQProvider时，传入的namespace需要和服务端组装消息时使用的namespace一致，才能正确的收到。
## 注册 ##&lt;/p&gt;

&lt;p&gt;Client在与服务器建立connection后，首先会提交注册任务，在Androidpn项目中，用户注册是采用UUID（通用唯一标识码）来实现的，其每次登录都会利用这个UUID.randomUUID()来产生一个用户名和密码，而且不会重复。&lt;/p&gt;

&lt;p&gt;注册方法根据Server的格式要求组装注册消息，发送到服务器，同时使用在connection中添加监听，来获取服务器返回的消息packet。Client会根据消息的类型来判断是否注册成功。&lt;/p&gt;

&lt;p&gt;服务端收到Client的注册请求，会通过路由类router来转发到相应的Handler处理，router首先会读取Client发来包Packet的Namespace部分，根据XMPP RFC协议注册packet的namespace为jabber:iq:register，授权packet的namespace为jabber:iq:auth，由此转发到IQRegisterHandler处理注册请求。&lt;/p&gt;

&lt;p&gt;如果注册成功，Client会把相应的用户名、密码通过SharePerence保存在Client的共享文件AndroidpnClient中。此外，AndroidpnClient还保存了当前应用的包名、类名、服务器地址、端口、客户端版本、设备ID等。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;登录&lt;/h2&gt;

&lt;p&gt;Client的登录是在注册之后进行的，在Client的XmppManager类中，建立连接的时候首先会提交登录任务，然而在提交登录任务的时候都有一个submitRegisterTask()方法，可知，每次登录都会首先提交一个注册任务。&lt;/p&gt;

&lt;p&gt;登录的时候，要先通过isAuthenticated()方法判断是否授权，授权处理同样会通过connection发送到服务端，服务端会根据packet的namespace部分进行解析，然后路由类router会根据namespace转发到IQAuthHandler处理。&lt;/p&gt;

&lt;p&gt;Client收到服务端返回的消息packet，会使用connection的监听器异步接收消息，并通过XmppManager的context的sendBroadcast(Intentintent)以广播发送出去。&lt;/p&gt;

&lt;p&gt;基于tomcat的项目源码&lt;a href=&quot;http://pan.baidu.com/s/1kTDUQWJ&quot;&gt;http://pan.baidu.com/s/1kTDUQWJ&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section-5&quot;&gt;服务器&lt;/h1&gt;

&lt;p&gt;服务端架构依赖spring、mina框架，spring完成java Ben管理，mina完成网络通信。另外，服务端还通过jetty潜入了Admin Console Web界面功能。对于spring的依赖导致要把androidpn-server整合潜入项目中时，要考虑和自己项目本身spring环境的整合问题，可能要改造androidpn-server源代码，具体要看项目中spring的环境。对于mina的依赖不存在这个问题，因为mina是类库型框架，而spring是容器型框架。androidpn-server对jetty的使用不是可选的，而是和jetty绑定的，所以要不使用jetty就必须对androidpn-server的源代码进行改造。&lt;/p&gt;

&lt;p&gt;另外，对数据的存储使用hibernate框架，androidpn-server在使用hibernate时配置通过ehcache实现二级缓存。官方默认使用的数据库是HSQLDB数据库，你可以改用其他数据库。HSQLDB是用java语言实现的数据库，对其使用请自己学习。Androidpn-server通过In-Process模式（作为应用程序的一部分潜入应用程序）使用HSQLDB的。&lt;/p&gt;

&lt;p&gt;服务器主要由以下几个包组成：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;org.androidpn.server.xmpp异常类型定义，包含程序入口类XmppServer。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;org.androidpn.server.util加载配置文件，获取主机和端口等信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;org.androidpn.server.xmpp.codec是XMPP协议的XML文件解析包，server&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;收到和发送的消息都要通过这个包来进行xmpp协议编码和解码。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;org.androidpn.server.xmpp.handler负责对不同类型的消息进行处理&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;org.androidpn.server.xmpp.net负责维护与client之间的持久连接，并实现了一些传输方式供发送xmpp消息时使用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;org.androidpn.server.xmpp.ssl是对连接进行ssl认证的工具包。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;org.androidpn.server.xmpp.router包负责将收到的信息包发送到相应的handler进行处理，是一个路由包。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;org.androidpn.server.xmpp.presence里面只包含PresenceManager类，用来维护client的在线状态。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;org.androidpn.server.xmpp.push包里面的NotificationManager类包含有向client发送消息的接口。&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;服务器中使用ServerStarter类启动服务，服务启动后使用XmppServer来管理连接、加载配置等。&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;服务器接收处理消息流程&lt;/p&gt;

&lt;p&gt;① connection接收到来着Client的packet，使用包codec解码。&lt;/p&gt;

&lt;p&gt;② 路由包router根据packet的namespace等信息，将packet路由到相应的Handler。&lt;/p&gt;

&lt;p&gt;③ Handler开始处理。&lt;/p&gt;

&lt;p&gt;开发中只要根据client发送消息的格式，定义自己的router和handler类，然后在PacketRouter中注册router，在IQRouter中注册handler即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;服务器发送消息的流程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;① 使用NotificationManager接口的push方法。&lt;/p&gt;

&lt;p&gt;② 使用SessionManager在Session集合查找相应的client连接。&lt;/p&gt;

&lt;p&gt;③ 定义和组装XMPP消息，通过session向client发送。&lt;/p&gt;

&lt;p&gt;在这个流程中我们需要修改的是步骤3，也就是需要定义和组装自己的xmpp消息，以便于将适当的信息传到客户端并便于客户端解析。一个简单的消息组装例子如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private IQ  createMessageIQ(String title, String message, String userId,String json) {
Element notification =  DocumentHelper.createElement(QName.get(
&quot;message&quot;,  INQURIE_NAMESPACE));
notification.addElement(&quot;title&quot;).setText(title);
notification.addElement(&quot;text&quot;).setText(message);
notification.addElement(&quot;userId&quot;).setText(userId);
notification.addElement(&quot;json&quot;).setText(json);
IQ iq = new IQ();
iq.setType(IQ.Type.set);
iq.setChildElement(notification);
return iq;
} 要注意的是在创建element的时候，传入的namespace要和client解析使用的namespace相匹配。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;独立部署使用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;独立部署使用不需要对androidpn-server源代码进行任何改造，目录结构见上图，只需要修改好配置文件即可，配置文件在conf文件夹下，下面对需要注意的配置项进行说明，其他配置项目使用默认配置就可。&lt;/p&gt;

&lt;p&gt;对于config.properties的配置说明如下：&lt;/p&gt;

&lt;p&gt;apiKey=1234567890 #暂时发现没什么用处&lt;/p&gt;

&lt;p&gt;admin.console.host=127.0.0.1 #web管理控制界面jetty服务监听的地址&lt;/p&gt;

&lt;p&gt;admin.console.port=7070 #web管理控制界面jetty服务监听的端口&lt;/p&gt;

&lt;p&gt;对于spring-config.xml的配置说明：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;bean id=&quot;ioAcceptor&quot; class=&quot;org.apache.mina.transport.socket.nio.NioSocketAcceptor&quot;init-method=&quot;bind&quot; destroy-method=&quot;unbind&quot;&amp;gt;

&amp;lt;property name=&quot;defaultLocalAddress&quot; value=&quot;:5222&quot; /&amp;gt; &amp;lt;!--mina Socekt服务端监听端口，客户端配置和此配置一致--&amp;gt;

&amp;lt;property name=&quot;handler&quot; ref=&quot;xmppHandler&quot; /&amp;gt;

&amp;lt;property name=&quot;filterChainBuilder&quot; ref=&quot;filterChainBuilder&quot; /&amp;gt;

&amp;lt;property name=&quot;reuseAddress&quot; value=&quot;true&quot; /&amp;gt;

&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;启动脚本在bin下，windowns和linux的脚本都有，需要配置系统环境变量JAVA_HOME，或者修改启动脚本将JAVA_HOME指定为你本机的具体地址，运行run脚本androidpn启动成功，通过浏览器访问http://127.0.0.1:7070/就可看到console界面。&lt;/p&gt;

&lt;p&gt;其他项目通过http方式将需要发送的消息提交给androidpn-server服务，由androidpn-server完成客户端消息推送。&lt;/p&gt;

&lt;p&gt;具体应用可以通过程序代码编写方式访问http://192.168.1.24:7070/notification.do地址，将需要的参数以post方式提交。&lt;/p&gt;

&lt;p&gt;嵌入项目使用
若要将androidpn作为应用程序的一部分潜入项目中使用，需要对androidpn-server源代码进行改造。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;情况一：若你的项目中没有用到spring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这种情况不用考虑androidpn的spring和你项目中spring配置的融合问题，直接因为spring就可以了，配置文件使用androidpn默认配置文件名称spring-config.xml。配置文件都放在classpath下。&lt;/p&gt;

&lt;p&gt;需要在config.properties配置文件中增加配置server.home.dir选项，值指向一个目录，如：server.home.dir=F:\android\download\androidpn-server-0.5.0，该目录下要有子目录conf\security，目录下要放两个文件keystore和truststore，用来进行SSL安全传输用的密钥和证书，利用androdpn-server自带的就可以。&lt;/p&gt;

&lt;p&gt;接下来就是修改org.androidpn.server.xmpp. XmppServer类，将启动admin console的代码注释掉，如下截图红框框住的部分。如果你需要启动admin console的话，需要将原始androidpn中console文件夹放到合适的路径下，这个还没有试。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Androidpn-server主启动类&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;org.androidpn.server.xmpp.XmppServer修改完后，你就可以在你的应用程序这样调用：&lt;/p&gt;

&lt;p&gt;XmppServerserver = XmppServer.getInstance();&lt;/p&gt;

&lt;p&gt;这样XmppServer通过加载spring启动了mina监听服务，这时手机客户端应用已经可以连接服务端了。&lt;/p&gt;

&lt;p&gt;你的应用程序需要推送消息时，实例化&lt;/p&gt;

&lt;p&gt;org.androidpn.server.xmpp.push.NotificationManager，调用其提供的sendBroadcast和sendNotifcationToUser方法，如下代码调用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NotificationManager notificationManager = new NotificationManager();
notificationManager.sendBroadcast(&quot;1234567890&quot;, &quot;Hello&quot;,&quot;Hello BalanceJia!&quot;, &quot;uri&quot;);
或
notificationManager.sendNotifcationToUser(apiKey,username, title, message, uri);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;情况二：若你的项目中用到spring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;和你的项目中spring配置融合，需要注意spring容器不能重复启动的问题。所以要将androidpn-server的spring配置增加到你的spring配置中，需要修改XmppServer启动spring的地方，另外androidpn-server spring中配置的ben名字和你项目中的本名字不能重复，因为androidpn-server中用到的ben  id有：dataSource、dataSource、transactionManager、userDao、userService。还有数据源冲突的问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;情况三：基于tomcat部署&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.依据ServerStart类写一个servlet，在servlet中启动时创建XmppServer实例。然后在web.xml中配置为自启动。&lt;/p&gt;

&lt;p&gt;2.将androidpn自带的配置目录conf拷贝到WEB-INF下面，并且把spring-config.xml文件从conf目录移动到WEB-INF目录。&lt;/p&gt;

&lt;p&gt;3.修改默认的spring-config.xml文件，在文件schema的头部&lt;beans&gt;下面加入如下内容&lt;import resource=&quot;applicationContext.xml&quot;&gt;&lt;/import&gt;，其中，加载顺序会默认先加载applicationContext文件，然后会加载spring-config文件后面的内容。&lt;/beans&gt;&lt;/p&gt;

&lt;p&gt;原因是spring-config文件中有个&amp;lt;bean id=”xmppHandler” …/&amp;gt;组件会在web服务启动的时候加载，该组件也会初始化XmppServer，导致与servlet的加载发生冲突。&lt;/p&gt;

&lt;p&gt;由于未使用使用hibernate-cfg.xml文件，需要在spring-config文件加入如下内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;bean id=&quot;sessionFactory&quot;
   class=&quot;org.springframework.orm.hibernate3.LocalSessionFactoryBean&quot;&amp;gt;
   &amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&amp;gt;
   &amp;lt;property name=&quot;mappingResources&quot; &amp;gt;
  &amp;lt;list&amp;gt;
&amp;lt;value&amp;gt;org/androidpn/server/model/User.hbm.xml&amp;lt;/value&amp;gt;
  &amp;lt;/list&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property name=&quot;hibernateProperties&quot;&amp;gt;
   &amp;lt;props&amp;gt;
 &amp;lt;prop key=&quot;hibernate.dialect&quot;&amp;gt;
  org.hibernate.dialect.SQLServerDialect
 &amp;lt;/prop&amp;gt;
 &amp;lt;prop key=&quot;hibernate.show_sql&quot;&amp;gt;true&amp;lt;/prop&amp;gt;
 &amp;lt;prop key=&quot;hibernate.hbm2ddl.auto&quot;&amp;gt;update&amp;lt;/prop&amp;gt;
  &amp;lt;/props&amp;gt;
 &amp;lt;/property&amp;gt;
 &amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在spring-config.xml文件中，配置组件&lt;bean: id=&quot;ioAcceptor&quot;&gt;的listenrPort属性&lt;/bean:&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;bean id=&quot;listenrPort&quot; class=&quot;java.net.InetSocketAddress&quot;&amp;gt;
 &amp;lt;constructor-arg value=&quot;localhost&quot;/&amp;gt;
 &amp;lt;constructor-arg value=&quot;5222&quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此外，Androidpn默认采用spring-mvc方式配置，所以需要修改action指向。修改org.androidpn.server.console.controller包下面的三个类，改为继承自struct2的ActionSupport方式，并修改默认的调用方法，然后配置struct.xml文件。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>XMPP协议分析-原理</title>
   <link href="http://http://coolshell.info/blog/2014/10/xmpp.html"/>
   <updated>2014-10-28T00:00:00+00:00</updated>
   <id>/blog/2014/10/xmpp</id>
   <content type="html">&lt;h1 id=&quot;xmpp&quot;&gt;XMPP协议简介&lt;/h1&gt;

&lt;p&gt;XMPP协议（Extensible Messaging and PresenceProtocol，可扩展消息处理现场协议）是一种基于XML的协议，目的是为了解决及时通信标准而提出来的，最早是在Jabber上实现的。它继承了在XML环境中灵活的发展性。因此，基于XMPP的应用具有超强的可扩展性。并且XML很易穿过防火墙，所以用XMPP构建的应用不易受到防火墙的阻碍。利用XMPP作为通用的传输机制，不同组织内的不同应用都可以进行有效的通信。&lt;/p&gt;

&lt;h2 id=&quot;xmpp-1&quot;&gt;XMPP协议特点&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;所有XMPP信息都是以XML为基础的，信息交换的事实标准，扩展性强&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;XMPP系统是一个分布式系统，每台服务器控制自己的资源，但是如果需要，它能与外在的系统进行通信。XMPP服务器利用开放的XML协议来进行S2S(Serverto Server)通信，就像在C2S(Client to Server)一样。相比之下，大多数的IM系统使用了只是支持C2S/S2C通信的协议，因此Jabber/XMPP服务器具有更大的灵活性。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;XMPP协议是公开的，程序则开放源代码。定义了客户端和服务器端的交互要经由XML流。普通消息类型（message），如改变状态(presence)，传递消息内容或查询/更新(info/quey)应用则用每个指定的命名空间(namespace)来建立。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;状态(Presence)在整个持久连接中。通过持久连接的有效维持，XMPP协议一直有在网络中维持存在和可用信息的能力。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;XMPP允许建立并行的TCP套接字连接对所有连接上的客户端和服务器端。一旦建立连接，则只有当状态改变，例如存在的改变，通过这个连接传输数据。既然这个连接是持久的，那么设置、认证、状态查找功能都不用每次都重复执行。这种持久的套接字的连接使得XMPP能够更有效的支持高级的具有存在能力的应用在带宽和处理资源的使用中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jabber/XMPP系统是模块化的，而且Jabber/XMPP的设计强调如何实现可伸缩性、安全性和可扩展性。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;xmpp-2&quot;&gt;XMPP协议分析&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   XMPP中定义了三个角色：客户端，服务器，网关。 通信能够在这三者的任意两个之间双向发生。服务器同时承担了客户端信息记录，连接管理和信息的路由功能。网关承担着与异构即时通信系统的互联互通，异构系统可以包括SMS （短信），MSN，ICQ等。基本的网络形式是单客户端通过TCP/IP连接到单服务器，然后在之上传输XML。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;XMPP的基本网络结构如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C1----S1---S2---C3
|
C2----+--G1===FN1===FC1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;符号表示：C1,C2,C3=XMPP客户端；S1,S2=XMPP；服务端G1=在XMPP和使用外部消息网络（非XMPP）的协议之间转换的网；FN1=外部消息网络；FC1=外部消息网络的客户端。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（1）服务器&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;服务系统是XMPP通信的智能提取层，它主要负责：管理来自其他个体的会话连接或者XML流（streams）和来自客户端、服务器、其他个体的认证发送在XML流实体之中的适当的XML地址节点。大多数XMPP服务都允许存储一些客户端数据（比如联系人列表），在这种情况下，服务直接面向这个客户端处理XML数据，而不是其他个体。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2）客户端&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;大多数客户端是通过TCP直接连接，并且使用XMPP获得服务器提供全部-12-第2章Jabber协议原理及其应用功能和其他服务。许多资源通过认证的客户端也许同时连接到服务器，定义在XMPP地址的每个资源是不同的（比如&lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#110;&amp;#111;&amp;#100;&amp;#101;&amp;#064;&amp;#100;&amp;#111;&amp;#109;&amp;#097;&amp;#105;&amp;#110;&amp;#047;&amp;#104;&amp;#111;&amp;#109;&amp;#101;&amp;#062;和&amp;#060;&amp;#110;&amp;#111;&amp;#100;&amp;#101;&amp;#064;&amp;#100;&amp;#111;&amp;#109;&amp;#097;&amp;#105;&amp;#110;&amp;#047;&amp;#119;&amp;#111;&amp;#114;&amp;#107;&quot;&gt;node@domain/home&amp;gt;和&amp;lt;node@domain/work&lt;/a&gt;）建议服务器和客户端采用的端中是5222。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（3）网关&lt;/strong&gt;
它的主要功能是将XMPP协议转换成外部消息(non-XMPP)系统使用的协议,也将返回的数据转换成XMPP。这些通信是基于网关和服务器，基于网关和外部消息系统之间的。&lt;/p&gt;

&lt;h2 id=&quot;xmpp-3&quot;&gt;XMPP消息格式&lt;/h2&gt;

&lt;p&gt;Jabber/XMPP系统使用XML流在不同实体之间相互传输数据。在两个实体的连接期间，XML流将从一个实体传送到另一个实体。在实体间，有三个顶层的XML元素:&lt;message&gt;&lt;/message&gt;，&lt;presence&gt;&lt;/presence&gt;和&lt;iq&gt;&lt;/iq&gt;。每一个都包含属性和子节点。下面将分别描述这些元素。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)消息(message)元素：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一个即时消息系统最基本的功能就是能够在两个用户之间实时交换消息，&lt;message&gt;&lt;/message&gt;元素就提供了这个功能。每条消息都有一个或多个属性和子元素。属性“from”和“to”分别表示了消息发送者和接收者的地址。&lt;message&gt;&lt;/message&gt;也可以包含一个“type”属性，这给接收者一个提示，这个消息是什么样的消息。表3-1给出了“type”属性的可能取值。&lt;message&gt;&lt;/message&gt;中也可以包含“id”属性，用来唯一的标识一个输出消息的响应。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)状态(presence)元素:&lt;/strong&gt;&lt;/p&gt;

&lt;presence /&gt;
&lt;p&gt;元素用来传递一个用户的存在状态的感知信息。用户可以是“available”，要么是“unavailable”，“Hide”等。当用户连接到即时消息服务器后，好友发给他的消息就立即被传递。如果用户没有连接到服务器，好友发给他的消息将被服务器存储起来直到用户连接到服务器。用户通过即时消息客户端自己控制可用性。但是，如果用户断开了同服务器的连接，服务器将发送给订阅了这个用户的存在信息的用户通知他们用户已经不可用。&lt;presence&gt;&lt;/presence&gt;还包含了两个子元素：&lt;show&gt;&lt;/show&gt;和&lt;status&gt;&lt;/status&gt;。&lt;status&gt;包含了一个对&lt;show&gt;&lt;/show&gt;的文本描述。&lt;/status&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3)IQ(Info&amp;lt;Query)元素&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IQ元素是Jabber/XMPP消息协议的第三个顶层元素。IQ代表”Info/Query”，用来发送和获取实体之间的信息。IQ消息是通过“请求/响应”机制在实体间进行交换的。IQ元素用于不同的目的，它们之间通过不同的命名空间来加以区分。在Jabber/XMPP消息协议里有许多的命名空间，但最常用的命名空间是：”jabber:iq:register”,”jabber:iq:auth”,”jabber:iq:roster”。&lt;/p&gt;

&lt;p&gt;上面描述了Jabber协议的三个顶层节点。通过这种格式Jabber消息不仅可以是简单的文本（text），而且可以携带复杂的数据和各种格式的文件，也就是说Jabber不仅可以用在人与人之间的交流，而且可以实现软件与软件或软件与人之间的交流。Jabber的这种功能大大扩展了即时通信的应用范围。&lt;/p&gt;

&lt;h2 id=&quot;xmpp-4&quot;&gt;XMPP工作机制&lt;/h2&gt;

&lt;p&gt;例如:一个终端名字是Remeo，通过服务器montague.lit与其他的用户相连，其他的用户通过服务器juliet@capulet.lit建立连接。&lt;/p&gt;

&lt;p&gt;第一步Romeo开始通过发送一个stream包与服务器montague.lit取得联系，这一步包含了鉴权，登录等等。&lt;/p&gt;

&lt;p&gt;第二步Romeo获取了他的联系人列表，通过向服务器montague.lit发送&lt;iq&gt;&lt;/iq&gt;字段请求，按照下面的协议。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;iq type=‘get’from=‘romeo@montague.lit/pda’&amp;gt;
&amp;lt;query xmlns=‘jabber:iq:roster’/&amp;gt;
&amp;lt;/iq&amp;gt;

&amp;lt;iq type=‘result’to=‘romeo@montague.lit/pda’&amp;gt;
&amp;lt;query xmlns=‘jabber:iq:roster’&amp;gt;
&amp;lt;item jid=‘juliet@capulet.lit’/&amp;gt;&amp;lt;item jid=‘mercutio@shakespeare.lit’/&amp;gt;
&amp;lt;item jid=‘benvolio@shakespeare.lit’/&amp;gt;
&amp;lt;/query&amp;gt;
&amp;lt;/iq&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第三步Romeo发送了一个presence请求到服务器montague.lit，然后会将这个信息广播到他的所有好友。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;presence from=‘romeo@montague.lit/pda’/&amp;gt;
&amp;lt;presence from=‘romeo@montague.lit/pda’to=‘juliet@capulet.lit’/&amp;gt;
&amp;lt;presence from=‘romeo@montague.lit/pda’to=‘mercutio@shakespeare.lit’
/&amp;gt;
&amp;lt;presence from=‘romeo@montague.lit/pda’to=‘benvolio@shakespeare.lit’
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第四步如果Romeo的联系人都在线，就会将presence回复给Romeo，告知自己的状态。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;presence to=‘romeo@montague.lit/pda’from=‘juliet@capulet.lit/balcony’/&amp;gt;
&amp;lt;presence to=‘romeo@montague.lit/pda’from=‘juliet@capulet.lit/chamber’/&amp;gt;
&amp;lt;presence to=‘romeo@montague.lit/pda’from=‘mercutio@shakespeare.lit/home’/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第五步Romeo和Juliet开始交换信息，进行聊天。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;message from=‘romeo@montague.lit/pda’to=‘juliet@capulet.lit’&amp;gt;
&amp;lt;body&amp;gt;hi!&amp;lt;/body&amp;gt;
&amp;lt;/message&amp;gt;

&amp;lt;message from=‘juliet@capulet.lit/balcony’to=‘romeo@montague.lit/pda’
  	&amp;gt; 
&amp;lt;body&amp;gt;hi yourself!&amp;lt;/body&amp;gt;
&amp;lt;/message&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以文档的观点来看，客户端或服务器发送的所有XML文本连缀在一起，从&lt;stream&gt;到&lt;/stream&gt;构成了一个完整的XML文档。其中的stream标签就是所谓的XML Stream。在&lt;stream&gt;与&lt;/stream&gt;中间的那些&lt;message&gt;...&lt;/message&gt;这样的XML元素就是所谓的XML Stanza（XML节）。XMPP核心协议通信的基本模式就是先建立一个stream，然后协商一堆安全之类的东西，中间通信过程就是客户端发送XML Stanza，一个接一个的。服务器根据客户端发送的信息以及程序的逻辑，发送XML Stanza给客户端。但是这个过程并不是一问一答的，任何时候都有可能从一个方发信给另外一方。通信的最后阶段是&amp;lt;/stream&amp;gt;关闭流，关闭TCP/IP连接。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/openfire/xmpp1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>使用Jfreechart生成曲线显示到JSP中</title>
   <link href="http://http://coolshell.info/blog/2014/10/jsp-jfreechart.html"/>
   <updated>2014-10-22T00:00:00+00:00</updated>
   <id>/blog/2014/10/jsp-jfreechart</id>
   <content type="html">&lt;p&gt;项目中需要弄一个服务器，从数据库中读取数据，然后根据http请求显示制定的数据在曲线中，这里用到一个曲线库，&lt;a href=&quot;http://www.jfree.org/jfreechart/&quot;&gt;Jfreechart&lt;/a&gt;，用java写的，用来生成柱状图，饼状图，时间序列等。
整个流程如下：
&lt;img src=&quot;/images/images/chart.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;jsp代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%@ page contentType=&quot;text/html;charset=UTF-8&quot;%&amp;gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%@ page import=&quot;java.awt.*,
java.util.List,
javax.swing.JPanel,
org.jfree.chart.ChartFactory,
org.jfree.chart.ChartPanel,
org.jfree.chart.JFreeChart,
org.jfree.chart.axis.DateAxis,
org.jfree.chart.plot.XYPlot,
org.jfree.chart.renderer.xy.XYItemRenderer,
org.jfree.chart.renderer.xy.XYLineAndShapeRenderer,
org.jfree.data.time.*,
org.jfree.data.time.TimeSeries,
org.jfree.data.time.TimeSeriesCollection,
org.jfree.data.xy.XYDataset&quot;%&amp;gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%@ page import=&quot;org.jfree.chart.ChartUtilities&quot;%&amp;gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%@ page import=&quot;java.util.*&quot;%&amp;gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%@ page import = &quot;com.lippi.medic.server.*&quot;%&amp;gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%@ page import = &quot;java.io.*&quot; %&amp;gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;align=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;font&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;font-size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;black&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;欢迎访问肌电信号数据库&lt;span class=&quot;nt&quot;&gt;&amp;lt;/font&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%
 //创建时序图对象
 TimeSeries timeSeries = new TimeSeries(&quot;肌电信号&quot;);
 //这里的logs是从servlet中设置的request属性值
 List&lt;span class=&quot;nt&quot;&gt;&amp;lt;MedicLogs&amp;gt;&lt;/span&gt; logs = (List)request.getAttribute(&quot;logs&quot;);
 Iterator&lt;span class=&quot;nt&quot;&gt;&amp;lt;MedicLogs&amp;gt;&lt;/span&gt; iterator = logs.iterator();
 		while(iterator.hasNext()){
 			MedicLogs log = iterator.next();
 			Minute minute = new Minute(log.getCreateDate());
 			double data = log.getData();
 			timeSeries.add(minute, data);
 		}
 TimeSeriesCollection collection = new TimeSeriesCollection();
 collection.addSeries(timeSeries);
 collection.setDomainIsPointsInTime(true);

 JFreeChart chart = ChartFactory.createTimeSeriesChart(&quot;肌电信号&quot;,&quot;时间&quot;,
                        &quot;幅值&quot;, collection,true,true,false);
 chart.setBackgroundPaint(Color.white);//设置曲线图背景色
 XYPlot plot = (XYPlot) chart.getPlot();
 XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer)plot.getRenderer();
 plot.setBackgroundPaint(Color.white);//设置网格背景颜色
 plot.setDomainGridlinePaint(Color.pink);//设置网格竖线颜色
 plot.setRangeGridlinePaint(Color.pink);//设置网格横线颜色
 renderer.setBaseShapesVisible(true);//设置曲线是否显示数据点
 final File file = new File(&quot;/home/lippi/apache-tomcat-8.0.11/webapps/medicdatabase/chart.png&quot;);
 ChartUtilities.saveChartAsPNG(file, chart, 500, 300);
 %&amp;gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;align=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;IMG&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;SRC=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;chart.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;WIDTH=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;600&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HEIGHT=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;400&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;BORDER=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;USEMAP=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#chart&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;display.do&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;back&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;载入前5000条数据&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;forward&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;载入后5000条数据&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;附上Jsp代码的转换和编译过程：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;客户第一次请求这个jsp，容器尝试将jsp页面转换成一个servlet类的java代码&lt;/li&gt;
  &lt;li&gt;容器把java源文件编译成.class文件&lt;/li&gt;
  &lt;li&gt;web容器加载新生成的servlet类&lt;/li&gt;
  &lt;li&gt;容器实例化servlet，并调用servlet的jspInit()方法,此时对象成为一个完整的servlet&lt;/li&gt;
  &lt;li&gt;容器创建一个新线程来处理客户的请求，servlet的_jspService()方法运行&lt;/li&gt;
  &lt;li&gt;最终servlet向客户发回一个响应，或者把请求转发到另一个web应用组件，比如这个例子中的jsp。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;编译这个jsp代码需要用到两个jar文件，jfreechart-1.0.18.jar和jcommon-1.0.22.jar，把他们放到WEB-INF的lib文件夹下。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>当我们打开网页时发生了什么</title>
   <link href="http://http://coolshell.info/blog/2014/10/how-http-works.html"/>
   <updated>2014-10-11T00:00:00+00:00</updated>
   <id>/blog/2014/10/how-http-works</id>
   <content type="html">&lt;p&gt;简单地来说，当我们在浏览器上输入URL的敲下回车的时候。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;浏览器需要查找域名[domain]的IP，从不同的缓存直至DNS服 务器。&lt;/li&gt;
  &lt;li&gt;浏览器会给web服务器发送一个HTTP请求&lt;/li&gt;
  &lt;li&gt;服务器“处理”请求&lt;/li&gt;
  &lt;li&gt;服务器发回一个HTTP响应&lt;/li&gt;
  &lt;li&gt;浏览器渲染HTML到页面。
 比如我们从&lt;a href=&quot;http://www.joes-hardware.com:80/power-tools.html&quot;&gt;http://www.joes-hardware.com:80/power-tools.html&lt;/a&gt;获取资源的时候，整个过程如下图所示：
 &lt;img src=&quot;/images/images/http/1.jpeg&quot; alt=&quot;&quot; /&gt;
开始时我们输入的是URI(统一资源标识符,Uniform Resource Identifier)，我们用的比较多的是URI的一个子集叫统一资源定位符(URL,Uniform Resource Locator)。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;url&quot;&gt;URL组成&lt;/h2&gt;
&lt;p&gt;网址算是URL的一个俗称，让我们来看看一个URL的组成，以HTTP版IOT中的URL为例。
大多数URL都建立在这个通用格式&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;scheme&amp;gt;://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;path&amp;gt;;&amp;lt;params&amp;gt;?&amp;lt;query&amp;gt;#&amp;lt;frgs&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;各个部分的介绍如下表：
&lt;img src=&quot;/images/images/http/0.jpeg&quot; alt=&quot;&quot; /&gt;
以一个实际例子来说：
当我们在浏览器中输入&lt;a href=&quot;http://b.phodal.com/athome/1&quot;&gt;http://b.phodal.com/athome/1&lt;/a&gt;按下回车&lt;/p&gt;

&lt;p&gt;开始之前，我们需要标出URL的80端口以及json文件的全称，那么上面的网址就会变成&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.phodal.com:80/athome/1.json&quot;&gt;http://b.phodal.com:80/athome/1.json&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;那么对于这个URL的就有下面几部分组成&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;http:&lt;/strong&gt;// http说的是这个URL用的是HTTP协议，至于//是一个分隔符，用法和C语言中的;一样。这样的协议还可以是coap,https,ftp等等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;b&lt;/strong&gt; 是子域名，一个域名在允许的情况下可以有不限数量的子域名。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;phodal.com&lt;/strong&gt; 代表了一个URL是phodal.com下面的域名&lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;80&lt;/strong&gt; 80是指80端口，http默认的都是80，对于一个不是80端
 口的URL应该是这样的http://iot-coap.phodal.com:8896/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;athome&lt;/strong&gt; 指的是虚拟目录部分，或者文件路径&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1.json&lt;/strong&gt;看上去就是一个文件名，然而也代表着这是一个资源。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对就一个稍微复杂点的例子就是
&lt;a href=&quot;http://designiot.phodal.com/#%E4%BD%A0%E6%89%80%E6%B2%A1%E6%9C%89%E6%B7%B1%E5%85%A5%E7%9A%84http&quot;&gt;http://designiot.phodal.com/#你所没有深入的http&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里的#后面是片段部分（frag），如果你打开这个URL就会发现会直接跳转到相应的片段，对就于下面这样的一个例子来说&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.phodal.com/search;sales=false/?q=iot&amp;amp;type=blog&quot;&gt;http://www.phodal.com/search;sales=false/?q=iot&amp;amp;type=blog&lt;/a&gt;
&lt;strong&gt;;&lt;/strong&gt;后面是&lt;strong&gt;参数部分&lt;/strong&gt;，以便正确的与服务器进行交互
&lt;strong&gt;?&lt;/strong&gt;后面的q=iot&amp;amp;type=blog的部分是&lt;strong&gt;查询字符串&lt;/strong&gt;，通常用于查询或者、搜索。&lt;/p&gt;

&lt;h2 id=&quot;http&quot;&gt;HTTP报文&lt;/h2&gt;

&lt;p&gt;http客户端向http服务器发送请求报文，请求报文格式如下：
请求行
首部
空行
主体部分&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;method&amp;gt;&amp;lt;request-URL&amp;gt;&amp;lt;version&amp;gt;
&amp;lt;headers&amp;gt;

&amp;lt;entity-body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;响应报文的格式如下：
响应行
首部
空行
主体&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;version&amp;gt;&amp;lt;status&amp;gt;&amp;lt;reason-phase&amp;gt;
&amp;lt;headers&amp;gt;

&amp;lt;entity-body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;方法method，常见的有get和post，是客户端希望服务器对资源执行的动作&lt;/li&gt;
  &lt;li&gt;请求URL。所请求资源的完整URL或者相对路径&lt;/li&gt;
  &lt;li&gt;版本version，报文使用的http版本，比如HTTP1.1&lt;/li&gt;
  &lt;li&gt;首部header，向请求报文和响应报文添加了一些信息，本质上都是一些名/值对的列表。&lt;/li&gt;
  &lt;li&gt;状态码（status）描述请求过程发生的情况，比如200，表示OK&lt;/li&gt;
  &lt;li&gt;原因短语(reason-phase),数字状态码的可读版本&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实体的主体部分(entity-body)
 一个可能的请求报文图下：&lt;/p&gt;

    &lt;p&gt;GET /java/2014/08/02/java-multithread.html HTTP1.1
  Accept:text/html
  Host: www.lippiouyangonline.info&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可能的响应报文如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; HTTP/1.1 200 OK
 content-type: text/plain
 content-length: 19
 
 Hi,I&#39;m a message! 下面是一个POST方法示例：    ![](/images/images/http/2.jpeg)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;连接管理&lt;/h2&gt;
&lt;p&gt;几乎所有的HTTP通信都是由TCP/IP承载的，HTTP要传送一个报文，会以流的形式将报文数据内容通过一条打开的TCP连接按序传输。TCP收到数据流后会将数据流切成小段的数据块，并将段封装在IP分组中，通道因特网进行传输，每个IP分组包括：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1. 一个IP分组首部(通常为20字节)
 2. 一个TCP段首部(通常为20字节)
 3. 一个TCP数据块(0个或者多个字节)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;IP首部包括源和目的的的IP地址，长度和其他一些标记，TCP首部包括TCP端口号和控制标记。 端口号和电话分机很类似，就像公司的总机号码能将你接到前台，分机号码帮你找到正确的联系人。IP地址可能将你链接的正确的计算机，端口号将你连接到正确的应用程序上去，端口号就是一个数字，HTTP的默认端口号为80。
TCP连接是通过4个值来识别的：
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;源IP地址、源端口号、目地IP地址、目地端口号&amp;gt;&lt;/code&gt;这4个值唯一定义了一条TCP连接。
 一个TCP分组如下：
  &lt;img src=&quot;/images/images/http/3.jpeg&quot; alt=&quot;&quot; /&gt;
一个典型的TCP客户端和服务器的通信过程如下：
 &lt;img src=&quot;/images/images/http/4.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;待续…
参考书目：HTTP权威指南&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>值得推荐的android开源框架</title>
   <link href="http://http://coolshell.info/blog/2014/10/android-opensource.html"/>
   <updated>2014-10-01T00:00:00+00:00</updated>
   <id>/blog/2014/10/android-opensource</id>
   <content type="html">&lt;h2 id=&quot;volley&quot;&gt;1、volley&lt;/h2&gt;

&lt;p&gt;项目地址&lt;a href=&quot;https://github.com/smanikandan14/Volley-demo&quot;&gt;https://github.com/smanikandan14/Volley-demo&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(1)  JSON，图像等的异步下载；&lt;/li&gt;
  &lt;li&gt;(2)  网络请求的排序（scheduling）&lt;/li&gt;
  &lt;li&gt;(3)  网络请求的优先级处理&lt;/li&gt;
  &lt;li&gt;(4)  缓存&lt;/li&gt;
  &lt;li&gt;(5)  多级别取消请求&lt;/li&gt;
  &lt;li&gt;(6)  和Activity和生命周期的联动（Activity结束时同时取消所有网络请求）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;android-async-http&quot;&gt;2、android-async-http&lt;/h2&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/loopj/android-async-http&quot;&gt;https://github.com/loopj/android-async-http&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文档介绍：&lt;a href=&quot;http://loopj.com/android-async-http/&quot;&gt;http://loopj.com/android-async-http/ &lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(1) 在匿名回调中处理请求结果&lt;/li&gt;
  &lt;li&gt;(2) 在UI线程外进行http请求&lt;/li&gt;
  &lt;li&gt;(3) 文件断点上传&lt;/li&gt;
  &lt;li&gt;(4) 智能重试&lt;/li&gt;
  &lt;li&gt;(5) 默认gzip压缩&lt;/li&gt;
  &lt;li&gt;(6) 支持解析成Json格式&lt;/li&gt;
  &lt;li&gt;(7) 可将Cookies持久化到SharedPreferences&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;afinal&quot;&gt;3、Afinal框架&lt;/h2&gt;

&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/yangfuhai/afinal&quot;&gt;https://github.com/yangfuhai/afinal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主要有四大模块：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(1) 数据库模块：android中的orm框架，使用了线程池对sqlite进行操作。&lt;/li&gt;
  &lt;li&gt;(2) 注解模块：android中的ioc框架，完全注解方式就可以进行UI绑定和事件绑定。无需findViewById和setClickListener等。&lt;/li&gt;
  &lt;li&gt;(3) 网络模块：通过httpclient进行封装http数据请求，支持ajax方式加载，支持下载、上传文件功能。&lt;/li&gt;
  &lt;li&gt;(4) 图片缓存模块：通过FinalBitmap，imageview加载bitmap的时候无需考虑bitmap加载过程中出现的oom和android容器快速滑动时候出现的图片错位等现象。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FinalBitmap可以配置线程加载线程数量，缓存大小，缓存路径，加载显示动画等。FinalBitmap的内存管理使用lru算法，
没有使用弱引用（android2.3以后google已经不建议使用弱引用，android2.3后强行回收软引用和弱引用，详情查看android官方文档），
更好的管理bitmap内存。&lt;/p&gt;

&lt;p&gt;FinalBitmap可以自定义下载器，用来扩展其他协议显示网络图片，比如ftp等。同时可以自定义bitmap显示器，
在imageview显示图片的时候播放动画等（默认是渐变动画显示）。&lt;/p&gt;

&lt;h2 id=&quot;xutils&quot;&gt;4、xUtils框架&lt;/h2&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/wyouflf/xUtils&quot;&gt;https://github.com/wyouflf/xUtils&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主要有四大模块：&lt;/p&gt;

&lt;p&gt;(1) 数据库模块：android中的orm框架，一行代码就可以进行增删改查；&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;支持事务，默认关闭；&lt;/li&gt;
  &lt;li&gt;可通过注解自定义表名，列名，外键，唯一性约束，NOT NULL约束，CHECK约束等（需要混淆的时候请注解表名和列名）；&lt;/li&gt;
  &lt;li&gt;支持绑定外键，保存实体时外键关联实体自动保存或更新；&lt;/li&gt;
  &lt;li&gt;自动加载外键关联实体，支持延时加载；&lt;/li&gt;
  &lt;li&gt;支持链式表达查询，更直观的查询语义，参考下面的介绍或sample中的例子.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(2) 注解模块：android中的ioc框架，完全注解方式就可以进行UI，资源和事件绑定；&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;新的事件绑定方式，使用混淆工具混淆后仍可正常工作；&lt;/li&gt;
  &lt;li&gt;目前支持常用的20种事件绑定，参见ViewCommonEventListener类和包com.lidroid.xutils.view.annotation.event。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) 网络模块：支持同步，异步方式的请求；&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;支持大文件上传，上传大文件不会oom；&lt;/li&gt;
  &lt;li&gt;支持GET，POST，PUT，MOVE，COPY，DELETE，HEAD，OPTIONS，TRACE，CONNECT请求；&lt;/li&gt;
  &lt;li&gt;下载支持301/302重定向，支持设置是否根据Content-Disposition重命名下载的文件；&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;返回文本内容的请求(默认只启用了GET请求)支持缓存，可设置默认过期时间和针对当前请求的过期时间。&lt;/p&gt;

    &lt;p&gt;(4) 图片缓存模块：加载bitmap的时候无需考虑bitmap加载过程中出现的oom和android容器快速滑动时候出现的图片错位等现象；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;支持加载网络图片和本地图片；&lt;/li&gt;
  &lt;li&gt;内存管理使用lru算法，更好的管理bitmap内存；&lt;/li&gt;
  &lt;li&gt;可配置线程加载线程数量，缓存大小，缓存路径，加载显示动画等…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thinkandroid&quot;&gt;5、ThinkAndroid&lt;/h2&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/white-cat/ThinkAndroid&quot;&gt;https://github.com/white-cat/ThinkAndroid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主要有以下模块：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(1)  MVC模块：实现视图与模型的分离。&lt;/li&gt;
  &lt;li&gt;(2)  ioc模块：android中的ioc模块，完全注解方式就可以进行UI绑定、res中的资源的读取、以及对象的初始化。&lt;/li&gt;
  &lt;li&gt;(3)  数据库模块：android中的orm框架，使用了线程池对sqlite进行操作。&lt;/li&gt;
  &lt;li&gt;(4)  http模块：通过httpclient进行封装http数据请求，支持异步及同步方式加载。&lt;/li&gt;
  &lt;li&gt;(5)  缓存模块：通过简单的配置及设计可以很好的实现缓存，对缓存可以随意的配置&lt;/li&gt;
  &lt;li&gt;(6)  图片缓存模块：imageview加载图片的时候无需考虑图片加载过程中出现的oom和android容器快速滑动时候出现的图片错位等现象。&lt;/li&gt;
  &lt;li&gt;(7)  配置器模块：可以对简易的实现配对配置的操作，目前配置文件可以支持Preference、Properties对配置进行存取。&lt;/li&gt;
  &lt;li&gt;(8)  日志打印模块：可以较快的轻易的是实现日志打印，支持日志打印的扩展，目前支持对sdcard写入本地打印、以及控制台打印&lt;/li&gt;
  &lt;li&gt;(9)  下载器模块:可以简单的实现多线程下载、后台下载、断点续传、对下载进行控制、如开始、暂停、删除等等。&lt;/li&gt;
  &lt;li&gt;(10) 网络状态检测模块：当网络状态改变时，对其进行检&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;loonandroid&quot;&gt;6、LoonAndroid&lt;/h2&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/gdpancheng/LoonAndroid&quot;&gt;https://github.com/gdpancheng/LoonAndroid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主要有以下模块：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(1)  自动注入框架（只需要继承框架内的application既可）&lt;/li&gt;
  &lt;li&gt;(2)  图片加载框架（多重缓存，自动回收，最大限度保证内存的安全性）&lt;/li&gt;
  &lt;li&gt;(3)  网络请求模块（继承了基本上现在所有的http请求）&lt;/li&gt;
  &lt;li&gt;(4)  eventbus（集成一个开源的框架）&lt;/li&gt;
  &lt;li&gt;(5)  验证框架（集成开源框架）&lt;/li&gt;
  &lt;li&gt;(6)  json解析（支持解析成集合或者对象）&lt;/li&gt;
  &lt;li&gt;(7)  数据库（不知道是哪位写的 忘记了）&lt;/li&gt;
  &lt;li&gt;(8)  多线程断点下载（自动判断是否支持多线程，判断是否是重定向）&lt;/li&gt;
  &lt;li&gt;(9)  自动更新模块&lt;/li&gt;
  &lt;li&gt;(10) 一系列工具类&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中的 volley扩展性非常好，个人比较喜欢的风格。其他如 android-async-http、Afinal 也相当不错。&lt;/p&gt;

&lt;h2 id=&quot;androidannotations&quot;&gt;7、AndroidAnnotations&lt;/h2&gt;

&lt;p&gt;项目地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://androidannotations.org/&quot;&gt;AndroidAnnotations首页&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/excilys/androidannotations/wiki&quot;&gt;github上的项目地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主要有以下特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用依赖注入(DI)、控制反转(IOC)来简化开发过程&lt;/li&gt;
  &lt;li&gt;简化的线程模型（Simplified  threading model)&lt;/li&gt;
  &lt;li&gt;事件绑定（Event binding）&lt;/li&gt;
  &lt;li&gt;REST Client&lt;/li&gt;
  &lt;li&gt;No Magic&lt;/li&gt;
  &lt;li&gt;类似框架：&lt;a href=&quot;http://jakewharton.github.io/butterknife/&quot;&gt;Bufferknife&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;roboguice&quot;&gt;8、RoboGuice&lt;/h2&gt;

&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/roboguice/roboguice&quot;&gt;https://github.com/roboguice/roboguice&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RoboGuice 使得进行Android开发更加方便，使得开发变得更加简单也更有乐趣。当你调用getIntent().getExtras()是不是经常检查是否为null？RoboGuice可以帮助你。想想调用findViewById()并映射到TextView确实有必要么？RoboGuice也可以帮你。&lt;/p&gt;

&lt;p&gt;RoboGuice 可以帮助解决这类的判断工作。你再也不用记住，是通过调用bindService获取一个用户service，调用getSystemService获取一个系统service。注入你的view、service、或者其他对象，然后让RoboGuice来处理剩下的事宜。&lt;/p&gt;

&lt;p&gt;RoboGuice 精简了你的应用代码。更少的代码意味着bug也会更少。也使得阅读代码更加容易，不在纠缠于Android平台的各种特性，而是关注于应用实际的业务逻辑。&lt;/p&gt;

&lt;p&gt;没什么很难的，你所需要做的仅仅是配置RoboGuice。&lt;/p&gt;

&lt;p&gt;##　9、Dagger ##&lt;/p&gt;

&lt;p&gt;项目地址&lt;a href=&quot;https://github.com/square/dagger&quot;&gt;https://github.com/square/dagger&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;android的依赖注入框架（DI框架），感觉跟Spring 的IOC差不多吧。这个框架它的好处是它没有采用反射技术（Spring是用反射的）,而是用预编译技术，因为基于反射的DI非常地耗用资源（空间，时间）&lt;/p&gt;

&lt;h2 id=&quot;fresco&quot;&gt;10、Fresco　&lt;/h2&gt;

&lt;p&gt;中文文档&lt;a href=&quot;http://fresco-cn.org/&quot;&gt;http://fresco-cn.org/&lt;/a&gt;
项目地址&lt;a href=&quot;https://github.com/facebook/fresco&quot;&gt;https://github.com/facebook/fresco&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fresco 是一个强大的图片加载组件。&lt;/p&gt;

&lt;p&gt;Fresco 中设计有一个叫做 image pipeline 的模块。它负责从网络，从本地文件系统，本地资源加载图片。为了最大限度节省空间和CPU时间，它含有3级缓存设计（2级内存，1级文件）。&lt;/p&gt;

&lt;p&gt;Fresco 中设计有一个叫做 Drawees 模块，方便地显示loading图，当图片不再显示在屏幕上时，及时地释放内存和空间占用。&lt;/p&gt;

&lt;p&gt;特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;内存管理&lt;/li&gt;
  &lt;li&gt;图片的渐进式呈现&lt;/li&gt;
  &lt;li&gt;支持加载Gif图，支持WebP格式&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;activeandroid&quot;&gt;11、ActiveAndroid&lt;/h2&gt;

&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/pardom/ActiveAndroid&quot;&gt;https://github.com/pardom/ActiveAndroid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ActiveAndroid是一个活跃的记录风格的ORM（对象关系映射）库。ActiveAndroid可以让您保存和检索的SQLite数据库记录而没有写一个SQL语句。每个数据库记录被整齐包裹成一个model类,像保存方法（）和delete（）。&lt;/p&gt;

&lt;h2 id=&quot;android-universal-image-loader&quot;&gt;12、Android-Universal-Image-Loader&lt;/h2&gt;

&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;https://github.com/nostra13/Android-Universal-Image-Loader&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Android-Universal-Image-Loader是一个开源的UI组件程序，该项目的目的是提供一个可重复使用的仪器为异步图像加载，缓存和显示。所以，如果你的程序里需要这个功能的话，那么不妨试试它。因为已经封装好了一些类和方法。我们 可以直接拿来用了。而不用重复去写了。其实，写一个这方面的程序还是比较麻烦的，要考虑多线程，缓存，内存溢出等很多方面。但是，你也可以参考这个例子来自己写出更好的程序。&lt;/p&gt;

&lt;h2 id=&quot;kjframeforandroid&quot;&gt;12、KJFrameForAndroid&lt;/h2&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/kymjs/KJFrameForAndroid&quot;&gt;https://github.com/kymjs/KJFrameForAndroid&lt;/a&gt;&lt;br /&gt;
一个强大的Android开发库，KJFrameForAndroid的设计思想是通过封装Android原生SDK中复杂的复杂操作而达到简化Android应用级开发，最终实现快速而又安全的开发APP。功能包含
* 数据库： javabean直接转换为sqlite表存储&lt;br /&gt;
* Activity继承链：用最快捷的方法实现MVC分层&lt;br /&gt;
* KJHttp：自带缓存功能的网络请求库，同时可选用HttpurlConnection(默认)或HttpClient实现
* KJBitmap：加载网络图片只需要一行代码，使用内存+磁盘双缓存，完美适配任何版本系统不会出现OOM。&lt;/p&gt;

&lt;h2 id=&quot;cjframeforandroid&quot;&gt;13、CJFrameForAndroid&lt;/h2&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/kymjs/CJFrameForAndroid&quot;&gt;https://github.com/kymjs/CJFrameForAndroid&lt;/a&gt;&lt;br /&gt;
一个完善的Android插件化开发框架的开源实现，只需要一行代码就可以启动一个存在于asset目录或sd卡上的没有安装的apk。&lt;br /&gt;
对于插件apk没有任何的编码限制。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>关于返回 Null 值的问题</title>
   <link href="http://http://coolshell.info/blog/2014/09/returning-null.html"/>
   <updated>2014-09-18T00:00:00+00:00</updated>
   <id>/blog/2014/09/returning-null</id>
   <content type="html">&lt;p&gt;原文： &lt;a href=&quot;http://zdsbs.blogspot.com/2009/08/returning-null.html&quot;&gt;Returning Null&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;译文： &lt;a href=&quot;http://www.aqee.net/returning-null/&quot;&gt;关于返回 Null 值的问题&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我总感觉一个方法返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 值有问题。
当读了 Misko Hevery 关于 &lt;a href=&quot;http://misko.hevery.com/2009/07/31/how-to-think-about-oo/&quot;&gt;how to think about OO&lt;/a&gt;的博客文章后，又让我想起这个问题。&lt;/p&gt;

&lt;p&gt;我感觉返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; 值是有问题的，它大量的被使用在一个方法有不同的返回类型时。
简单的用谷歌搜索一下“returning null”，你就会发现有建议把返回类型做成一个null对象。
返回一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Null&lt;/code&gt; 对象在某些情况下是合适的，但并不适合当你需要向客户端传送两种不同的东西的情形。&lt;/p&gt;

&lt;p&gt;用 Misko 重构的一段代码来说明这个问题。
他重构的是一段登录代码(我非常喜欢他的过程)，这段代码大概是这个样子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cookie login(Ldap ldap) {
    if ( ldap.auth(user, password) )
      return new Cookie(user);
    return null;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;从这段代码，可以看出两种情况(从结构上讲)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果认证通过, 客户端会被通知验证成功, 生成一个新的 Cookie&lt;/li&gt;
  &lt;li&gt;如果认证失败, 则通过返回的null值通知客户端&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;客户端的方法应该是什么样的？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void authenticateUser(User user) {
    Cookie userCookie = user.login(ldap);
    if (userCookie == null) {
        //notify someone that auth failed
    } eles {
        //register them as logged in
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们在两个地方做了相同的事情，只是在语法上有稍微的不同，每个地方，我们都要检查验证是否成功。
如果我们使用 IoC（反向控制）模式，或“Tell Don’t Ask”模式或“Hollywood原则”，会如何？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cookie login(Ldap ldap, AuthenticationRegistry authenticationRegistry) {
    if ( ldap.auth(user, password) )
        authenticationRegistry.authSucceeded(new Cookie(user));
    authenticationRegistry.authFailed(user);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;客户端：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void authenticateUser(User user) {
    user.login(ldap,this);
}

public void authSucceeded(Cookie cookie) {
    //register them as logged in
}

public void authFailed(User user) {
    //register them as auth failed
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;新代码稍微有点复杂，但我感觉它很清晰，实现的更直接。
现在我们的两个实体能够相互通信，我们定义了它们通信的方式。
我喜欢 Misko 的重构，我只是更进了一步。
好坏可以再讨论，但我想，如果你遇到了这种需要返回两种情况的方法时，IoC 是你应该的选择。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>为什么 jdk 中把 String 类设计成 final</title>
   <link href="http://http://coolshell.info/blog/2014/08/why-jdk-string-is-final.html"/>
   <updated>2014-08-29T00:00:00+00:00</updated>
   <id>/blog/2014/08/why-jdk-string-is-final</id>
   <content type="html">&lt;h2 id=&quot;section&quot;&gt;最佳答案：&lt;/h2&gt;

&lt;p&gt;主要是为了 “ 效率 ” 和 “ 安全性 ” 的缘故。
若 String 允许被继承, 由于它的高度被使用率, 可能会降低程序的性能，所以 String 被定义成 final。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;其它答案一：&lt;/h2&gt;

&lt;p&gt;String 和其他基本类型不同 , 他是个对象类型. 
既然是对象类型 , 如果是在静态方法下是必须调用静态方法或值的 , 如果是非静态的方法 , 就必须要实例化.&lt;/p&gt;

&lt;p&gt;main 函数是个 static 的. 
所以 &lt;strong&gt;String 要能像其他的基本类型一样直接被调用&lt;/strong&gt;. 
这也是为什么在 main 函数下使用 String 类型不会报告错误的原因..&lt;/p&gt;

&lt;p&gt;一下就解释了两个心里的疑问..&lt;/p&gt;

&lt;p&gt;以前一直觉得奇怪 , &lt;strong&gt;为什么 String 是对象类型在 main 函数下却是不需要实例化的&lt;/strong&gt;. 
再次佩服 java 设计人员想得真周到.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;其它答案二：&lt;/h2&gt;

&lt;p&gt;当定义 String 类型的静态字段（也成类字段），可以用静态变量（非 final）代替常量（final）加快程序速度。
反之，对于原始数据类型，例如 int，也成立。&lt;/p&gt;

&lt;p&gt;例如，你可能创建一个如下的 String 对象：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static final String x = &quot;example&quot;; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对于这个静态常量（由 final 关键字标识），你使用常量的每个时候都会创建一个临时的 String 对象。
在字节代码中，编译器去掉 ”x”，代替它的是字符串 “example”, 以致每次引用 ”x” 时 VM 都会进行一次哈希表查询。&lt;/p&gt;

&lt;p&gt;相比之下，度于静态变量 ( 非 final 关键字 )，字符串只创建一次。
仅当初始化 “x” 时， VM 才进行哈希表查询。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;还有另一个解释 :&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;带有 final 修饰符的类是不可派生的&lt;/strong&gt;。
在 java 核心 API 中，有许多应用 final 的例子，例如 java.lang.String。
为 String 类指定 final 防止了人们覆盖 length() 方法。&lt;/p&gt;

&lt;p&gt;另外，如果指定一个类为 final，则该类所有的方法都是 final。 
java 编译器会寻找机会内联（inline）所有的 final 方法（这和具体的编译器实现有关）。
此举能够使性能平均提高 50%。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Test { 
    public static void main(String[] args)  { 
        //  
    } 
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果 String 不是 final 那么就可以继承&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class String2 extends String{ 
   //.. 
   //... 
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那我们的 main 也就可以写成&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Test { 
    public static void main(String2[] args)  { // 注意此处 
        //  
    } 
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;英文参考： &lt;a href=&quot;http://forums.sun.com/thread.jspa?threadID=636414&quot;&gt;http://forums.sun.com/thread.jspa?threadID=636414&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;另外补充一点：&lt;/h3&gt;

&lt;p&gt;作用就是 final的类不能被继承，不能让别人继承有什么好处?&lt;/p&gt;

&lt;p&gt;意义就在于，安全性，如此这般：&lt;/p&gt;

&lt;p&gt;java 自出生那天起就是“为人民服务”，这也就是为什么java做不了病毒，也不一定非得是病毒，反正总之就是为了安全，
人家java的开发者目的就是不想让 java干这类危险的事儿，java并不是操作系统本地语言，
换句话说java必须借助操作系统本身的力量才能做事，JDK中提供的好多核心类比如 String，这类的类的内部好多方法的实现都不是java编程语言本身编写的，
好多方法都是调用的操作系统本地的API，这就是著名的“本地方法调用”，也只有这样才能做事，这种类是非常底层的，
和操作系统交流频繁的，那么如果这种类可以被继承的话，如果我们再把它的方法重写了，往操作系统内部写入一段具有恶意攻击性质的代码什么的，
这不就成了核心病毒了么？&lt;/p&gt;

&lt;p&gt;上面所述是最重要的，另外一个方面，上面2位老兄说的也都很对，
就是不希望别人改，这个类就像一个工具一样，类的提供者给我们提供了，
就希望我们直接用就完了，不想让我们随便能改，其实说白了还是安全性，
如果随便能改了，那么java编写的程序肯定就很不稳定，你可以保证自己不乱改，
但是将来一个项目好多人来做，管不了别人，再说有时候万一疏忽了呢？他也不是估计的，
所以这个安全性是很重要的，java和C++相比，优点之一就包括这一点；&lt;/p&gt;

&lt;p&gt;原因绝对不只有这么多，因为如果这些个核心的类都能被随便操作的话，那是很恐怖的，会出现好多好多未知的错误，莫名其妙的错误….&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>处理并发之二：libevent的eventbuffer</title>
   <link href="http://http://coolshell.info/blog/2014/08/libevent.html"/>
   <updated>2014-08-24T00:00:00+00:00</updated>
   <id>/blog/2014/08/libevent</id>
   <content type="html">&lt;p&gt;bufferevent这个结构体&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct bufferevent {
	struct event_base *ev_base;  
	const struct bufferevent_ops *be_ops;  
	struct event ev_read;  
	struct event ev_write;  
	struct evbuffer *input;  
	struct evbuffer *output;   																	           
	bufferevent_data_cb readcb;   	     																                                     bufferevent_data_cb writecb;      																		           bufferevent_event_cb errorcb;  
    }  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看出struct bufferevent内置了两个event（读/写）和对应的缓冲区。当有数据被读入(input)的时候，readcb被调用，当output被输出完成的时候，writecb被调用，当网络I/O出现错误，如链接中断，超时或其他错误时，errorcb被调用。
使用bufferevent的过程：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 设置sock为非阻塞的&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eg:  evutil_make_socket_nonblocking(fd);  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2. 使用bufferevent_socket_new创建一个structbufferevent *bev，关联该sockfd，托管给event_base&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;函数原型为：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;struct bufferevent * bufferevent_socket_new(struct event_base
*base, evutil_socket_t fd,  int options)&lt;br /&gt;
    		eg:  struct bufferevent *bev;&lt;br /&gt;
    		bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3. 设置读写对应的回调函数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;函数原型为：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;void bufferevent_setcb(struct bufferevent *bufev, &lt;br /&gt;
bufferevent_data_cb readcb, bufferevent_data_cb writecb,&lt;br /&gt;
bufferevent_event_cb eventcb, void *cbarg)   eg. 
bufferevent_setcb(bev, readcb, NULL, errorcb, NULL);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;4. 启用读写事件,其实是调用了event_add将相应读写事件加入事件监听队列poll。正如文档所说，如果相应事件不置为true，bufferevent是不会读写数据的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;函数原型：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int bufferevent_enable(struct bufferevent *bufev, short event)   	eg. bufferevent_enable(bev, EV_READ|EV_WRITE);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;5. 进入bufferevent_setcb回调函数：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在readcb里面从input中读取数据，处理完毕后填充到output中； 	writecb对于服务端程序，只需要readcb就可以了，可以置为NULL； 	errorcb用于处理一些错误信息。&lt;/p&gt;

&lt;p&gt;针对这些使用过程进入源码进行分析：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. bufferevent_socket_new&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在bufferevent_init_common中调用evbuffer_new()初始化input和output&lt;/li&gt;
  &lt;li&gt;在event_assign中初始化bufferevent中的ev_read和ev_write事件。&lt;/li&gt;
  &lt;li&gt;在evbuffer_add_cb中给output添加了一个callback bufferevent_socket_outbuf_cb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. bufferevent_setcb&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;该函数的作用主要是赋值，把该函数后面的参数，赋值给第一个参数struct bufferevent *bufev定义的变量 **3. bufferevent_enable**
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;调用event_add将读写事件加入到事件监听队列中。&lt;/p&gt;

&lt;p&gt;对bufferevent常用的几个函数进行分析：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char *evbuffer_readln(struct evbuffer*buffer, size_t *n_read_out,enum evbuffer_eol_style eol_style);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;含义：Read a single line from an evbuffer.
	返回值：读到的一行内容&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;int evbuffer_add(struct evbuffer *buf,const void *data, size_t
datlen);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;含义：将数据添加到evbuffer的结尾
返回值：成功返回0，失败返回-1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;int evbuffer_remove(struct evbuffer*buf, void *data, size_t datlen);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;含义：从evbuffer读取数据到data
返回值：成功返回0，失败返回-1&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;size_t evbuffer_get_length(const structevbuffer *buf);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;含义：返回evbuffer中存储的字节长度
	暂时先分析到这里，下面是代码，客户端发送消息：HTTP/1.0, Client 0 send Message:
	Request: Hello Server! over，服务端一条消息收完成后，会回复：Response ok! Hello Client!
	服务端从bufferevent中取出消息是按行取的。代码可能有不完善的地方，由于才疏学浅，研究时间短（3天），希望高手提出宝贵意见。&lt;/p&gt;

&lt;p&gt;buffer_server.c&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;netinet/in.h&amp;gt;  
#include &amp;lt;sys/socket.h&amp;gt;  
#include &amp;lt;fcntl.h&amp;gt;   		  
#include &amp;lt;event2/event.h&amp;gt;  
#include &amp;lt;event2/buffer.h&amp;gt;  
#include &amp;lt;event2/bufferevent.h&amp;gt;      		  
#include &amp;lt;assert.h&amp;gt;  
#include &amp;lt;unistd.h&amp;gt;  
#include &amp;lt;string.h&amp;gt;  
#include &amp;lt;stdlib.h&amp;gt;  
#include &amp;lt;stdio.h&amp;gt;  
#include &amp;lt;errno.h&amp;gt;  
   	void do_read(evutil_socket_t fd, short events, void *arg);  
   	//struct bufferevent内建了两个event(read/write)和对应的缓冲区(struct evbuffer *input, *output)，并提供相应的函数用来操作缓冲区(或者直接操作bufferevent)   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

   	//接收到数据后，判断是不一样一条消息的结束，结束标志为”over”字符

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void readcb(struct bufferevent *bev, void *ctx)  
{	 
    printf(&quot;called readcb!\n&quot;);   		
    struct evbuffer *input, *output;  
    char *request_line;  
    size_t len;  
    //其实就是取出bufferevent中的input  
    input = bufferevent_get_input(bev);
    //其实就是取出bufferevent中的output 
    output = bufferevent_get_output(bev);						  
    size_t input_len = evbuffer_get_length(input);  								    
    printf(&quot;input_len: %d\n&quot;, input_len);  
    size_t output_len = evbuffer_get_length(output);  										   
    printf(&quot;output_len: %d\n&quot;, output_len);  											  											   
    while(1){														    														        
    	//从evbuffer前面取出一行，用一个新分配的空字符结束		
    	//的字符串返回这一行,EVBUFFER_EOL_CRLF表示行尾是一个可选的回车，后随一个换行符
    	request_line = evbuffer_readln(input, &amp;amp;len, EVBUFFER_EOL_CRLF);
    	if(NULL == request_line){ 		
			printf(&quot;The first line has not arrived yet.\n&quot;);  																										           
			free(request_line);//之所以要进行free是因为 line = mm_malloc(n_to_copy+1))，在这里进行了malloc  																													
			break;  																																      
    	} else {																				  																				   
    			printf(&quot;Get one line date: %s\n&quot;, request_line); 																				         
    			//用于判断是不是一条消息的结束  																										             
				if(strstr(request_line, &quot;over&quot;) != NULL)					{																														    																														     
					char *response = &quot;Response ok! Hello Client!\r\n&quot;;  																																				                 
					//Adds data to an event buffer  
					evbuffer_add(output, response, strlen(response));
																																							                 
					printf(&quot;服务端接收一条数据完成，回复客户端一条消息: %s\n&quot;, response); 																																												                
					free(request_line);  																																														   
					break;  																																																		             
					}  																										       
    			}  																          
    	free(request_line);  																		     
    	}  												 
		size_t input_len1 = evbuffer_get_length(input);  													   
		printf(&quot;input_len1: %d\n&quot;, input_len1);  														   
		size_t output_len1 = evbuffer_get_length(output);  															    
		printf(&quot;output_len1: %d\n\n&quot;, output_len1);  
}         

void errorcb(struct bufferevent *bev, short error, void *ctx)  
{  
	if (error &amp;amp; BEV_EVENT_EOF) { 
		/* connection has been closed, do any clean up here */   	 
		printf(&quot;connection closed\n&quot;);  
		}else if (error &amp;amp; BEV_EVENT_ERROR){					    
			/* check errno to see what error occurred */  
			printf(&quot;some other error\n&quot;);  
			} else if (error &amp;amp; BEV_EVENT_TIMEOUT) 
				/* must be a timeout event handle, handle it */  
				printf(&quot;Timed out\n&quot;);  
	      		}  
	bufferevent_free(bev);   
}

void do_accept(evutil_socket_t listener, short event, void *arg)  
{
	struct event_base *base = arg;  
	struct sockaddr_storage ss;  
	socklen_t slen = sizeof(ss);  
	int fd = accept(listener, (struct sockaddr*)&amp;amp;ss, &amp;amp;slen);  
	if (fd &amp;lt; 0){
		perror(&quot;accept&quot;);  
	}else if (fd &amp;gt; FD_SETSIZE){  
		close(fd);  
	 }else {
		 struct bufferevent *bev;
		 evutil_make_socket_nonblocking(fd);  													    														         
		 //使用bufferevent_socket_new创建一个struct bufferevent*bev，
		 //关联该sockfd，托管给event_base  													         
		 //BEV_OPT_CLOSE_ON_FREE表示释放bufferevent时关闭底层传输端口。
		 //这将关闭底层套接字，释放底层bufferevent等。  														         
		 bev = bufferevent_socket_new(base, fd, BEV_OPT_CLOSE_ON_FREE);  														    																         
		 //设置读写对应的回调函数  
		 bufferevent_setcb(bev, readcb, NULL, errorcb, NULL);  
		 bufferevent_setwatermark(bev, EV_READ, 0, MAX_LINE);  																    																		        
		 //启用读写事件,其实是调用了event_add将相应读写事件加入事件监听队列poll。
		 //正如文档所说，如果相应事件不置为true，bufferevent是不会读写数据的  																			         
		 bufferevent_enable(bev, EV_READ|EV_WRITE);  																		
	 }  
}     
	
void run(void){	  
	evutil_socket_t listener;   		
	struct sockaddr_in sin;  
	struct event_base *base;  
	struct event *listener_event;  			  
	base = event_base_new();  
	if (!base)  
	return; 
	 sin.sin_family = AF_INET;  
	 sin.sin_addr.s_addr = 0;  			
	 sin.sin_port = htons(8000); 								  									
	 listener = socket(AF_INET, SOCK_STREAM, 0);  
	 evutil_make_socket_nonblocking(listener);  		
	 
	#ifndef WIN32{    				

									 														        
int one = 1;  																      
setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, 
&amp;amp;one, sizeof(one));  
}    
#endif  
if(bind(listener, (struct sockaddr*)&amp;amp;sin, sizeof(sin)) &amp;lt; 0){																   															         
	perror(&quot;bind&quot;);  																		         
	return;  																				    
}  														
if (listen(listener, 16)&amp;lt;0){																    																         
	perror(&quot;listen&quot;);    																    																          
	return;     
}  										  
											  
listener_event = event_new(base, listener, EV_READ|EV_PERSIST, do_accept, (void*)base);
event_add(listener_event, NULL);  																									     													   
event_base_dispatch(base);  
}  
int main(int argc, char **argv){    	  
	setvbuf(stdout, NULL, _IONBF, 0); 	  
	run();  
	return 0; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>处理并发之一：LINUX Epoll机制介绍</title>
   <link href="http://http://coolshell.info/blog/2014/08/linux-epoll.html"/>
   <updated>2014-08-23T00:00:00+00:00</updated>
   <id>/blog/2014/08/linux-epoll</id>
   <content type="html">&lt;p&gt;Epoll可是当前在Linux下开发大规模并发网络程序的热门人选，Epoll 在Linux2.6内核中正式引入，和select相似，其实都I/O多路复用技术而已，并没有什么神秘的。&lt;/p&gt;

&lt;p&gt;其实在Linux下设计并发网络程序，向来不缺少方法，比如典型的Apache模型（Process Per Connection，简称PPC），TPC（Thread Per Connection）模型，以及select模型和poll模型，那为何还要再引入Epoll这个东东呢？那还是有得说说的…&lt;/p&gt;

&lt;p&gt;##2. 常用模型的缺点&lt;/p&gt;

&lt;p&gt;如果不摆出来其他模型的缺点，怎么能对比出Epoll的优点呢。&lt;/p&gt;

&lt;p&gt;###2.1 PPC/TPC模型&lt;/p&gt;

&lt;p&gt;这两种模型思想类似，就是让每一个到来的连接一边自己做事去，别再来烦我。只是PPC是为它开了一个进程，而TPC开了一个线程。可是别烦我是有代价的，它要时间和空间啊，连接多了之后，那么多的进程/线程切换，这开销就上来了；因此这类模型能接受的最大连接数都不会高，一般在几百个左右。&lt;/p&gt;

&lt;p&gt;###2.2 select模型&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;最大并发数限制，因为一个进程所打开的FD（文件描述符）是有限制的，由FD_SETSIZE设置，默认值是1024/2048，因此Select模型的最大并发数就被相应限制了。自己改改这个FD_SETSIZE？想法虽好，可是先看看下面吧…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;效率问题，select每次调用都会线性扫描全部的FD集合，这样效率就会呈现线性下降，把FD_SETSIZE改大的后果就是，大家都慢慢来，什么？都超时了？？！！&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;内核/用户空间 内存拷贝问题，如何让内核把FD消息通知给用户空间呢？在这个问题上select采取了内存拷贝方法。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###2.3 poll模型&lt;/p&gt;

&lt;p&gt;基本上效率和select是相同的，select缺点的2和3它都没有改掉。&lt;/p&gt;

&lt;p&gt;##3.Epoll的提升&lt;/p&gt;

&lt;p&gt;把其他模型逐个批判了一下，再来看看Epoll的改进之处吧，其实把select的缺点反过来那就是Epoll的优点了。&lt;/p&gt;

&lt;p&gt;3.1. Epoll没有最大并发连接的限制，上限是最大可以打开文件的数目，这个数字一般远大于2048, 一般来说这个数目和系统内存关系很大，具体数目可以cat /proc/sys/fs/file-max察看。&lt;/p&gt;

&lt;p&gt;3.2. 效率提升，Epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll。&lt;/p&gt;

&lt;p&gt;3.3. 内存拷贝，Epoll在这点上使用了“共享内存”，这个内存拷贝也省略了。&lt;/p&gt;

&lt;p&gt;##4. Epoll为什么高效&lt;/p&gt;

&lt;p&gt;Epoll的高效和其数据结构的设计是密不可分的，这个下面就会提到。&lt;/p&gt;

&lt;p&gt;首先回忆一下select模型，当有I/O事件到来时，select通知应用程序有事件到了快去处理，而应用程序必须轮询所有的FD集合，测试每个FD是否有事件发生，并处理事件；代码像下面这样：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int res = select(maxfd+1, &amp;amp;readfds, NULL, NULL, 120);
if(res &amp;gt; 0)

{
    for(int i = 0; i &amp;lt; MAX_CONNECTION; i++)
    {
        if(FD_ISSET(allConnection[i],&amp;amp;readfds))
        {
            handleEvent(allConnection[i]);
        }
    }
}
// if(res == 0) handle timeout, res &amp;lt; 0 handle error
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Epoll不仅会告诉应用程序有I/0事件到来，还会告诉应用程序相关的信息，这些信息是应用程序填充的，因此根据这些信息应用程序就能直接定位到事件，而不必遍历整个FD集合。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;intres = epoll_wait(epfd, events, 20, 120);

for(int i = 0; i &amp;lt; res;i++)
{
    handleEvent(events[n]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##5. Epoll关键数据结构&lt;/p&gt;

&lt;p&gt;前面提到Epoll速度快和其数据结构密不可分，其关键数据结构就是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct epoll_event {

    __uint32_t events;      // Epoll events

    epoll_data_t data;      // User datavariable

};

typedef union epoll_data {

    void *ptr;

   int fd;

    __uint32_t u32;

    __uint64_t u64;

} epoll_data_t;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;结构体epoll_event 被用于注册所感兴趣的事件和回传所发生待处理的事件. 
其中epoll_data 联合体用来保存触发事件的某个文件描述符相关的数据. 
例如一个client连接到服务器，服务器通过调用accept函数可以得到于这个client对应的socket文件描述符，可以把这文件描述符赋给epoll_data的fd字段以便后面的读写操作在这个文件描述符上进行。epoll_event 结构体的events字段是表示感兴趣的事件和被触发的事件可能的取值为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EPOLLIN ：表示对应的文件描述符可以读；&lt;/li&gt;
  &lt;li&gt;EPOLLOUT：表示对应的文件描述符可以写；&lt;/li&gt;
  &lt;li&gt;EPOLLPRI：表示对应的文件描述符有紧急的数据可读&lt;/li&gt;
  &lt;li&gt;EPOLLERR：表示对应的文件描述符发生错误；&lt;/li&gt;
  &lt;li&gt;EPOLLHUP：表示对应的文件描述符被挂断；&lt;/li&gt;
  &lt;li&gt;EPOLLET：表示对应的文件描述符有事件发生；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;ET和LT模式&lt;/strong&gt;
LT(level triggered)是缺省的工作方式，并且同时支持block和no-block socket.在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。传统的select/poll都是这种模型的代表。&lt;/p&gt;

&lt;p&gt;ET (edge-triggered)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了（比如，你在发送，接收或者接收请求，或者发送接收的数据少于一定量时导致了一个EWOULDBLOCK 错误）。但是请注意，如果一直不对这个fd作IO操作（从而导致它再次变成未就绪），内核不会发送更多的通知(only once)，不过在TCP协议中，ET模式的加速效用仍需要更多的benchmark确认。
ET和LT的区别在于LT事件不会丢弃，而是只要读buffer里面有数据可以让用户读，则不断的通知你。而ET则只在事件发生之时通知。可以简单理解为LT是水平触发，而ET则为边缘触发。
ET模式仅当状态发生变化的时候才获得通知,这里所谓的状态的变化并不包括缓冲区中还有未处理的数据,也就是说,如果要采用ET模式,需要一直read/write直到出错为止,很多人反映为什么采用ET模式只接收了一部分数据就再也得不到通知了,大多因为这样;而LT模式是只要有数据没有处理就会一直通知下去的.&lt;/p&gt;

&lt;p&gt;##6. 使用Epoll&lt;/p&gt;

&lt;p&gt;既然Epoll相比select这么好，那么用起来如何呢？会不会很繁琐啊…先看看下面的三个函数吧，就知道Epoll的易用了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int epoll_create(int size);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;生成一个Epoll专用的文件描述符，其实是申请一个内核空间，用来存放你想关注的socket fd上是否发生以及发生了什么事件。size就是你在这个Epoll fd上能关注的最大socket fd数，大小自定，只要内存足够。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;epoll的事件注册函数，它不同与select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EPOLL_CTL_ADD：注册新的fd到epfd中；&lt;/li&gt;
  &lt;li&gt;EPOLL_CTL_MOD：修改已经注册的fd的监听事件；&lt;/li&gt;
  &lt;li&gt;EPOLL_CTL_DEL：从epfd中删除一个fd；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第三个参数是需要监听的fd，第四个参数是告诉内核需要监听什么事&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int epoll_wait(int epfd,struct epoll_event * events,int maxevents,int timeout);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;等待I/O事件的发生；参数说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;epfd:由epoll_create() 生成的Epoll专用的文件描述符；&lt;/li&gt;
  &lt;li&gt;epoll_event:用于回传代处理事件的数组；&lt;/li&gt;
  &lt;li&gt;maxevents:每次能处理的事件数；&lt;/li&gt;
  &lt;li&gt;timeout:等待I/O事件发生的超时值；&lt;/li&gt;
  &lt;li&gt;返回发生事件数。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;##测试程序
首先对服务端和客户端做下说明：
我想实现的是客户端和服务端并发的程序，客户端通过配置并发数，说明有多少个用户去连接服务端。
客户端会发送消息：”Client: i send message Hello Server!”，其中i表示哪一个客户端；收到消息：”Recv Server Msg Content:%s\n”。
例如：
发送：Client: 1 send message “Hello Server!”
接收：Recv Derver Msg Content:Hello, client fd: 6
服务端收到后给客户端回复消息：”Hello, client fd: i”，其中i表示服务端接收的fd,用户区别是哪一个客户端。接收客户端消息：”Terminal Received Msg Content:%s\n”
例如：
发送：Hello, client fd: 6
接收：Terminal Received Msg Content:Client: 1 send message “Hello Server!”
备注：这里在接收到消息后，直接打印出消息，如果需要对消息进行处理（如果消息处理比较占用时间，不能立即返回，可以将该消息放入一个队列中，然后开启一个线程从队列中取消息进行处理，这样的话不会因为消息处理而阻塞epoll）。libenent好像对这种有2中处理方式，一个就是回调，要求回调函数，不占用太多的时间，基本能立即返回，另一种好像也是一个队列实现的，这个还需要研究。
服务端代码说明：
服务端在绑定监听后，开启了一个线程，用于负责接收客户端连接，加入到epoll中，这样只要accept到客户端的连接，就将其add EPOLLIN到epoll中，然后进入循环调用epoll_wait，监听到读事件，接收数据，并将事件修改为EPOLLOUT；反之监听到写事件，发送数据，并将事件修改为EPOLLIN。
&lt;strong&gt;服务器代码：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//cepollserver.h  
#ifndef  C_EPOLL_SERVER_H  
#define  C_EPOLL_SERVER_H  
  
#include &amp;lt;sys/epoll.h&amp;gt;  
#include &amp;lt;sys/socket.h&amp;gt;  
#include &amp;lt;netinet/in.h&amp;gt;  
#include &amp;lt;fcntl.h&amp;gt;  
#include &amp;lt;arpa/inet.h&amp;gt;  
#include &amp;lt;stdio.h&amp;gt;  
#include &amp;lt;stdlib.h&amp;gt;  
#include &amp;lt;iostream&amp;gt;  
#include &amp;lt;pthread.h&amp;gt;  
  
#define _MAX_SOCKFD_COUNT 65535  
  
class CEpollServer  
{  
        public:  
                CEpollServer();  
                ~CEpollServer();  
  
                bool InitServer(const char* chIp, int iPort);  
                void Listen();  
                static void ListenThread( void* lpVoid );  
                void Run();  
  
        private:  
                int        m_iEpollFd;  
                int        m_isock;  
                pthread_t       m_ListenThreadId;// 监听线程句柄  
  
};  
  
#endif  

   #include &quot;cepollserver.h&quot;  
  
using namespace std;  
  
CEpollServer::CEpollServer()  
{  
}  
  
CEpollServer::~CEpollServer()  
{  
    close(m_isock);  
}  
  
bool CEpollServer::InitServer(const char* pIp, int iPort)  
{  
    m_iEpollFd = epoll_create(_MAX_SOCKFD_COUNT);  
  
    //设置非阻塞模式  
    int opts = O_NONBLOCK;  
    if(fcntl(m_iEpollFd,F_SETFL,opts)&amp;lt;0)  
    {  
        printf(&quot;设置非阻塞模式失败!\n&quot;);  
        return false;  
    }  
  
    m_isock = socket(AF_INET,SOCK_STREAM,0);  
    if ( 0 &amp;gt; m_isock )  
    {  
        printf(&quot;socket error!\n&quot;);  
        return false;  
　　}  
　　  
　　sockaddr_in listen_addr;  
　　    listen_addr.sin_family=AF_INET;  
　　    listen_addr.sin_port=htons ( iPort );  
　　    listen_addr.sin_addr.s_addr=htonl(INADDR_ANY);  
　　    listen_addr.sin_addr.s_addr=inet_addr(pIp);  
　　  
　　    int ireuseadd_on = 1;//支持端口复用  
　　    setsockopt(m_isock, SOL_SOCKET, SO_REUSEADDR, &amp;amp;ireuseadd_on, sizeof(ireuseadd_on) );  
　　  
　　    if ( bind ( m_isock, ( sockaddr * ) &amp;amp;listen_addr,sizeof ( listen_addr ) ) !=0 )  
　　    {  
　　        printf(&quot;bind error\n&quot;);  
　　        return false;  
　　    }  
　　  
　　    if ( listen ( m_isock, 20) &amp;lt;0 )  
　　    {  
　　        printf(&quot;listen error!\n&quot;);  
　　        return false;  
　　    }  
　　    else  
　　    {  
　　        printf(&quot;服务端监听中...\n&quot;);  
　　    }  
　　  
　　    // 监听线程，此线程负责接收客户端连接，加入到epoll中  
　　    if ( pthread_create( &amp;amp;m_ListenThreadId, 0, ( void * ( * ) ( void * ) ) ListenThread, this ) != 0 )  
　　    {  
　　        printf(&quot;Server 监听线程创建失败!!!&quot;);  
　　        return false;  
　　    }  
　　}  
　　// 监听线程  
　　void CEpollServer::ListenThread( void* lpVoid )  
　　{  
　　    CEpollServer *pTerminalServer = (CEpollServer*)lpVoid;  
　　    sockaddr_in remote_addr;  
　　    int len = sizeof (remote_addr);  
　　    while ( true )  
　　    {  
　　        int client_socket = accept (pTerminalServer-&amp;gt;m_isock, ( sockaddr * ) &amp;amp;remote_addr,(socklen_t*)&amp;amp;len );  
　　        if ( client_socket &amp;lt; 0 )  
　　        {  
　　            printf(&quot;Server Accept失败!, client_socket: %d\n&quot;, client_socket);  
　　            continue;  
　　        }  
　　        else  
　　        {  
　　            struct epoll_event    ev;  
　　            ev.events = EPOLLIN | EPOLLERR | EPOLLHUP;  
　　            ev.data.fd = client_socket;     //记录socket句柄  
　　            epoll_ctl(pTerminalServer-&amp;gt;m_iEpollFd, EPOLL_CTL_ADD, client_socket, &amp;amp;ev);  
　　        }  
　　    }  
　　}  
　　  
　　void CEpollServer::Run()  
　　{  
　　    while ( true )  
　　    {  
　　        struct epoll_event    events[_MAX_SOCKFD_COUNT];  
　　        int nfds = epoll_wait( m_iEpollFd, events,  _MAX_SOCKFD_COUNT, -1 );  
　　        for (int i = 0; i &amp;lt; nfds; i++)  
　　        {  
　　            int client_socket = events[i].data.fd;  
　　            char buffer[1024];//每次收发的字节数小于1024字节  
　　            memset(buffer, 0, 1024);  
　　            if (events[i].events &amp;amp; EPOLLIN)//监听到读事件，接收数据  
　　            {  
　　                int rev_size = recv(events[i].data.fd,buffer, 1024,0);  
　　                if( rev_size &amp;lt;= 0 )  
　　                {  
　　                    cout &amp;lt;&amp;lt; &quot;recv error: recv size: &quot; &amp;lt;&amp;lt; rev_size &amp;lt;&amp;lt; endl;  
　　                    struct epoll_event event_del;  
　　                    event_del.data.fd = events[i].data.fd;  
　　                    event_del.events = 0;  
　　                    epoll_ctl(m_iEpollFd, EPOLL_CTL_DEL, event_del.data.fd, &amp;amp;event_del);  
　　                }  
　　                else  
　　                {  
　　                    printf(&quot;Terminal Received Msg Content:%s\n&quot;,buffer);  
　　                    struct epoll_event    ev;  
　　                    ev.events = EPOLLOUT | EPOLLERR | EPOLLHUP;  
　　                    ev.data.fd = client_socket;     //记录socket句柄  
　　                    epoll_ctl(m_iEpollFd, EPOLL_CTL_MOD, client_socket, &amp;amp;ev);  
　　                }  
　　            }  
　　else if(events[i].events &amp;amp; EPOLLOUT)//监听到写事件，发送数据  
　　            {  
　　                char sendbuff[1024];  
　　                sprintf(sendbuff, &quot;Hello, client fd: %d\n&quot;, client_socket);  
　　                int sendsize = send(client_socket, sendbuff, strlen(sendbuff)+1, MSG_NOSIGNAL);  
　　                if(sendsize &amp;lt;= 0)  
　　                {  
　　                    struct epoll_event event_del;  
　　                    event_del.data.fd = events[i].data.fd;  
　　                    event_del.events = 0;  
　　                    epoll_ctl(m_iEpollFd, EPOLL_CTL_DEL, event_del.data.fd, &amp;amp;event_del);  
　　                }  
　　                else  
　　                {  
　　                    printf(&quot;Server reply msg ok! buffer: %s\n&quot;, sendbuff);  
　　                    struct epoll_event    ev;  
　　                    ev.events = EPOLLIN | EPOLLERR | EPOLLHUP;  
　　                    ev.data.fd = client_socket;     //记录socket句柄  
　　                    epoll_ctl(m_iEpollFd, EPOLL_CTL_MOD, client_socket, &amp;amp;ev);  
　　                }  
　　            }  
　　            else  
　　            {  
　　                cout &amp;lt;&amp;lt; &quot;EPOLL ERROR\n&quot; &amp;lt;&amp;lt;endl;  
　　                epoll_ctl(m_iEpollFd, EPOLL_CTL_DEL, events[i].data.fd, &amp;amp;events[i]);  
　　            }  
　　        }  
　　    }  
　　}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;客户端代码：&lt;/strong&gt;
说明：测试是两个并发进行测试，每一个客户端都是一个长连接。代码中在连接服务器（ConnectToServer）时将用户ID和socketid关联起来。用户ID和socketid是一一对应的关系。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    #ifndef _DEFINE_EPOLLCLIENT_H_  
    #define _DEFINE_EPOLLCLIENT_H_  
    #define _MAX_SOCKFD_COUNT 65535  
      
    #include&amp;lt;iostream&amp;gt;  
    #include &amp;lt;sys/epoll.h&amp;gt;  
    #include &amp;lt;sys/socket.h&amp;gt;  
    #include &amp;lt;netinet/in.h&amp;gt;  
    #include &amp;lt;fcntl.h&amp;gt;  
    #include &amp;lt;arpa/inet.h&amp;gt;  
    #include &amp;lt;errno.h&amp;gt;  
    #include &amp;lt;sys/ioctl.h&amp;gt;  
    #include &amp;lt;sys/time.h&amp;gt;  
    #include &amp;lt;string&amp;gt;  
      
    using namespace std;  
      
    /** 
     * @brief 用户状态 
     */  
    typedef enum _EPOLL_USER_STATUS_EM  
    {  
            FREE = 0,  
            CONNECT_OK = 1,//连接成功  
            SEND_OK = 2,//发送成功  
            RECV_OK = 3,//接收成功  
    }EPOLL_USER_STATUS_EM;  
      
    /*@brief 
     *@CEpollClient class 用户状态结构体 
     */  
    struct UserStatus  
    {  
            EPOLL_USER_STATUS_EM iUserStatus;//用户状态  
            int iSockFd;//用户状态关联的socketfd  
            char cSendbuff[1024];//发送的数据内容  
            int iBuffLen;//发送数据内容的长度  
            unsigned int uEpollEvents;//Epoll events  
    };  
      
    class CEpollClient  
    {  
            public:  
      
                    /** 
                     * @brief 
                     * 函数名:CEpollClient 
                     * 描述:构造函数 
                     * @param [in] iUserCount  
                     * @param [in] pIP IP地址 
                     * @param [in] iPort 端口号 
                     * @return 无返回 
                     */  
                    CEpollClient(int iUserCount, const char* pIP, int iPort);  
      
    /** 
                     * @brief 
                     * 函数名:CEpollClient 
                     * 描述:析构函数 
                     * @return 无返回 
                     */  
                    ~CEpollClient();  
      
                    /** 
                     * @brief 
                     * 函数名:RunFun 
                     * 描述:对外提供的接口，运行epoll类 
                     * @return 无返回值 
                     */  
                    int RunFun();  
      
            private:  
      
                    /** 
                     * @brief 
                     * 函数名:ConnectToServer 
                     * 描述:连接到服务器 
                     * @param [in] iUserId 用户ID 
                     * @param [in] pServerIp 连接的服务器IP 
                     * @param [in] uServerPort 连接的服务器端口号 
                     * @return 成功返回socketfd,失败返回的socketfd为-1 
                     */  
                    int ConnectToServer(int iUserId,const char *pServerIp,unsigned short uServerPort);  
      
    /** 
                     * @brief 
                     * 函数名:SendToServerData 
                     * 描述:给服务器发送用户(iUserId)的数据 
                     * @param [in] iUserId 用户ID 
                     * @return 成功返回发送数据长度 
                     */  
                    int SendToServerData(int iUserId);  
      
                    /** 
                     * @brief 
                     * 函数名:RecvFromServer 
                     * 描述:接收用户回复消息 
                     * @param [in] iUserId 用户ID 
                     * @param [in] pRecvBuff 接收的数据内容 
                     * @param [in] iBuffLen 接收的数据长度 
                     * @return 成功返回接收的数据长度，失败返回长度为-1 
                     */  
                    int RecvFromServer(int iUserid,char *pRecvBuff,int iBuffLen);  
      
                    /** 
                     * @brief 
                     * 函数名:CloseUser 
                     * 描述:关闭用户 
                     * @param [in] iUserId 用户ID 
                     * @return 成功返回true 
                     */  
                    bool CloseUser(int iUserId);  
      
    /** 
                     * @brief 
                     * 函数名:DelEpoll 
                     * 描述:删除epoll事件 
                     * @param [in] iSockFd socket FD 
                     * @return 成功返回true 
                     */  
                    bool DelEpoll(int iSockFd);  
            private:  
      
                    int    m_iUserCount;//用户数量；  
                    struct UserStatus *m_pAllUserStatus;//用户状态数组  
                    int    m_iEpollFd;//需要创建epollfd  
                    int    m_iSockFd_UserId[_MAX_SOCKFD_COUNT];//将用户ID和socketid关联起来  
                    int    m_iPort;//端口号  
                    char   m_ip[100];//IP地址  
    };  
      
    #endif  
    #include &quot;cepollclient.h&quot;  
  
CEpollClient::CEpollClient(int iUserCount, const char* pIP, int iPort)  
{  
    strcpy(m_ip, pIP);  
    m_iPort = iPort;  
    m_iUserCount = iUserCount;  
    m_iEpollFd = epoll_create(_MAX_SOCKFD_COUNT);  
    m_pAllUserStatus = (struct UserStatus*)malloc(iUserCount*sizeof(struct UserStatus));  
    for(int iuserid=0; iuserid&amp;lt;iUserCount ; iuserid++)  
    {  
        m_pAllUserStatus[iuserid].iUserStatus = FREE;  
        sprintf(m_pAllUserStatus[iuserid].cSendbuff, &quot;Client: %d send message \&quot;Hello Server!\&quot;\r\n&quot;, iuserid);  
        m_pAllUserStatus[iuserid].iBuffLen = strlen(m_pAllUserStatus[iuserid].cSendbuff) + 1;  
        m_pAllUserStatus[iuserid].iSockFd = -1;  
    }  
    memset(m_iSockFd_UserId, 0xFF, sizeof(m_iSockFd_UserId));  
}  
  
CEpollClient::~CEpollClient()  
{  
    free(m_pAllUserStatus);  
}  
int CEpollClient::ConnectToServer(int iUserId,const char *pServerIp,unsigned short uServerPort)  
{  
    if( (m_pAllUserStatus[iUserId].iSockFd = socket(AF_INET,SOCK_STREAM,0) ) &amp;lt; 0 )  
    {  
        cout &amp;lt;&amp;lt;&quot;[CEpollClient error]: init socket fail, reason is:&quot;&amp;lt;&amp;lt;strerror(errno)&amp;lt;&amp;lt;&quot;,errno is:&quot;&amp;lt;&amp;lt;errno&amp;lt;&amp;lt;endl;  
        m_pAllUserStatus[iUserId].iSockFd = -1;  
        return  m_pAllUserStatus[iUserId].iSockFd;  
    }  
  
    struct sockaddr_in addr;  
    bzero(&amp;amp;addr, sizeof(addr));  
    addr.sin_family = AF_INET;  
    addr.sin_port = htons(uServerPort);  
    addr.sin_addr.s_addr = inet_addr(pServerIp);  
  
    int ireuseadd_on = 1;//支持端口复用  
    setsockopt(m_pAllUserStatus[iUserId].iSockFd, SOL_SOCKET, SO_REUSEADDR, &amp;amp;ireuseadd_on, sizeof(ireuseadd_on));  
  
    unsigned long ul = 1;  
    ioctl(m_pAllUserStatus[iUserId].iSockFd, FIONBIO, &amp;amp;ul); //设置为非阻塞模式  
  
    connect(m_pAllUserStatus[iUserId].iSockFd, (const sockaddr*)&amp;amp;addr, sizeof(addr));  
    m_pAllUserStatus[iUserId].iUserStatus = CONNECT_OK;  
    m_pAllUserStatus[iUserId].iSockFd = m_pAllUserStatus[iUserId].iSockFd;  
  
    return m_pAllUserStatus[iUserId].iSockFd;  
}  
int CEpollClient::SendToServerData(int iUserId)  
{  
    sleep(1);//此处控制发送频率，避免狂打日志，正常使用中需要去掉  
    int isendsize = -1;  
    if( CONNECT_OK == m_pAllUserStatus[iUserId].iUserStatus || RECV_OK == m_pAllUserStatus[iUserId].iUserStatus)  
    {  
        isendsize = send(m_pAllUserStatus[iUserId].iSockFd, m_pAllUserStatus[iUserId].cSendbuff, m_pAllUserStatus[iUserId  
].iBuffLen, MSG_NOSIGNAL);  
        if(isendsize &amp;lt; 0)  
        {  
            cout &amp;lt;&amp;lt;&quot;[CEpollClient error]: SendToServerData, send fail, reason is:&quot;&amp;lt;&amp;lt;strerror(errno)&amp;lt;&amp;lt;&quot;,errno is:&quot;&amp;lt;&amp;lt;errno&amp;lt;  
&amp;lt;endl;  
        }  
        else  
        {  
            printf(&quot;[CEpollClient info]: iUserId: %d Send Msg Content:%s\n&quot;, iUserId, m_pAllUserStatus[iUserId].cSendbuff  
);  
            m_pAllUserStatus[iUserId].iUserStatus = SEND_OK;  
        }  
    }  
    return isendsize;  
}  
int CEpollClient::RecvFromServer(int iUserId,char *pRecvBuff,int iBuffLen)  
{  
    int irecvsize = -1;  
    if(SEND_OK == m_pAllUserStatus[iUserId].iUserStatus)  
    {  
        irecvsize = recv(m_pAllUserStatus[iUserId].iSockFd, pRecvBuff, iBuffLen, 0);  
        if(0 &amp;gt; irecvsize)  
        {  
            cout &amp;lt;&amp;lt;&quot;[CEpollClient error]: iUserId: &quot; &amp;lt;&amp;lt; iUserId &amp;lt;&amp;lt; &quot;RecvFromServer, recv fail, reason is:&quot;&amp;lt;&amp;lt;strerror(errn  
o)&amp;lt;&amp;lt;&quot;,errno is:&quot;&amp;lt;&amp;lt;errno&amp;lt;&amp;lt;endl;  
        }  
        else if(0 == irecvsize)  
        {  
            cout &amp;lt;&amp;lt;&quot;[warning:] iUserId: &quot;&amp;lt;&amp;lt; iUserId &amp;lt;&amp;lt; &quot;RecvFromServer, STB收到数据为0，表示对方断开连接,irecvsize:&quot;&amp;lt;&amp;lt;ire  
cvsize&amp;lt;&amp;lt;&quot;,iSockFd:&quot;&amp;lt;&amp;lt; m_pAllUserStatus[iUserId].iSockFd &amp;lt;&amp;lt; endl;  
        }  
        else  
        {  
            printf(&quot;Recv Server Msg Content:%s\n&quot;, pRecvBuff);  
            m_pAllUserStatus[iUserId].iUserStatus = RECV_OK;  
        }  
    }  
    return irecvsize;  
}  
  
bool CEpollClient::CloseUser(int iUserId)  
{  
    close(m_pAllUserStatus[iUserId].iSockFd);  
    m_pAllUserStatus[iUserId].iUserStatus = FREE;  
    m_pAllUserStatus[iUserId].iSockFd = -1;  
    return true;  
}  
      
int CEpollClient::RunFun()  
{  
    int isocketfd = -1;  
    for(int iuserid=0; iuserid&amp;lt;m_iUserCount; iuserid++)  
    {  
        struct epoll_event event;  
        isocketfd = ConnectToServer(iuserid, m_ip, m_iPort);  
        if(isocketfd &amp;lt; 0)  
            cout &amp;lt;&amp;lt;&quot;[CEpollClient error]: RunFun, connect fail&quot; &amp;lt;&amp;lt;endl;  
        m_iSockFd_UserId[isocketfd] = iuserid;//将用户ID和socketid关联起来  
  
        event.data.fd = isocketfd;  
        event.events = EPOLLIN|EPOLLOUT|EPOLLERR|EPOLLHUP;  
  
        m_pAllUserStatus[iuserid].uEpollEvents = event.events;  
        epoll_ctl(m_iEpollFd, EPOLL_CTL_ADD, event.data.fd, &amp;amp;event);  
　　}  
　　while(1)  
　　    {  
　　        struct epoll_event events[_MAX_SOCKFD_COUNT];  
　　        char buffer[1024];  
　　        memset(buffer,0,1024);  
　　        int nfds = epoll_wait(m_iEpollFd, events, _MAX_SOCKFD_COUNT, 100 );//等待epoll事件的产生  
　　        for (int ifd=0; ifd&amp;lt;nfds; ifd++)//处理所发生的所有事件  
　　        {  
　　            struct epoll_event event_nfds;  
　　            int iclientsockfd = events[ifd].data.fd;  
　　            cout &amp;lt;&amp;lt; &quot;events[ifd].data.fd: &quot; &amp;lt;&amp;lt; events[ifd].data.fd &amp;lt;&amp;lt; endl;  
　　            int iuserid = m_iSockFd_UserId[iclientsockfd];//根据socketfd得到用户ID  
　　            if( events[ifd].events &amp;amp; EPOLLOUT )  
　　            {  
　　                int iret = SendToServerData(iuserid);  
　　                if( 0 &amp;lt; iret )  
　　                {  
　　                    event_nfds.events = EPOLLIN|EPOLLERR|EPOLLHUP;  
　　                    event_nfds.data.fd = iclientsockfd;  
　　                    epoll_ctl(m_iEpollFd, EPOLL_CTL_MOD, event_nfds.data.fd, &amp;amp;event_nfds);  
　　                }  
　　                else  
　　                {  
　　                    cout &amp;lt;&amp;lt;&quot;[CEpollClient error:] EpollWait, SendToServerData fail, send iret:&quot;&amp;lt;&amp;lt;iret&amp;lt;&amp;lt;&quot;,iuserid:&quot;&amp;lt;&amp;lt;iuser  
　　id&amp;lt;&amp;lt;&quot;,fd:&quot;&amp;lt;&amp;lt;events[ifd].data.fd&amp;lt;&amp;lt;endl;  
　　                    DelEpoll(events[ifd].data.fd);  
　　                    CloseUser(iuserid);  
　　                }  
　　            }  
　　else if( events[ifd].events &amp;amp; EPOLLIN )//监听到读事件，接收数据  
　　            {  
　　                int ilen = RecvFromServer(iuserid, buffer, 1024);  
　　                if(0 &amp;gt; ilen)  
　　                {  
　　                    cout &amp;lt;&amp;lt;&quot;[CEpollClient error]: RunFun, recv fail, reason is:&quot;&amp;lt;&amp;lt;strerror(errno)&amp;lt;&amp;lt;&quot;,errno is:&quot;&amp;lt;&amp;lt;errno&amp;lt;&amp;lt;e  
　　ndl;  
　　                    DelEpoll(events[ifd].data.fd);  
　　                    CloseUser(iuserid);  
　　                }  
　　                else if(0 == ilen)  
　　                {  
　　                    cout &amp;lt;&amp;lt;&quot;[CEpollClient warning:] server disconnect,ilen:&quot;&amp;lt;&amp;lt;ilen&amp;lt;&amp;lt;&quot;,iuserid:&quot;&amp;lt;&amp;lt;iuserid&amp;lt;&amp;lt;&quot;,fd:&quot;&amp;lt;&amp;lt;events[  
　　ifd].data.fd&amp;lt;&amp;lt;endl;  
　　                    DelEpoll(events[ifd].data.fd);  
　　                    CloseUser(iuserid);  
　　                }  
　　                else  
　　                {  
　　                    m_iSockFd_UserId[iclientsockfd] = iuserid;//将socketfd和用户ID关联起来  
　　                    event_nfds.data.fd = iclientsockfd;  
　　                    event_nfds.events = EPOLLOUT|EPOLLERR|EPOLLHUP;  
　　                    epoll_ctl(m_iEpollFd, EPOLL_CTL_MOD, event_nfds.data.fd, &amp;amp;event_nfds);  
　　                }  
　　            }  
　　            else  
　　            {  
　　                cout &amp;lt;&amp;lt;&quot;[CEpollClient error:] other epoll error&quot;&amp;lt;&amp;lt;endl;  
　　                DelEpoll(events[ifd].data.fd);  
　　                CloseUser(iuserid);  
　　            }  
　　        }  
　　}  
　　}  
　　  
　　bool CEpollClient::DelEpoll(int iSockFd)  
　　{  
　　    bool bret = false;  
　　    struct epoll_event event_del;  
　　    if(0 &amp;lt; iSockFd)  
　　    {  
　　        event_del.data.fd = iSockFd;  
　　        event_del.events = 0;  
　　        if( 0 == epoll_ctl(m_iEpollFd, EPOLL_CTL_DEL, event_del.data.fd, &amp;amp;event_del) )  
　　        {  
　　            bret = true;  
　　        }  
　　        else  
　　        {  
　　            cout &amp;lt;&amp;lt;&quot;[SimulateStb error:] DelEpoll,epoll_ctl error,iSockFd:&quot;&amp;lt;&amp;lt;iSockFd&amp;lt;&amp;lt;endl;  
　　        }  
　　        m_iSockFd_UserId[iSockFd] = -1;  
　　    }  
　　    else  
　　    {  
　　        bret = true;  
　　  
　　    }  
　　    return bret;  
　　}  
　　 服务器主程序：

#include &amp;lt;iostream&amp;gt;  
#include &quot;cepollserver.h&quot;  
  
using namespace std;  
  
int main()  
{  
        CEpollServer  theApp;  
        theApp.InitServer(&quot;127.0.0.1&quot;, 8000);  
        theApp.Run();  
  
        return 0;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;客户端主程序：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    　#include &quot;cepollclient.h&quot;  
  
int main(int argc, char *argv[])  
{  
        CEpollClient *pCEpollClient = new CEpollClient(2, &quot;127.0.0.1&quot;, 8000);  
        if(NULL == pCEpollClient)  
        {  
                cout&amp;lt;&amp;lt;&quot;[epollclient error]:main init&quot;&amp;lt;&amp;lt;&quot;Init CEpollClient fail&quot;&amp;lt;&amp;lt;endl;  
        }  
  
        pCEpollClient-&amp;gt;RunFun();  
  
        if(NULL != pCEpollClient)  
        {  
                delete pCEpollClient;  
                pCEpollClient = NULL;  
        }  
  
        return 0;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>java编程的78条黄金法则</title>
   <link href="http://http://coolshell.info/blog/2014/08/78-golden-rules-of-the-java-programming.html"/>
   <updated>2014-08-16T00:00:00+00:00</updated>
   <id>/blog/2014/08/78-golden-rules-of-the-java-programming</id>
   <content type="html">&lt;p&gt;整理自网络，如果你知道原作者，请通知我。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;创建和销毁对象&lt;/h2&gt;

&lt;p&gt;1、考虑用静态工厂方法（返回类的实例的静态方法）代替构造器&lt;br /&gt;
2、遇到多个构造器参数时要考虑用构造器&lt;br /&gt;
3、用私有构造器或者枚举类型强化Singleton属性&lt;br /&gt;
4、通过私有构造器强化不可实例化的能力&lt;br /&gt;
5、避免创建不必要的对象&lt;br /&gt;
6、消除过期的对象引用&lt;br /&gt;
7、避免使用终结（final）方法&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;对于所有对象都通用的方法&lt;/h2&gt;

&lt;p&gt;8、覆盖equals时请遵守通用约定&lt;br /&gt;
9、覆盖equals时总要覆盖hashCode&lt;br /&gt;
10、始终要覆盖toString&lt;br /&gt;
11、谨慎地覆盖clone&lt;br /&gt;
12、考虑实现Comparable接口&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;类和接口&lt;/h2&gt;

&lt;p&gt;13、使类和成员的可访问性最小化&lt;br /&gt;
14、在公有类中使用访问方法而非公有域&lt;br /&gt;
15、使可变性最小化&lt;br /&gt;
16、复合优于继承&lt;br /&gt;
17、要么为继承为设计，并提供文档说明，要么就禁止继承&lt;br /&gt;
18、接口优于抽象类&lt;br /&gt;
19、接口只用于定义类型&lt;br /&gt;
20、类层次优于标签类&lt;br /&gt;
21、用函数对象表示策略&lt;br /&gt;
22、优先考虑静态成员类&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;泛型&lt;/h2&gt;

&lt;p&gt;23、不要在新代码中采用原生态类型&lt;br /&gt;
24、消除非受检警告&lt;br /&gt;
25、列表优先于数组&lt;br /&gt;
26、优先考虑泛型&lt;br /&gt;
27、优先考虑泛型方法&lt;br /&gt;
28、采用有限制通配符来提升API的灵活性&lt;br /&gt;
29、优先考虑类型安全的异构造器&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;枚举和注解&lt;/h2&gt;

&lt;p&gt;30、用enum带起int常量&lt;br /&gt;
31、用实例域代替序数&lt;br /&gt;
32、用EnumSet代替位域&lt;br /&gt;
33、用EnumMap代替序数索引&lt;br /&gt;
34、用接口模拟可伸缩的枚举&lt;br /&gt;
35、注解优先于命名模式&lt;br /&gt;
36、坚持使用Override注解&lt;br /&gt;
37、用标记接口定义类型&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;方法&lt;/h2&gt;

&lt;p&gt;38、检查参数的有效性&lt;br /&gt;
39、必要时进行保护性拷贝&lt;br /&gt;
40、谨慎设计方法签名&lt;br /&gt;
41、慎用重载&lt;br /&gt;
42、慎用可变参数&lt;br /&gt;
43、返回零长度的数组或者集合，而不是null&lt;br /&gt;
44、为所有导出的API元素编写文档注释&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;通用程序设计&lt;/h2&gt;

&lt;p&gt;45、将局部变量的作用域最小化&lt;br /&gt;
46、for-each循环优先于传统的for循环&lt;br /&gt;
47、了解和使用类库&lt;br /&gt;
48、如果需要精确的答案，请避免使用float和double&lt;br /&gt;
49、基本类型优先于装箱基本类型&lt;br /&gt;
50、如果其他类型更适合，则尽量避免使用字符串&lt;br /&gt;
51、当心字符串链接的性能&lt;br /&gt;
52、通过接口引用对象&lt;br /&gt;
53、接口优先于反射机制&lt;br /&gt;
54、谨慎使用本地方法&lt;br /&gt;
55、谨慎进行优化&lt;br /&gt;
56、遵守普遍接受的命名惯例&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;异常&lt;/h2&gt;

&lt;p&gt;57、只针对异常的情况才使用异常&lt;br /&gt;
58、对可恢复的情况使用受检异常，对编程错误使用运行时异常&lt;br /&gt;
59、避免不必要地使用受检的异常&lt;br /&gt;
60、优先使用标准的异常&lt;br /&gt;
61、抛出与抽象相对应的异常&lt;br /&gt;
62、每个方法抛出的异常都要有文档&lt;br /&gt;
63、在细节消息中包含捕获失败的信息&lt;br /&gt;
64、努力使失败包含原子性&lt;br /&gt;
65、不要忽略异常&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;并发&lt;/h2&gt;

&lt;p&gt;66、同步访问共享的可变数据&lt;br /&gt;
67、避免过度同步&lt;br /&gt;
68、executor和task优先于线程&lt;br /&gt;
69、并发工具优先于wait和notify&lt;br /&gt;
70、线程安全性的文档化&lt;br /&gt;
71、慎用延迟初始化&lt;br /&gt;
72、不要依赖于线程调度器&lt;br /&gt;
73、避免使用线程组&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;序列化&lt;/h2&gt;

&lt;p&gt;74、谨慎的实现Seriallizable接口&lt;br /&gt;
75、考虑使用自定义的序列化形式&lt;br /&gt;
76、保护性的编写readObject方法&lt;br /&gt;
77、对于实例控制，枚举类型优先于readResolve&lt;br /&gt;
78、考虑用序列化代理代替序列化实例&lt;br /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>java并发和多线程</title>
   <link href="http://http://coolshell.info/blog/2014/08/java-multithread.html"/>
   <updated>2014-08-02T00:00:00+00:00</updated>
   <id>/blog/2014/08/java-multithread</id>
   <content type="html">&lt;p&gt;注：本文的内容翻译自&lt;a href=&quot;http://tutorials.jenkov.com/java-concurrency/deadlock.html&quot;&gt;http://tutorials.jenkov.com/java-concurrency/deadlock.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在过去单CPU时代，单任务在一个时间点只能执行单一程序。之后发展到多任务阶段，计算机能在同一时间点并行执行多任务或多进程。虽然并不是真正意义上的“同一时间点”，而是多个任务或进程共享一个CPU，并交由操作系统来完成多任务间对CPU的运行切换，以使得每个任务都有机会获得一定的时间片运行。&lt;/p&gt;

&lt;p&gt;随着多任务对软件开发者带来的新挑战，程序不在能假设独占所有的CPU时间、所有的内存和其他计算机资源。一个好的程序榜样是在其不再使用这些资源时对其进行释放，以使得其他程序能有机会使用这些资源。&lt;/p&gt;

&lt;p&gt;再后来发展到多线程技术，使得在一个程序内部能拥有多个线程并行执行。一个线程的执行可以被认为是一个CPU在执行该程序。当一个程序运行在多线程下，就好像有多个CPU在同时执行该程序。&lt;/p&gt;

&lt;p&gt;多线程比多任务更加有挑战。多线程是在同一个程序内部并行执行，因此会对相同的内存空间进行并发读写操作。这可能是在单线程程序中从来不会遇到的问题。其中的一些错误也未必会在单CPU机器上出现，因为两个线程从来不会得到真正的并行执行。然而，更现代的计算机伴随着多核CPU的出现，也就意味着不同的线程能被不同的CPU核得到真正意义的并行执行。
本文将会介绍java多线程编程的一些要点：
##如何创建并运行java线程
###创建Thread的子类&lt;/p&gt;

&lt;p&gt;创建Thread子类的一个实例并重写run方法，run方法会在调用start()方法之后被执行。例子如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyThread extends Thread {
   public void run(){
     System.out.println(&quot;MyThread running&quot;);
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以用如下方式创建并运行上述Thread子类&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MyThread myThread = new MyThread();
myTread.start();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一旦线程启动后start方法就会立即返回，而不会等待到run方法执行完毕才返回。就好像run方法是在另外一个cpu上执行一样。当run方法执行后，将会打印出字符串MyThread running。&lt;/p&gt;

&lt;p&gt;你也可以如下创建一个Thread的匿名子类：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Thread thread = new Thread(){
   public void run(){
     System.out.println(&quot;Thread Running&quot;);
   }
};
thread.start();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当新的线程的run方法执行以后，计算机将会打印出字符串”Thread Running”。
###实现Runnable接口&lt;/p&gt;

&lt;p&gt;第二种编写线程执行代码的方式是新建一个实现了java.lang.Runnable接口的类的实例，实例中的方法可以被线程调用。下面给出例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyRunnable implements Runnable {
   public void run(){
    System.out.println(&quot;MyRunnable running&quot;);
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;为了使线程能够执行run()方法，需要在Thread类的构造函数中传入 MyRunnable的实例对象。示例如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Thread thread = new Thread(new MyRunnable());
thread.start(); 当线程运行时，它将会调用实现了Runnable接口的run方法。上例中将会打印出”MyRunnable running”。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同样，也可以创建一个实现了Runnable接口的匿名类，如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Runnable myRunnable = new Runnable(){
   public void run(){
     System.out.println(&quot;Runnable running&quot;);
   }
}
Thread thread = new Thread(myRunnable);
thread.start();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##java同步块
ava中的同步块用synchronized标记。同步块在Java中是同步在某个对象上。所有同步在一个对象上的同步块在同时只能被一个线程进入并执行操作。所有其他等待进入该同步块的线程将被阻塞，直到执行该同步块中的线程退出。&lt;/p&gt;

&lt;p&gt;有四种不同的同步块：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;实例方法&lt;/li&gt;
  &lt;li&gt;静态方法&lt;/li&gt;
  &lt;li&gt;实例方法中的同步块&lt;/li&gt;
  &lt;li&gt;静态方法中的同步块&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上述同步块都同步在不同对象上。实际需要那种同步块视具体情况而定。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实例方法同步&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下面是一个同步的实例方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public synchronized void add(int value){
this.count += value;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意在方法声明中同步（synchronized ）关键字。这告诉Java该方法是同步的。&lt;/p&gt;

&lt;p&gt;Java实例方法同步是同步在拥有该方法的对象上。这样，每个实例其方法同步都同步在不同的对象上，即该方法所属的实例。只有一个线程能够在实例方法同步块中运行。如果有多个实例存在，那么一个线程一次可以在一个实例同步块中执行操作。一个实例一个线程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;静态方法同步&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;静态方法同步和实例方法同步方法一样，也使用synchronized 关键字。Java静态方法同步如下示例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static synchronized void add(int value){
 count += value;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同样，这里synchronized 关键字告诉Java这个方法是同步的。&lt;/p&gt;

&lt;p&gt;静态方法的同步是指同步在该方法所在的类对象上。因为在Java虚拟机中一个类只能对应一个类对象，所以同时只允许一个线程执行同一个类中的静态同步方法。&lt;/p&gt;

&lt;p&gt;对于不同类中的静态同步方法，一个线程可以执行每个类中的静态同步方法而无需等待。不管类中的那个静态同步方法被调用，一个类只能由一个线程同时执行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实例方法中的同步块&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有时你不需要同步整个方法，而是同步方法中的一部分。Java可以对方法的一部分进行同步。&lt;/p&gt;

&lt;p&gt;在非同步的Java方法中的同步块的例子如下所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void add(int value){
    synchronized(this){
       this.count += value;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;示例使用Java同步块构造器来标记一块代码是同步的。该代码在执行时和同步方法一样。&lt;/p&gt;

&lt;p&gt;注意Java同步块构造器用括号将对象括起来。在上例中，使用了“this”，即为调用add方法的实例本身。在同步构造器中用括号括起来的对象叫做监视器对象。上述代码使用监视器对象同步，同步实例方法使用调用方法本身的实例作为监视器对象。&lt;/p&gt;

&lt;p&gt;一次只有一个线程能够在同步于同一个监视器对象的Java方法内执行。&lt;/p&gt;

&lt;p&gt;下面两个例子都同步他们所调用的实例对象上，因此他们在同步的执行效果上是等效的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyClass {
   public synchronized void log1(String msg1, String msg2){
      log.writeln(msg1);
      log.writeln(msg2);
   }
   
   public void log2(String msg1, String msg2){
      synchronized(this){
         log.writeln(msg1);
         log.writeln(msg2);
      }
   }
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在上例中，每次只有一个线程能够在两个同步块中任意一个方法内执行。&lt;/p&gt;

&lt;p&gt;如果第二个同步块不是同步在this实例对象上，那么两个方法可以被线程同时执行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;静态方法中的同步块&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;和上面类似，下面是两个静态方法同步的例子。这些方法同步在该方法所属的类对象上。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyClass {
    public static synchronized void log1(String msg1, String msg2){
       log.writeln(msg1);
       log.writeln(msg2);
    }
    public static void log2(String msg1, String msg2){
       synchronized(MyClass.class){
          log.writeln(msg1);
          log.writeln(msg2);
       }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这两个方法不允许同时被线程访问。&lt;/p&gt;

&lt;p&gt;如果第二个同步块不是同步在MyClass.class这个对象上。那么这两个方法可以同时被线程访问。&lt;/p&gt;

&lt;p&gt;##Java同步实例&lt;/p&gt;

&lt;p&gt;在下面例子中，启动了两个线程，都调用Counter类同一个实例的add方法。因为同步在该方法所属的实例上，所以同时只能有一个线程访问该方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Counter{
     long count = 0;
     public synchronized void add(long value){
       this.count += value;
     }
  }
  public class CounterThread extends Thread{
 
     protected Counter counter = null;
 
     public CounterThread(Counter counter){
        this.counter = counter;
     }
 
     public void run() {
    for(int i=0; i&amp;lt;10; i++){
           counter.add(i);
        }
     }
  }
  public class Example {
    public static void main(String[] args){
      Counter counter = new Counter();
      Thread  threadA = new CounterThread(counter);
      Thread  threadB = new CounterThread(counter);
      threadA.start();
      threadB.start();
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建了两个线程。他们的构造器引用同一个Counter实例。Counter.add方法是同步在实例上，是因为add方法是实例方法并且被标记上synchronized关键字。因此每次只允许一个线程调用该方法。另外一个线程必须要等到第一个线程退出add()方法时，才能继续执行方法。&lt;/p&gt;

&lt;p&gt;如果两个线程引用了两个不同的Counter实例，那么他们可以同时调用add()方法。这些方法调用了不同的对象，因此这些方法也就同步在不同的对象上。这些方法调用将不会被阻塞。如下面这个例子所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Example {
   public static void main(String[] args){
     Counter counterA = new Counter();
     Counter counterB = new Counter();
     Thread  threadA = new CounterThread(counterA);
     Thread  threadB = new CounterThread(counterB);
     threadA.start();
     threadB.start();
   }
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意这两个线程，threadA和threadB，不再引用同一个counter实例。CounterA和counterB的add方法同步在他们所属的对象上。调用counterA的add方法将不会阻塞调用counterB的add方法。&lt;/p&gt;

&lt;p&gt;##线程间通信
线程通信的目标是使线程间能够互相发送信号。另一方面，线程通信使线程能够等待其他线程的信号。&lt;/p&gt;

&lt;p&gt;例如，线程B可以等待线程A的一个信号，这个信号会通知线程B数据已经准备好了。本文将讲解以下几个JAVA线程间通信的主题：&lt;/p&gt;

&lt;p&gt;1、通过共享对象通信
       2、忙等待
       3、wait(),notify()和notifyAll()
       4、丢失的信号
       5、假唤醒
       6、多线程等待相同信号
       7、不要对常量字符串或全局对象调用wait()&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、通过共享对象通信&lt;/strong&gt;
线程间发送信号的一个简单方式是在共享对象的变量里设置信号值。线程A在一个同步块里设置boolean型成员变量hasDataToProcess为true，线程B也在同步块里读取hasDataToProcess这个成员变量。这个简单的例子使用了一个持有信号的对象，并提供了set和check方法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MySignal{

  protected boolean hasDataToProcess = false;

  public synchronized boolean hasDataToProcess(){
    return this.hasDataToProcess;
  }
  public synchronized void setHasDataToProcess(boolean hasData){
    this.hasDataToProcess = hasData;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;线程A和B必须获得指向一个MySignal共享实例的引用，以便进行通信。如果它们持有的引用指向不同的MySingal实例，那么彼此将不能检测到对方的信号。需要处理的数据可以存放在一个共享缓存区里，它和MySignal实例是分开存放的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、忙等待(Busy Wait)&lt;/strong&gt;
准备处理数据的线程B正在等待数据变为可用。换句话说，它在等待线程A的一个信号，这个信号使hasDataToProcess()返回true。线程B运行在一个循环里，以等待这个信号：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protected MySignal sharedSignal = ...
...
while(!sharedSignal.hasDataToProcess()){
  //do nothing... busy waiting
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3、wait(),notify()和notifyAll()&lt;/strong&gt;
忙等待没有对运行等待线程的CPU进行有效的利用，除非平均等待时间非常短。否则，让等待线程进入睡眠或者非运行状态更为明智，直到它接收到它等待的信号。&lt;/p&gt;

&lt;p&gt;Java有一个内建的等待机制来允许线程在等待信号的时候变为非运行状态。java.lang.Object 类定义了三个方法，wait()、notify()和notifyAll()来实现这个等待机制。&lt;/p&gt;

&lt;p&gt;一个线程一旦调用了任意对象的wait()方法，就会变为非运行状态，直到另一个线程调用了同一个对象的notify()方法。为了调用wait()或者notify()，线程必须先获得那个对象的锁。也就是说，线程必须在同步块里调用wait()或者notify()。以下是MySingal的修改版本——使用了wait()和notify()的MyWaitNotify：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MonitorObject{
}
public class MyWaitNotify{
  MonitorObject myMonitorObject = new MonitorObject();
  public void doWait(){
    synchronized(myMonitorObject){
      try{
        myMonitorObject.wait();
      } catch(InterruptedException e){...}
    }
  }
  public void doNotify(){
    synchronized(myMonitorObject){
      myMonitorObject.notify();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;等待线程将调用doWait()，而唤醒线程将调用doNotify()。当一个线程调用一个对象的notify()方法，正在等待该对象的所有线程中将有一个线程被唤醒并允许执行（校注：这个将被唤醒的线程是随机的，不可以指定唤醒哪个线程）。同时也提供了一个notifyAll()方法来唤醒正在等待一个给定对象的所有线程。&lt;/p&gt;

&lt;p&gt;如你所见，不管是等待线程还是唤醒线程都在同步块里调用wait()和notify()。这是强制性的！一个线程如果没有持有对象锁，将不能调用wait()，notify()或者notifyAll()。否则，会抛出IllegalMonitorStateException异常。&lt;/p&gt;

&lt;p&gt;（校注：JVM是这么实现的，当你调用wait时候它首先要检查下当前线程是否是锁的拥有者，不是则抛出IllegalMonitorStateExcept，参考JVM源码的 1422行。）&lt;/p&gt;

&lt;p&gt;但是，这怎么可能？等待线程在同步块里面执行的时候，不是一直持有监视器对象（myMonitor对象）的锁吗？等待线程不能阻塞唤醒线程进入doNotify()的同步块吗？答案是：的确不能。一旦线程调用了wait()方法，它就释放了所持有的监视器对象上的锁。这将允许其他线程也可以调用wait()或者notify()。&lt;/p&gt;

&lt;p&gt;一旦一个线程被唤醒，不能立刻就退出wait()的方法调用，直到调用notify()的线程退出了它自己的同步块。换句话说：被唤醒的线程必须重新获得监视器对象的锁，才可以退出wait()的方法调用，因为wait方法调用运行在同步块里面。如果多个线程被notifyAll()唤醒，那么在同一时刻将只有一个线程可以退出wait()方法，因为每个线程在退出wait()前必须获得监视器对象的锁。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、丢失的信号（Missed Signals）&lt;/strong&gt;
notify()和notifyAll()方法不会保存调用它们的方法，因为当这两个方法被调用时，有可能没有线程处于等待状态。通知信号过后便丢弃了。因此，如果一个线程先于被通知线程调用wait()前调用了notify()，等待的线程将错过这个信号。这可能是也可能不是个问题。不过，在某些情况下，这可能使等待线程永远在等待，不再醒来，因为线程错过了唤醒信号。
为了避免丢失信号，必须把它们保存在信号类里。在MyWaitNotify的例子中，通知信号应被存储在MyWaitNotify实例的一个成员变量里。以下是MyWaitNotify的修改版本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyWaitNotify2{

  MonitorObject myMonitorObject = new MonitorObject();
  boolean wasSignalled = false;
  public void doWait(){
    synchronized(myMonitorObject){
      if(!wasSignalled){
        try{
          myMonitorObject.wait();
         } catch(InterruptedException e){...}
      }
     //clear signal and continue running.
      wasSignalled = false;
    }
  }

  public void doNotify(){
    synchronized(myMonitorObject){
      wasSignalled = true;
      myMonitorObject.notify();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;留意doNotify()方法在调用notify()前把wasSignalled变量设为true。同时，留意doWait()方法在调用wait()前会检查wasSignalled变量。事实上，如果没有信号在前一次doWait()调用和这次doWait()调用之间的时间段里被接收到，它将只调用wait()。&lt;/p&gt;

&lt;p&gt;（校注：为了避免信号丢失， 用一个变量来保存是否被通知过。在notify前，设置自己已经被通知过。在wait后，设置自己没有被通知过，需要等待通知。）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5、假唤醒&lt;/strong&gt;
由于莫名其妙的原因，线程有可能在没有调用过notify()和notifyAll()的情况下醒来。这就是所谓的假唤醒（spurious wakeups）。无端端地醒过来了。&lt;/p&gt;

&lt;p&gt;如果在MyWaitNotify2的doWait()方法里发生了假唤醒，等待线程即使没有收到正确的信号，也能够执行后续的操作。这可能导致你的应用程序出现严重问题。&lt;/p&gt;

&lt;p&gt;为了防止假唤醒，保存信号的成员变量将在一个while循环里接受检查，而不是在if表达式里。这样的一个while循环叫做自旋锁（校注：这种做法要慎重，目前的JVM实现自旋会消耗CPU，如果长时间不调用doNotify方法，doWait方法会一直自旋，CPU会消耗太大）。被唤醒的线程会自旋直到自旋锁(while循环)里的条件变为false。以下MyWaitNotify2的修改版本展示了这点：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyWaitNotify3{
  MonitorObject myMonitorObject = new MonitorObject();
  boolean wasSignalled = false;
  public void doWait(){
    synchronized(myMonitorObject){
      while(!wasSignalled){
        try{
          myMonitorObject.wait();
         } catch(InterruptedException e){...}
      }
      //clear signal and continue running.
      wasSignalled = false;
    }
  }
  public void doNotify(){
    synchronized(myMonitorObject){
      wasSignalled = true;
      myMonitorObject.notify();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;留意wait()方法是在while循环里，而不在if表达式里。如果等待线程没有收到信号就唤醒，wasSignalled变量将变为false,while循环会再执行一次，促使醒来的线程回到等待状态。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6、多个线程等待相同信号&lt;/strong&gt;
如果你有多个线程在等待，被notifyAll()唤醒，但只有一个被允许继续执行，使用while循环也是个好方法。每次只有一个线程可以获得监视器对象锁，意味着只有一个线程可以退出wait()调用并清除wasSignalled标志（设为false）。一旦这个线程退出doWait()的同步块，其他线程退出wait()调用，并在while循环里检查wasSignalled变量值。但是，这个标志已经被第一个唤醒的线程清除了，所以其余醒来的线程将回到等待状态，直到下次信号到来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7、不要在字符串常量或全局对象中调用wait()&lt;/strong&gt;
（校注：这里说的字符串常量指的是值为常量的变量）&lt;/p&gt;

&lt;p&gt;本文早期的一个版本在MyWaitNotify例子里使用字符串常量（””）作为管程对象。以下是那个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyWaitNotify{
  String myMonitorObject = &quot;&quot;;
  boolean wasSignalled = false;
  public void doWait(){
    synchronized(myMonitorObject){
      while(!wasSignalled){
        try{
          myMonitorObject.wait();
         } catch(InterruptedException e){...}
      }
      //clear signal and continue running.
      wasSignalled = false;
    }
  }
  public void doNotify(){
    synchronized(myMonitorObject){
      wasSignalled = true;
      myMonitorObject.notify();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在空字符串作为锁的同步块(或者其他常量字符串)里调用wait()和notify()产生的问题是，JVM/编译器内部会把常量字符串转换成同一个对象。这意味着，即使你有2个不同的MyWaitNotify实例，它们都引用了相同的空字符串实例。同时也意味着存在这样的风险：在第一个MyWaitNotify实例上调用doWait()的线程会被在第二个MyWaitNotify实例上调用doNotify()的线程唤醒。这种情况可以画成以下这张图：&lt;/p&gt;

&lt;p&gt;起初这可能不像个大问题。毕竟，如果doNotify()在第二个MyWaitNotify实例上被调用，真正发生的事不外乎线程A和B被错误的唤醒了 。这个被唤醒的线程（A或者B）将在while循环里检查信号值，然后回到等待状态，因为doNotify()并没有在第一个MyWaitNotify实例上调用，而这个正是它要等待的实例。这种情况相当于引发了一次假唤醒。线程A或者B在信号值没有更新的情况下唤醒。但是代码处理了这种情况，所以线程回到了等待状态。记住，即使4个线程在相同的共享字符串实例上调用wait()和notify()，doWait()和doNotify()里的信号还会被2个MyWaitNotify实例分别保存。在MyWaitNotify1上的一次doNotify()调用可能唤醒MyWaitNotify2的线程，但是信号值只会保存在MyWaitNotify1里。&lt;/p&gt;

&lt;p&gt;问题在于，由于doNotify()仅调用了notify()而不是notifyAll()，即使有4个线程在相同的字符串（空字符串）实例上等待，只能有一个线程被唤醒。所以，如果线程A或B被发给C或D的信号唤醒，它会检查自己的信号值，看看有没有信号被接收到，然后回到等待状态。而C和D都没被唤醒来检查它们实际上接收到的信号值，这样信号便丢失了。这种情况相当于前面所说的丢失信号的问题。C和D被发送过信号，只是都不能对信号作出回应。&lt;/p&gt;

&lt;p&gt;如果doNotify()方法调用notifyAll()，而非notify()，所有等待线程都会被唤醒并依次检查信号值。线程A和B将回到等待状态，但是C或D只有一个线程注意到信号，并退出doWait()方法调用。C或D中的另一个将回到等待状态，因为获得信号的线程在退出doWait()的过程中清除了信号值(置为false)。&lt;/p&gt;

&lt;p&gt;看过上面这段后，你可能会设法使用notifyAll()来代替notify()，但是这在性能上是个坏主意。在只有一个线程能对信号进行响应的情况下，没有理由每次都去唤醒所有线程。&lt;/p&gt;

&lt;p&gt;所以：在wait()/notify()机制中，不要使用全局对象，字符串常量等。应该使用对应唯一的对象。例如，每一个MyWaitNotify3的实例（前一节的例子）拥有一个属于自己的监视器对象，而不是在空字符串上调用wait()/notify()。&lt;/p&gt;

&lt;p&gt;校注：&lt;/p&gt;

&lt;p&gt;管程 (英语：Monitors，也称为监视器) 是对多个工作线程实现互斥访问共享资源的对象或模块。这些共享资源一般是硬件设备或一群变量。管程实现了在一个时间点，最多只有一个线程在执行它的某个子程序。与那些通过修改数据结构实现互斥访问的并发程序设计相比，管程很大程度上简化了程序设计。&lt;/p&gt;

&lt;p&gt;##死锁&lt;/p&gt;

&lt;p&gt;死锁是两个或更多线程阻塞着等待其它处于死锁状态的线程所持有的锁。死锁通常发生在多个线程同时但以不同的顺序请求同一组锁的时候。&lt;/p&gt;

&lt;p&gt;例如，如果线程1锁住了A，然后尝试对B进行加锁，同时线程2已经锁住了B，接着尝试对A进行加锁，这时死锁就发生了。线程1永远得不到B，线程2也永远得不到A，并且它们永远也不会知道发生了这样的事情。为了得到彼此的对象（A和B），它们将永远阻塞下去。这种情况就是一个死锁。&lt;/p&gt;

&lt;p&gt;该情况如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Thread 1  locks A, waits for B
Thread 2  locks B, waits for A
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里有一个TreeNode类的例子，它调用了不同实例的synchronized方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class TreeNode {
    TreeNode parent   = null; 
    List children = new ArrayList();
 
    public synchronized void addChild(TreeNode child){
        if(!this.children.contains(child)) {
            this.children.add(child);
            child.setParentOnly(this);
        }
    }
    public synchronized void addChildOnly(TreeNode child){
        if(!this.children.contains(child){
            this.children.add(child);
        }
    }
    public synchronized void setParent(TreeNode parent){
        this.parent = parent;
        parent.addChildOnly(this);
    }
    public synchronized void setParentOnly(TreeNode parent){
        this.parent = parent;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果线程1调用parent.addChild(child)方法的同时有另外一个线程2调用child.setParent(parent)方法，两个线程中的parent表示的是同一个对象，child亦然，此时就会发生死锁。下面的伪代码说明了这个过程：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Thread 1: parent.addChild(child); //locks parent
          --&amp;gt; child.setParentOnly(parent);

Thread 2: child.setParent(parent); //locks child
          --&amp;gt; parent.addChildOnly()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;首先线程1调用parent.addChild(child)。因为addChild()是同步的，所以线程1会对parent对象加锁以不让其它线程访问该对象。&lt;/p&gt;

&lt;p&gt;然后线程2调用child.setParent(parent)。因为setParent()是同步的，所以线程2会对child对象加锁以不让其它线程访问该对象。&lt;/p&gt;

&lt;p&gt;现在child和parent对象被两个不同的线程锁住了。接下来线程1尝试调用child.setParentOnly()方法，但是由于child对象现在被线程2锁住的，所以该调用会被阻塞。线程2也尝试调用parent.addChildOnly()，但是由于parent对象现在被线程1锁住，导致线程2也阻塞在该方法处。现在两个线程都被阻塞并等待着获取另外一个线程所持有的锁。&lt;/p&gt;

&lt;p&gt;注意：像上文描述的，这两个线程需要同时调用parent.addChild(child)和child.setParent(parent)方法，并且是同一个parent对象和同一个child对象，才有可能发生死锁。上面的代码可能运行一段时间才会出现死锁。&lt;/p&gt;

&lt;p&gt;这些线程需要同时获得锁。举个例子，如果线程1稍微领先线程2，然后成功地锁住了A和B两个对象，那么线程2就会在尝试对B加锁的时候被阻塞，这样死锁就不会发生。因为线程调度通常是不可预测的，因此没有一个办法可以准确预测什么时候死锁会发生，仅仅是可能会发生。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更复杂的死锁&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;死锁可能不止包含2个线程，这让检测死锁变得更加困难。下面是4个线程发生死锁的例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Thread 1  locks A, waits for B
Thread 2  locks B, waits for C
Thread 3  locks C, waits for D
Thread 4  locks D, waits for A
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;线程1等待线程2，线程2等待线程3，线程3等待线程4，线程4等待线程1。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数据库的死锁&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;更加复杂的死锁场景发生在数据库事务中。一个数据库事务可能由多条SQL更新请求组成。当在一个事务中更新一条记录，这条记录就会被锁住避免其他事务的更新请求，直到第一个事务结束。同一个事务中每一个更新请求都可能会锁住一些记录。&lt;/p&gt;

&lt;p&gt;当多个事务同时需要对一些相同的记录做更新操作时，就很有可能发生死锁，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Transaction 1, request 1, locks record 1 for update
Transaction 2, request 1, locks record 2 for update
Transaction 1, request 2, tries to lock record 2 for update.
Transaction 2, request 2, tries to lock record 1 for update.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为锁发生在不同的请求中，并且对于一个事务来说不可能提前知道所有它需要的锁，因此很难检测和避免数据库事务中的死锁。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Android UI线程和子线程、Service通信</title>
   <link href="http://http://coolshell.info/blog/2014/07/android-UI-Thread.html"/>
   <updated>2014-07-19T00:00:00+00:00</updated>
   <id>/blog/2014/07/android-UI-Thread</id>
   <content type="html">&lt;p&gt;关于Service最基本的用法自然就是如何启动一个Service了，启动Service的方法和启动Activity很类似，都需要借助Intent来实现，下面我们就通过一个具体的例子来看一下。&lt;/p&gt;

&lt;p&gt;新建一个Android项目，项目名就叫ServiceTest，这里我选择使用4.0的API。&lt;/p&gt;

&lt;p&gt;然后新建一个MyService继承自Service，并重写父类的onCreate()、onStartCommand()和onDestroy()方法，如下所示：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyService extends Service {  
  
    public static final String TAG = &quot;MyService&quot;;  
  
    @Override  
    public void onCreate() {  
        super.onCreate();  
        Log.d(TAG, &quot;onCreate() executed&quot;);  
    }  
  
    @Override  
    public int onStartCommand(Intent intent, int flags, int startId) {  
        Log.d(TAG, &quot;onStartCommand() executed&quot;);  
        return super.onStartCommand(intent, flags, startId);  
    }  
      
    @Override  
    public void onDestroy() {  
        super.onDestroy();  
        Log.d(TAG, &quot;onDestroy() executed&quot;);  
    }  
  
    @Override  
    public IBinder onBind(Intent intent) {  
        return null;  
    }  
  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，我们只是在onCreate()、onStartCommand()和onDestroy()方法中分别打印了一句话，并没有进行其它任何的操作。
然后打开或新建activity_main.xml作为程序的主布局文件，代码如下所示：&lt;/p&gt;

&lt;p&gt;[html]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;  
    android:layout_width=&quot;match_parent&quot;  
    android:layout_height=&quot;match_parent&quot;  
    android:orientation=&quot;vertical&quot; &amp;gt;  
  
    &amp;lt;Button  
        android:id=&quot;@+id/start_service&quot;  
        android:layout_width=&quot;match_parent&quot;  
        android:layout_height=&quot;wrap_content&quot;  
        android:text=&quot;Start Service&quot; /&amp;gt;  
  
    &amp;lt;Button  
        android:id=&quot;@+id/stop_service&quot;  
        android:layout_width=&quot;match_parent&quot;  
        android:layout_height=&quot;wrap_content&quot;  
        android:text=&quot;Stop Service&quot; /&amp;gt;  
  
&amp;lt;/LinearLayout&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们在布局文件中加入了两个按钮，一个用于启动Service，一个用于停止Service。
然后打开或新建MainActivity作为程序的主Activity，在里面加入启动Service和停止Service的逻辑，代码如下所示：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MainActivity extends Activity implements OnClickListener {  
  
    private Button startService;  
  
    private Button stopService;  
  
    @Override  
    protected void onCreate(Bundle savedInstanceState) {  
        super.onCreate(savedInstanceState);  
        setContentView(R.layout.activity_main);  
        startService = (Button) findViewById(R.id.start_service);  
        stopService = (Button) findViewById(R.id.stop_service);  
        startService.setOnClickListener(this);  
        stopService.setOnClickListener(this);  
    }  
  
    @Override  
    public void onClick(View v) {  
        switch (v.getId()) {  
        case R.id.start_service:  
            Intent startIntent = new Intent(this, MyService.class);  
            startService(startIntent);  
            break;  
        case R.id.stop_service:  
            Intent stopIntent = new Intent(this, MyService.class);  
            stopService(stopIntent);  
            break;  
        default:  
            break;  
        }  
    }  
  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，在Start Service按钮的点击事件里，我们构建出了一个Intent对象，并调用startService()方法来启动MyService。然后在Stop Serivce按钮的点击事件里，我们同样构建出了一个Intent对象，并调用stopService()方法来停止MyService。代码的逻辑非常简单，相信不需要我再多做解释了吧。
另外需要注意，项目中的每一个Service都必须在AndroidManifest.xml中注册才行，所以还需要编辑AndroidManifest.xml文件，代码如下所示：&lt;/p&gt;

&lt;p&gt;[html]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.servicetest&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;android:versionCode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;android:versionName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  
  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-sdk&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;android:minSdkVersion=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;14&quot;&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;android:targetSdkVersion=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;17&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;  
  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;application&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;android:allowBackup=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;android:icon=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/ic_launcher&quot;&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;android:label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@string/app_name&quot;&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;android:theme=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@style/AppTheme&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  
          
    ……  
  
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;service&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.servicetest.MyService&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;  
  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样的话，一个简单的带有Service功能的程序就写好了，当启动一个Service的时候，会调用该Service中的onCreate()和onStartCommand()方法。&lt;/p&gt;

&lt;p&gt;那么如果我再点击一次Start Service按钮呢？
这次只有onStartCommand()方法执行了，onCreate()方法并没有执行，为什么会这样呢？这是由于onCreate()方法只会在Service第一次被创建的时候调用，如果当前Service已经被创建过了，不管怎样调用startService()方法，onCreate()方法都不会再执行。因此你可以再多点击几次StartService按钮试一次，每次都只会有onStartCommand()方法。&lt;/p&gt;

&lt;p&gt;我们还可以到手机的应用程序管理界面来检查一下MyService是不是正在运行，
，MyService确实是正在运行的，即使它的内部并没有执行任何的逻辑。&lt;/p&gt;

&lt;p&gt;回到ServiceTest程序，然后点击一下Stop Service按钮就可以将MyService停止掉了。&lt;/p&gt;

&lt;p&gt;##Service和Activity通信
上面我们学习了Service的基本用法，启动Service之后，就可以在onCreate()或onStartCommand()方法里去执行一些具体的逻辑了。不过这样的话Service和Activity的关系并不大，只是Activity通知了Service一下：“你可以启动了。”然后Service就去忙自己的事情了。那么有没有什么办法能让它们俩的关联更多一些呢？比如说在Activity中可以指定让Service去执行什么任务。当然可以，只需要让Activity和Service建立关联就好了。&lt;/p&gt;

&lt;p&gt;观察MyService中的代码，你会发现一直有一个onBind()方法我们都没有使用到，这个方法其实就是用于和Activity建立关联的，修改MyService中的代码，如下所示：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyService extends Service {  
  
    public static final String TAG = &quot;MyService&quot;;  
  
    private MyBinder mBinder = new MyBinder();  
  
    @Override  
    public void onCreate() {  
        super.onCreate();  
        Log.d(TAG, &quot;onCreate() executed&quot;);  
    }  
  
    @Override  
    public int onStartCommand(Intent intent, int flags, int startId) {  
        Log.d(TAG, &quot;onStartCommand() executed&quot;);  
        return super.onStartCommand(intent, flags, startId);  
    }  
  
    @Override  
    public void onDestroy() {  
        super.onDestroy();  
        Log.d(TAG, &quot;onDestroy() executed&quot;);  
    }  
  
    @Override  
    public IBinder onBind(Intent intent) {  
        return mBinder;  
    }  
  
    class MyBinder extends Binder {  
  
        public void startDownload() {  
            Log.d(&quot;TAG&quot;, &quot;startDownload() executed&quot;);  
            // 执行具体的下载任务  
        }  
  
    }  
  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里我们新增了一个MyBinder类继承自Binder类，然后在MyBinder中添加了一个startDownload()方法用于在后台执行下载任务，当然这里并不是真正地去下载某个东西，只是做个测试，所以startDownload()方法只是打印了一行日志。
然后修改activity_main.xml中的代码，在布局文件中添加用于绑定Service和取消绑定Service的按钮：&lt;/p&gt;

&lt;p&gt;[html]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;  
        android:layout_width=&quot;match_parent&quot;  
        android:layout_height=&quot;match_parent&quot;  
        android:orientation=&quot;vertical&quot; &amp;gt;  
      
        &amp;lt;Button  
            android:id=&quot;@+id/start_service&quot;  
            android:layout_width=&quot;match_parent&quot;  
            android:layout_height=&quot;wrap_content&quot;  
            android:text=&quot;Start Service&quot; /&amp;gt;  
      
        &amp;lt;Button  
            android:id=&quot;@+id/stop_service&quot;  
            android:layout_width=&quot;match_parent&quot;  
            android:layout_height=&quot;wrap_content&quot;  
            android:text=&quot;Stop Service&quot; /&amp;gt;  
      
        &amp;lt;Button  
            android:id=&quot;@+id/bind_service&quot;  
            android:layout_width=&quot;match_parent&quot;  
            android:layout_height=&quot;wrap_content&quot;  
            android:text=&quot;Bind Service&quot; /&amp;gt;  
          
        &amp;lt;Button   
            android:id=&quot;@+id/unbind_service&quot;  
            android:layout_width=&quot;match_parent&quot;  
            android:layout_height=&quot;wrap_content&quot;  
            android:text=&quot;Unbind Service&quot;  
            /&amp;gt;  
          
    &amp;lt;/LinearLayout&amp;gt;  

接下来再修改MainActivity中的代码，让MainActivity和MyService之间建立关联，代码如下所示：
[java] 
public class MainActivity extends Activity implements OnClickListener {  
  
    private Button startService;  
  
    private Button stopService;  
  
    private Button bindService;  
  
    private Button unbindService;  
  
    private MyService.MyBinder myBinder;  
  
    private ServiceConnection connection = new ServiceConnection() {  
  
        @Override  
        public void onServiceDisconnected(ComponentName name) {  
        }  
  
        @Override  
        public void onServiceConnected(ComponentName name, IBinder service) {  
            myBinder = (MyService.MyBinder) service;  
            myBinder.startDownload();  
        }  
    };  
  
    @Override  
    protected void onCreate(Bundle savedInstanceState) {  
        super.onCreate(savedInstanceState);  
        setContentView(R.layout.activity_main);  
        startService = (Button) findViewById(R.id.start_service);  
        stopService = (Button) findViewById(R.id.stop_service);  
        bindService = (Button) findViewById(R.id.bind_service);  
        unbindService = (Button) findViewById(R.id.unbind_service);  
        startService.setOnClickListener(this);  
        stopService.setOnClickListener(this);  
        bindService.setOnClickListener(this);  
        unbindService.setOnClickListener(this);  
    }  
  
    @Override  
    public void onClick(View v) {  
        switch (v.getId()) {  
        case R.id.start_service:  
            Intent startIntent = new Intent(this, MyService.class);  
            startService(startIntent);  
            break;  
        case R.id.stop_service:  
            Intent stopIntent = new Intent(this, MyService.class);  
            stopService(stopIntent);  
            break;  
        case R.id.bind_service:  
            Intent bindIntent = new Intent(this, MyService.class);  
            bindService(bindIntent, connection, BIND_AUTO_CREATE);  
            break;  
        case R.id.unbind_service:  
            unbindService(connection);  
            break;  
        default:  
            break;  
        }  
    }  
  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，这里我们首先创建了一个ServiceConnection的匿名类，在里面重写了onServiceConnected()方法和onServiceDisconnected()方法，这两个方法分别会在Activity与Service建立关联和解除关联的时候调用。在onServiceConnected()方法中，我们又通过向下转型得到了MyBinder的实例，有了这个实例，Activity和Service之间的关系就变得非常紧密了。现在我们可以在Activity中根据具体的场景来调用MyBinder中的任何public方法，即实现了Activity指挥Service干什么Service就去干什么的功能。
当然，现在Activity和Service其实还没关联起来了呢，这个功能是在Bind Service按钮的点击事件里完成的。可以看到，这里我们仍然是构建出了一个Intent对象，然后调用bindService()方法将Activity和Service进行绑定。bindService()方法接收三个参数，第一个参数就是刚刚构建出的Intent对象，第二个参数是前面创建出的ServiceConnection的实例，第三个参数是一个标志位，这里传入BIND_AUTO_CREATE表示在Activity和Service建立关联后自动创建Service，这会使得MyService中的onCreate()方法得到执行，但onStartCommand()方法不会执行。&lt;/p&gt;

&lt;p&gt;然后如何我们想解除Activity和Service之间的关联怎么办呢？调用一下unbindService()方法就可以了，这也是Unbind Service按钮的点击事件里实现的逻辑。&lt;/p&gt;

&lt;p&gt;现在让我们重新运行一下程序吧，在MainActivity中点击一下Bind Service按钮，LogCat里的打印日志如下图所示：&lt;/p&gt;

&lt;p&gt;另外需要注意，任何一个Service在整个应用程序范围内都是通用的，即MyService不仅可以和MainActivity建立关联，还可以和任何一个Activity建立关联，而且在建立关联时它们都可以获取到相同的MyBinder实例。&lt;/p&gt;

&lt;p&gt;##如何销毁Service
在Service的基本用法这一部分，我们介绍了销毁Service最简单的一种情况，点击Start Service按钮启动Service，再点击Stop Service按钮停止Service，这样MyService就被销毁了。
那么如果我们是点击的Bind Service按钮呢？由于在绑定Service的时候指定的标志位是BIND_AUTO_CREATE，说明点击Bind Service按钮的时候Service也会被创建，这时应该怎么销毁Service呢？其实也很简单，点击一下Unbind Service按钮，将Activity和Service的关联解除就可以了。&lt;/p&gt;

&lt;p&gt;先点击一下Bind Service按钮，再点击一下Unbind Service按钮。&lt;/p&gt;

&lt;p&gt;以上这两种销毁的方式都很好理解。那么如果我们既点击了Start Service按钮，又点击了Bind Service按钮会怎么样呢？这个时候你会发现，不管你是单独点击Stop Service按钮还是Unbind Service按钮，Service都不会被销毁，必要将两个按钮都点击一下，Service才会被销毁。也就是说，点击Stop Service按钮只会让Service停止，点击Unbind Service按钮只会让Service和Activity解除关联，一个Service必须要在既没有和任何Activity关联又处理停止状态的时候才会被销毁。&lt;/p&gt;

&lt;p&gt;为了证实一下，我们在Stop Service和Unbind Service按钮的点击事件里面加入一行打印日志：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void onClick(View v) {  
    switch (v.getId()) {  
    case R.id.start_service:  
        Intent startIntent = new Intent(this, MyService.class);  
        startService(startIntent);  
        break;  
    case R.id.stop_service:  
        Log.d(&quot;MyService&quot;, &quot;click Stop Service button&quot;);  
        Intent stopIntent = new Intent(this, MyService.class);  
        stopService(stopIntent);  
        break;  
    case R.id.bind_service:  
        Intent bindIntent = new Intent(this, MyService.class);  
        bindService(bindIntent, connection, BIND_AUTO_CREATE);  
        break;  
    case R.id.unbind_service:  
        Log.d(&quot;MyService&quot;, &quot;click Unbind Service button&quot;);  
        unbindService(connection);  
        break;  
    default:  
        break;  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后重新运行程序，先点击一下Start Service按钮，再点击一下Bind Service按钮，这样就将Service启动起来，并和Activity建立了关联。然后点击Stop Service按钮后Service并不会销毁，再点击一下Unbind Service按钮，Service就会销毁了。
我们应该始终记得在Service的onDestroy()方法里去清理掉那些不再使用的资源，防止在Service被销毁后还会有一些不再使用的对象仍占用着内存。&lt;/p&gt;

&lt;p&gt;##Service和Thread的关系
不少Android初学者都可能会有这样的疑惑，Service和Thread到底有什么关系呢？什么时候应该用Service，什么时候又应该用Thread？答案可能会有点让你吃惊，因为Service和Thread之间没有任何关系！&lt;/p&gt;

&lt;p&gt;之所以有不少人会把它们联系起来，主要就是因为Service的后台概念。Thread我们大家都知道，是用于开启一个子线程，在这里去执行一些耗时操作就不会阻塞主线程的运行。而Service我们最初理解的时候，总会觉得它是用来处理一些后台任务的，一些比较耗时的操作也可以放在这里运行，这就会让人产生混淆了。但是，如果我告诉你Service其实是运行在主线程里的，你还会觉得它和Thread有什么关系吗？让我们看一下这个残酷的事实吧。&lt;/p&gt;

&lt;p&gt;在MainActivity的onCreate()方法里加入一行打印当前线程id的语句：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Log.d(&quot;MyService&quot;, &quot;MainActivity thread id is &quot; + Thread.currentThread().getId());  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后在MyService的onCreate()方法里也加入一行打印当前线程id的语句：
[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Log.d(&quot;MyService&quot;, &quot;MyService thread id is &quot; + Thread.currentThread().getId());  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在重新运行一下程序，并点击Start Service按钮，会看到如下打印日志：&lt;/p&gt;

&lt;p&gt;可以看到，它们的线程id完全是一样的，由此证实了Service确实是运行在主线程里的，也就是说如果你在Service里编写了非常耗时的代码，程序必定会出现ANR的。&lt;/p&gt;

&lt;p&gt;你可能会惊呼，这不是坑爹么！？那我要Service又有何用呢？其实大家不要把后台和子线程联系在一起就行了，这是两个完全不同的概念。Android的后台就是指，它的运行是完全不依赖UI的。即使Activity被销毁，或者程序被关闭，只要进程还在，Service就可以继续运行。比如说一些应用程序，始终需要与服务器之间始终保持着心跳连接，就可以使用Service来实现。你可能又会问，前面不是刚刚验证过Service是运行在主线程里的么？在这里一直执行着心跳连接，难道就不会阻塞主线程的运行吗？当然会，但是我们可以在Service中再创建一个子线程，然后在这里去处理耗时逻辑就没问题了。&lt;/p&gt;

&lt;p&gt;额，既然在Service里也要创建一个子线程，那为什么不直接在Activity里创建呢？这是因为Activity很难对Thread进行控制，当Activity被销毁之后，就没有任何其它的办法可以再重新获取到之前创建的子线程的实例。而且在一个Activity中创建的子线程，另一个Activity无法对其进行操作。但是Service就不同了，所有的Activity都可以与Service进行关联，然后可以很方便地操作其中的方法，即使Activity被销毁了，之后只要重新与Service建立关联，就又能够获取到原有的Service中Binder的实例。因此，使用Service来处理后台任务，Activity就可以放心地finish，完全不需要担心无法对后台任务进行控制的情况。&lt;/p&gt;

&lt;p&gt;一个比较标准的Service就可以写成：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override  
public int onStartCommand(Intent intent, int flags, int startId) {  
    new Thread(new Runnable() {  
        @Override  
        public void run() {  
            // 开始执行后台任务  
        }  
    }).start();  
    return super.onStartCommand(intent, flags, startId);  
}  
  
class MyBinder extends Binder {  
  
    public void startDownload() {  
        new Thread(new Runnable() {  
            @Override  
            public void run() {  
                // 执行具体的下载任务  
            }  
        }).start();  
    }  
  
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##创建前台Service
Service几乎都是在后台运行的，一直以来它都是默默地做着辛苦的工作。但是Service的系统优先级还是比较低的，当系统出现内存不足情况时，就有可能会回收掉正在后台运行的Service。如果你希望Service可以一直保持运行状态，而不会由于系统内存不足的原因导致被回收，就可以考虑使用前台Service。前台Service和普通Service最大的区别就在于，它会一直有一个正在运行的图标在系统的状态栏显示，下拉状态栏后可以看到更加详细的信息，非常类似于通知的效果。当然有时候你也可能不仅仅是为了防止Service被回收才使用前台Service，有些项目由于特殊的需求会要求必须使用前台Service，比如说墨迹天气，它的Service在后台更新天气数据的同时，还会在系统状态栏一直显示当前天气的信息&lt;/p&gt;

&lt;p&gt;那么我们就来看一下如何才能创建一个前台Service吧，其实并不复杂，修改MyService中的代码，如下所示：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyService extends Service {  
  
    public static final String TAG = &quot;MyService&quot;;  
  
    private MyBinder mBinder = new MyBinder();  
  
    @Override  
    public void onCreate() {  
        super.onCreate();  
        Notification notification = new Notification(R.drawable.ic_launcher,  
                &quot;有通知到来&quot;, System.currentTimeMillis());  
        Intent notificationIntent = new Intent(this, MainActivity.class);  
        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0,  
                notificationIntent, 0);  
        notification.setLatestEventInfo(this, &quot;这是通知的标题&quot;, &quot;这是通知的内容&quot;,  
                pendingIntent);  
        **startForeground(1, notification);**  
        Log.d(TAG, &quot;onCreate() executed&quot;);  
    }  
  
    .........  
  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里只是修改了MyService中onCreate()方法的代码。可以看到，我们首先创建了一个Notification对象，然后调用了它的setLatestEventInfo()方法来为通知初始化布局和数据，并在这里设置了点击通知后就打开MainActivity。然后调用startForeground()方法就可以让MyService变成一个前台Service，并会将通知的图片显示出来。
现在重新运行一下程序，并点击Start Service或Bind Service按钮，MyService就会以前台Service的模式启动了，并且在系统状态栏会弹出一个通栏图标，下拉状态栏后可以看到通知的详细内容。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;介绍远程Service的用法，如果将MyService转换成一个远程Service，还会不会有ANR的情况呢？让我们来动手尝试一下吧。&lt;/p&gt;

&lt;p&gt;将一个普通的Service转换成远程Service其实非常简单，只需要在注册Service的时候将它的android:process属性指定成:remote就可以了，代码如下所示：&lt;/p&gt;

&lt;p&gt;[html]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.servicetest&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;android:versionCode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;android:versionName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  
  
    ......  
      
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;service&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.servicetest.MyService&quot;&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;android:process=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:remote&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;  
  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在重新运行程序，并点击一下Start Service按钮，你会看到控制台立刻打印了onCreate() executed的信息，而且主界面并没有阻塞住，也不会出现ANR。大概过了一分钟后，又会看到onStartCommand() executed打印了出来。
为什么将MyService转换成远程Service后就不会导致程序ANR了呢？这是由于，使用了远程Service后，MyService已经在另外一个进程当中运行了，所以只会阻塞该进程中的主线程，并不会影响到当前的应用程序。
为了证实一下MyService现在确实已经运行在另外一个进程当中了，我们分别在MainActivity的onCreate()方法和MyService的onCreate()方法里加入一行日志，打印出各自所在的进程id，如下所示：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Log.d(&quot;TAG&quot;, &quot;process id is &quot; + Process.myPid());  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再次重新运行程序，然后点击一下Start Service按钮，打印结果如下图所示：&lt;/p&gt;

&lt;p&gt;可以看到，不仅仅是进程id不同了，就连应用程序包名也不一样了，MyService中打印的那条日志，包名后面还跟上了:remote标识。&lt;/p&gt;

&lt;p&gt;那既然远程Service这么好用，干脆以后我们把所有的Service都转换成远程Service吧，还省得再开启线程了。其实不然，远程Service非但不好用，甚至可以称得上是较为难用。一般情况下如果可以不使用远程Service，就尽量不要使用它。&lt;/p&gt;

&lt;p&gt;下面就来看一下它的弊端吧，首先将MyService的onCreate()方法中让线程睡眠的代码去除掉，然后重新运行程序，并点击一下Bind Service按钮，你会发现程序崩溃了！为什么点击Start Service按钮程序就不会崩溃，而点击Bind Service按钮就会崩溃呢？这是由于在Bind Service按钮的点击事件里面我们会让MainActivity和MyService建立关联，但是目前MyService已经是一个远程Service了，Activity和Service运行在两个不同的进程当中，这时就不能再使用传统的建立关联的方式，程序也就崩溃了。&lt;/p&gt;

&lt;p&gt;那么如何才能让Activity与一个远程Service建立关联呢？这就要使用AIDL来进行跨进程通信了（IPC）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AIDL（Android Interface Definition&lt;/code&gt; Language）是Android接口定义语言的意思，它可以用于让某个Service与多个应用程序组件之间进行跨进程通信，从而可以实现多个应用程序共享同一个Service的功能。&lt;/p&gt;

&lt;p&gt;下面我们就来一步步地看一下AIDL的用法到底是怎样的。首先需要新建一个AIDL文件，在这个文件中定义好Activity需要与Service进行通信的方法。新建MyAIDLService.aidl文件，代码如下所示：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.example.servicetest;  
interface MyAIDLService {  
    int plus(int a, int b);  
    String toUpperCase(String str);  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;点击保存之后，gen目录下就会生成一个对应的Java文件，如下图所示：&lt;/p&gt;

&lt;p&gt;然后修改MyService中的代码，在里面实现我们刚刚定义好的MyAIDLService接口，如下所示：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyService extends Service {  
  
    ......  
  
    @Override  
    public IBinder onBind(Intent intent) {  
        return mBinder;  
    }  
  
    MyAIDLService.Stub mBinder = new Stub() {  
  
        @Override  
        public String toUpperCase(String str) throws RemoteException {  
            if (str != null) {  
                return str.toUpperCase();  
            }  
            return null;  
        }  
  
        @Override  
        public int plus(int a, int b) throws RemoteException {  
            return a + b;  
        }  
    };  
  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里先是对MyAIDLService.Stub进行了实现，重写里了toUpperCase()和plus()这两个方法。这两个方法的作用分别是将一个字符串全部转换成大写格式，以及将两个传入的整数进行相加。然后在onBind()方法中将MyAIDLService.Stub的实现返回。这里为什么可以这样写呢？因为Stub其实就是Binder的子类，所以在onBind()方法中可以直接返回Stub的实现。
接下来修改MainActivity中的代码，如下所示：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MainActivity extends Activity implements OnClickListener {  
  
    private Button startService;  
  
    private Button stopService;  
  
    private Button bindService;  
  
    private Button unbindService;  
      
    private MyAIDLService myAIDLService;  
  
    private ServiceConnection connection = new ServiceConnection() {  
  
        @Override  
        public void onServiceDisconnected(ComponentName name) {  
        }  
  
        @Override  
        public void onServiceConnected(ComponentName name, IBinder service) {  
            myAIDLService = MyAIDLService.Stub.asInterface(service);  
            try {  
                int result = myAIDLService.plus(3, 5);  
                String upperStr = myAIDLService.toUpperCase(&quot;hello world&quot;);  
                Log.d(&quot;TAG&quot;, &quot;result is &quot; + result);  
                Log.d(&quot;TAG&quot;, &quot;upperStr is &quot; + upperStr);  
            } catch (RemoteException e) {  
                e.printStackTrace();  
            }  
        }  
    };  
  
    ......  
  
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们只是修改了ServiceConnection中的代码。可以看到，这里首先使用了MyAIDLService.Stub.asInterface()方法将传入的IBinder对象传换成了MyAIDLService对象，接下来就可以调用在MyAIDLService.aidl文件中定义的所有接口了。这里我们先是调用了plus()方法，并传入了3和5作为参数，然后又调用了toUpperCase()方法，并传入hello world字符串作为参数，最后将调用方法的返回结果打印出来。
现在重新运行程序，并点击一下Bind Service按钮，可以看到打印日志如下所示：&lt;/p&gt;

&lt;p&gt;由此可见，我们确实已经成功实现跨进程通信了，在一个进程中访问到了另外一个进程中的方法。&lt;/p&gt;

&lt;p&gt;不过你也可以看出，目前的跨进程通信其实并没有什么实质上的作用，因为这只是在一个Activity里调用了同一个应用程序的Service里的方法。而跨进程通信的真正意义是为了让一个应用程序去访问另一个应用程序中的Service，以实现共享Service的功能。那么下面我们自然要学习一下，如何才能在其它的应用程序中调用到MyService里的方法。&lt;/p&gt;

&lt;p&gt;在上一篇文章中我们已经知道，如果想要让Activity与Service之间建立关联，需要调用bindService()方法，并将Intent作为参数传递进去，在Intent里指定好要绑定的Service，示例代码如下：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Intent bindIntent = new Intent(this, MyService.class);  
bindService(bindIntent, connection, BIND_AUTO_CREATE);  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里在构建Intent的时候是使用MyService.class来指定要绑定哪一个Service的，但是在另一个应用程序中去绑定Service的时候并没有MyService这个类，这时就必须使用到隐式Intent了。现在修改AndroidManifest.xml中的代码，给MyService加上一个action，如下所示：
[html]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.servicetest&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;android:versionCode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;android:versionName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  
  
    ......  
  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;service&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.servicetest.MyService&quot;&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;android:process=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:remote&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;  
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.example.servicetest.MyAIDLService&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/service&amp;gt;&lt;/span&gt;  
  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这就说明，MyService可以响应带有com.example.servicetest.MyAIDLService这个action的Intent。&lt;/p&gt;

&lt;p&gt;现在重新运行一下程序，这样就把远程Service端的工作全部完成了。
然后创建一个新的Android项目，起名为ClientTest，我们就尝试在这个程序中远程调用MyService中的方法。&lt;/p&gt;

&lt;p&gt;ClientTest中的Activity如果想要和MyService建立关联其实也不难，首先需要将MyAIDLService.aidl文件从ServiceTest项目中拷贝过来，注意要将原有的包路径一起拷贝过来，完成后项目的结构如下图所示：&lt;/p&gt;

&lt;p&gt;然后打开或新建activity_main.xml，在布局文件中也加入一个Bind Service按钮：&lt;/p&gt;

&lt;p&gt;[html]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;  
    android:layout_width=&quot;match_parent&quot;  
    android:layout_height=&quot;match_parent&quot;  
    android:orientation=&quot;vertical&quot;  
     &amp;gt;  
  
   &amp;lt;Button   
       android:id=&quot;@+id/bind_service&quot;  
       android:layout_width=&quot;match_parent&quot;  
       android:layout_height=&quot;wrap_content&quot;  
       android:text=&quot;Bind Service&quot;  
       /&amp;gt;  
  
&amp;lt;/LinearLayout&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来打开或新建MainActivity，在其中加入和MyService建立关联的代码，如下所示：
[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MainActivity extends Activity {  
  
    private MyAIDLService myAIDLService;  
  
    private ServiceConnection connection = new ServiceConnection() {  
  
        @Override  
        public void onServiceDisconnected(ComponentName name) {  
        }  
  
        @Override  
        public void onServiceConnected(ComponentName name, IBinder service) {  
            myAIDLService = MyAIDLService.Stub.asInterface(service);  
            try {  
                int result = myAIDLService.plus(50, 50);  
                String upperStr = myAIDLService.toUpperCase(&quot;comes from ClientTest&quot;);  
                Log.d(&quot;TAG&quot;, &quot;result is &quot; + result);  
                Log.d(&quot;TAG&quot;, &quot;upperStr is &quot; + upperStr);  
            } catch (RemoteException e) {  
                e.printStackTrace();  
            }  
        }  
    };  
  
    @Override  
    protected void onCreate(Bundle savedInstanceState) {  
        super.onCreate(savedInstanceState);  
        setContentView(R.layout.activity_main);  
        Button bindService = (Button) findViewById(R.id.bind_service);  
        bindService.setOnClickListener(new OnClickListener() {  
            @Override  
            public void onClick(View v) {  
                Intent intent = new Intent(&quot;com.example.servicetest.MyAIDLService&quot;);  
                bindService(intent, connection, BIND_AUTO_CREATE);  
            }  
        });  
    }  
  
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这部分代码大家一定会非常眼熟吧？没错，这和在ServiceTest的MainActivity中的代码几乎是完全相同的，只是在让Activity和Service建立关联的时候我们使用了隐式Intent，将Intent的action指定成了com.example.servicetest.MyAIDLService。
在当前Activity和MyService建立关联之后，我们仍然是调用了plus()和toUpperCase()这两个方法，远程的MyService会对传入的参数进行处理并返回结果，然后将结果打印出来。&lt;/p&gt;

&lt;p&gt;这样的话，ClientTest中的代码也就全部完成了，现在运行一下这个项目，然后点击Bind Service按钮，此时就会去和远程的MyService建立关联，观察LogCat中的打印信息如下所示：&lt;/p&gt;

&lt;p&gt;不用我说，大家都已经看出，我们的跨进程通信功能已经完美实现了。&lt;/p&gt;

&lt;p&gt;不过还有一点需要说明的是，由于这是在不同的进程之间传递数据，Android对这类数据的格式支持是非常有限的，基本上只能传递Java的基本数据类型、字符串、List或Map等。那么如果我想传递一个自定义的类该怎么办呢？这就必须要让这个类去实现Parcelable接口，并且要给这个类也定义一个同名的AIDL文件。这部分内容并不复杂，而且和Service关系不大，所以就不再详细进行讲解了，感兴趣的朋友可以自己去查阅一下相关的资料&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;##主线程和子线程通信&lt;/p&gt;

&lt;p&gt;###一、Handler的定义:
主要接受子线程发送的数据, 并用此数据配合主线程更新UI.
解释: 当应用程序启动时，Android首先会开启一个主线程 (也就是UI线程) , 主线程为管理界面中的UI控件，进行事件分发, 比如说, 你要是点击一个 Button, Android会分发事件到Button上，来响应你的操作。  如果此时需要一个耗时的操作，例如: 联网读取数据，或者读取本地较大的一个文件的时候，你不能把这些操作放在主线程中，如果你放在主线程中的话，界面会出现假死现象, 如果5秒钟还没有完成的话，会收到Android系统的一个错误提示  “强制关闭”.  这个时候我们需要把这些耗时的操作，放在一个子线程中,因为子线程涉及到UI更新，Android主线程是线程不安全的，也就是说，更新UI只能在主线程中更新，子线程中操作是危险的. 这个时候，Handler就出现了来解决这个复杂的问题，由于Handler运行在主线程中(UI线程中)，它与子线程可以通过Message对象来传递数据，这个时候，Handler就承担着接受子线程传过来的(子线程用sedMessage()方法传弟)Message对象，(里面包含数据)  , 把这些消息放入主线程队列中，配合主线程进行更新UI。&lt;/p&gt;

&lt;p&gt;###二、Handler一些特点
handler可以分发Message对象和Runnable对象到主线程中, 每个Handler实例,都会绑定到创建他的线程中(一般是位于主线程),
它有两个作用:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安排消息或Runnable 在某个主线程中某个地方执行,&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安排一个动作在不同的线程中执行&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Handler中分发消息的一些方法
post(Runnable)
postAtTime(Runnable,long)
postDelayed(Runnable long)
sendEmptyMessage(int)
sendMessage(Message)
sendMessageAtTime(Message,long)
sendMessageDelayed(Message,long)
以上post类方法允许你排列一个Runnable对象到主线程队列中,
sendMessage类方法, 允许你安排一个带数据的Message对象到队列中，等待更新.
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###三、Handler实例
      (1) 子类需要继承Handler类，并重写handleMessage(Message msg) 方法, 用于接受线程数据
      以下为一个实例，它实现的功能为 : 通过线程修改界面Button的内容&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 public class MyHandlerActivity extends Activity {
 2     Button button;
 3     MyHandler myHandler;
 4 
 5     protected void onCreate(Bundle savedInstanceState) {
 6         super.onCreate(savedInstanceState);
 7         setContentView(R.layout.handlertest);
 8 
 9         button = (Button) findViewById(R.id.button);
10         myHandler = new MyHandler();
11         // 当创建一个新的Handler实例时, 它会绑定到当前线程和消息的队列中,开始分发数据
12         // Handler有两个作用, (1) : 定时执行Message和Runnalbe 对象
13         // (2): 让一个动作,在不同的线程中执行.
14 
15         // 它安排消息,用以下方法
16         // post(Runnable)
17         // postAtTime(Runnable,long)
18         // postDelayed(Runnable,long)
19         // sendEmptyMessage(int)
20         // sendMessage(Message);
21         // sendMessageAtTime(Message,long)
22         // sendMessageDelayed(Message,long)
23       
24         // 以上方法以 post开头的允许你处理Runnable对象
25         //sendMessage()允许你处理Message对象(Message里可以包含数据,)
26 
27         MyThread m = new MyThread();
28         new Thread(m).start();
29     }
30 
31     /**
32     * 接受消息,处理消息 ,此Handler会与当前主线程一块运行
33     * */
34 
35     class MyHandler extends Handler {
36         public MyHandler() {
37         }
38 
39         public MyHandler(Looper L) {
40             super(L);
41         }
42 
43         // 子类必须重写此方法,接受数据
44         @Override
45         public void handleMessage(Message msg) {
46             // TODO Auto-generated method stub
47             Log.d(&quot;MyHandler&quot;, &quot;handleMessage......&quot;);
48             super.handleMessage(msg);
49             // 此处可以更新UI
50             Bundle b = msg.getData();
51             String color = b.getString(&quot;color&quot;);
52             MyHandlerActivity.this.button.append(color);
53 
54         }
55     }
56 
57     class MyThread implements Runnable {
58         public void run() {
59 
60             try {
61                 Thread.sleep(10000);
62             } catch (InterruptedException e) {
63                 // TODO Auto-generated catch block
64                 e.printStackTrace();
65             }
66 
67             Log.d(&quot;thread.......&quot;, &quot;mThread........&quot;);
68             Message msg = new Message();
69             Bundle b = new Bundle();// 存放数据
70             b.putString(&quot;color&quot;, &quot;我的&quot;);
71             msg.setData(b);
72 
73             MyHandlerActivity.this.myHandler.sendMessage(msg); // 向Handler发送消息,更新UI
74 
75         }
76     }
77 
78 } 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>从android.os.NetworkOnMainThreadException引发的思考</title>
   <link href="http://http://coolshell.info/blog/2014/07/android-networkOnMainThreadException.html"/>
   <updated>2014-07-18T00:00:00+00:00</updated>
   <id>/blog/2014/07/android-networkOnMainThreadException</id>
   <content type="html">&lt;p&gt;最近在写一个网络通信的程序，运行的时候抛出了这样一个异常，&lt;code class=&quot;highlighter-rouge&quot;&gt;android.os.NetworkOnMainThreadException&lt;/code&gt;，找了很久没发现原因，后来查了下资料才知道是android的UI线程不能直接进行网络访问的操作。
##什么是UI线程？&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The concept and importance of the application’s main &lt;strong&gt;UI thread&lt;/strong&gt; is
something every Android developer should understand. Each time an
application is launched, the system creates a thread called “main” for
the application. The main thread (also known as the “UI thread”) is in
charge of dispatching events to the appropriate views/widgets and thus
is very important. It’s also the thread where your application
interacts with running components of your application’s UI. For
instance, if you touch a button on the screen, the UI thread
dispatches the touch event to the view, which then sets its pressed
state and posts an invalidate request to the event queue. The UI
thread dequeues this request and then tells the view to redraw itself.&lt;/p&gt;

  &lt;p&gt;This single-thread model can yield poor performance unless Android
applications are implemented properly. Specifically, if the UI thread
was in charge of running everything in your entire application,
performing long operations such as network access or database queries
on the UI thread would block the entire user interface. No event would
be able to be dispatched—including drawing and touchscreen
events—while the long operation is underway. From the user’s
perspective, the application will appear to be frozen.&lt;/p&gt;

  &lt;p&gt;In these situations, instant feedback is vital. Studies show that &lt;strong&gt;0.1&lt;/strong&gt;
seconds is about the limit for having the user feel that the system is
reacting instantaneously. Anything slower than this limit will
probably be considered as &lt;strong&gt;lag&lt;/strong&gt; (Miller 1968; Card et al. 1991). While a
fraction of a second might not seem harmful, even a tenth of a second
can be the difference between a good review and a bad review on Google
Play. Even worse, if the UI thread is blocked for more than about five
seconds, the user is presented with the notorious “application not
responding” (ANR) dialog and the app is force closed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;##为什么你的App Crashes？
The reason why your application crashes on Android versions 3.0 and above, but works fine on Android 2.x is because Honeycomb and Ice Cream Sandwich are much stricter about abuse against the UI Thread. For example, when an Android device running HoneyComb or above detects a network access on the UI thread, a NetworkOnMainThreadException will be thrown:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;E/AndroidRuntime(673): java.lang.RuntimeException: Unable to start activity
    ComponentInfo{com.example/com.example.ExampleActivity}:android.os.NetworkOnMainThreadException 在Android developer网站对NetworkOnMainThreadException是这样解释的：
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;A NetworkOnMainThreadException is thrown when an application attempts
to perform a networking operation on its main thread. This is only
thrown for applications targeting the Honeycomb SDK or higher.
Applications targeting earlier SDK versions are allowed to do
networking on their main event loop threads, but it’s heavily
discouraged.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;安卓3.0以上不允许在UI线程执行以下操作：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;打开一个Socket连接(比如new Socket()).&lt;/li&gt;
  &lt;li&gt;HTTP请求(比如HTTPClient and HTTPUrlConnection).&lt;/li&gt;
  &lt;li&gt;尝试访问远程MySQL数据库.&lt;/li&gt;
  &lt;li&gt;下载文件(Downloader.downloadFile()).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are attempting to perform any of these operations on the UI thread, you must wrap them in a worker thread. The easiest way to do this is to use of an AsyncTask, which allows you to perform asynchronous work on your user interface. An AsyncTask will perform the blocking operations in a worker thread and will publish the results on the UI thread, without requiring you to handle threads and/or handlers yourself.&lt;/p&gt;

&lt;p&gt;##Android AsyncTask完全解析
我们都知道，Android UI是线程不安全的，如果想要在子线程里进行UI操作，就需要借助Android的异步消息处理机制。&lt;/p&gt;

&lt;p&gt;不过为了更加方便我们在子线程中更新UI元素，Android从1.5版本就引入了一个AsyncTask类，使用它就可以非常灵活方便地从子线程切换到UI线程，我们本篇文章的主角也就正是它了。&lt;/p&gt;

&lt;p&gt;AsyncTask很早就出现在Android的API里了，所以我相信大多数朋友对它的用法都已经非常熟悉。不过今天我还是准备从AsyncTask的基本用法开始讲起，然后我们再来一起分析下AsyncTask源码，看看它是如何实现的，最后我会介绍一些关于AsyncTask你所不知道的秘密。&lt;/p&gt;

&lt;p&gt;AsyncTask的基本用法
首先来看一下AsyncTask的基本用法，由于AsyncTask是一个抽象类，所以如果我们想使用它，就必须要创建一个子类去继承它。在继承时我们可以为AsyncTask类指定三个泛型参数，这三个参数的用途如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Params&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在执行AsyncTask时需要传入的参数，可用于在后台任务中使用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Progress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛型作为进度单位。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Result&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值类型。&lt;/p&gt;

&lt;p&gt;因此，一个最简单的自定义AsyncTask就可以写成如下方式：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class DownloadTask extends AsyncTask&amp;lt;Void, Integer, Boolean&amp;gt; {  
    ……  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里我们把AsyncTask的第一个泛型参数指定为Void，表示在执行AsyncTask的时候不需要传入参数给后台任务。第二个泛型参数指定为Integer，表示使用整型数据来作为进度显示单位。第三个泛型参数指定为Boolean，则表示使用布尔型数据来反馈执行结果。
当然，目前我们自定义的DownloadTask还是一个空任务，并不能进行任何实际的操作，我们还需要去重写AsyncTask中的几个方法才能完成对任务的定制。经常需要去重写的方法有以下四个：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;onPreExecute()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个方法会在后台任务开始执行之间调用，用于进行一些界面上的初始化操作，比如显示一个进度条对话框等。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;doInBackground(Params…)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个方法中的所有代码都会在子线程中运行，我们应该在这里去处理所有的耗时任务。任务一旦完成就可以通过return语句来将任务的执行结果进行返回，如果AsyncTask的第三个泛型参数指定的是Void，就可以不返回任务执行结果。注意，在这个方法中是不可以进行UI操作的，如果需要更新UI元素，比如说反馈当前任务的执行进度，可以调用publishProgress(Progress…)方法来完成。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;onProgressUpdate(Progress…)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当在后台任务中调用了publishProgress(Progress…)方法后，这个方法就很快会被调用，方法中携带的参数就是在后台任务中传递过来的。在这个方法中可以对UI进行操作，利用参数中的数值就可以对界面元素进行相应的更新。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;onPostExecute(Result)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当后台任务执行完毕并通过return语句进行返回时，这个方法就很快会被调用。返回的数据会作为参数传递到此方法中，可以利用返回的数据来进行一些UI操作，比如说提醒任务执行的结果，以及关闭掉进度条对话框等。&lt;/p&gt;

&lt;p&gt;因此，一个比较完整的自定义AsyncTask就可以写成如下方式：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class DownloadTask extends AsyncTask&amp;lt;Void, Integer, Boolean&amp;gt; {  
  
    @Override  
protected void onPreExecute() {  
    progressDialog.show();  
}  
  
@Override  
protected Boolean doInBackground(Void... params) {  
    try {  
        while (true) {  
            int downloadPercent = doDownload();  
            publishProgress(downloadPercent);  
            if (downloadPercent &amp;gt;= 100) {  
                break;  
            }  
        }  
    } catch (Exception e) {  
        return false;  
    }  
    return true;  
}  
  
@Override  
protected void onProgressUpdate(Integer... values) {  
    progressDialog.setMessage(&quot;当前下载进度：&quot; + values[0] + &quot;%&quot;);  
}  
  
@Override  
protected void onPostExecute(Boolean result) {  
    progressDialog.dismiss();  
    if (result) {  
        Toast.makeText(context, &quot;下载成功&quot;, Toast.LENGTH_SHORT).show();  
    } else {  
        Toast.makeText(context, &quot;下载失败&quot;, Toast.LENGTH_SHORT).show();  
    }  
}   }   这里我们模拟了一个下载任务，在doInBackground()方法中去执行具体的下载逻辑，在onProgressUpdate()方法中显示当前的下载进度，在onPostExecute()方法中来提示任务的执行结果。如果想要启动这个任务，只需要简单地调用以下代码即可： [java] 

new DownloadTask().execute();  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上就是AsyncTask的基本用法，怎么样，是不是感觉在子线程和UI线程之间进行切换变得灵活了很多？我们并不需求去考虑什么异步消息处理机制，也不需要专门使用一个Handler来发送和接收消息，只需要调用一下publishProgress()方法就可以轻松地从子线程切换到UI线程了。
分析AsyncTask的源码
虽然AsyncTask这么简单好用，但你知道它是怎样实现的吗？那么接下来，我们就来分析一下AsyncTask的源码，对它的实现原理一探究竟。注意这里我选用的是Android 4.0的源码，如果你查看的是其它版本的源码，可能会有一些出入。&lt;/p&gt;

&lt;p&gt;从之前DownloadTask的代码就可以看出，在启动某一个任务之前，要先new出它的实例，因此，我们就先来看一看AsyncTask构造函数中的源码，如下所示：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public AsyncTask() {  
    mWorker = new WorkerRunnable&amp;lt;Params, Result&amp;gt;() {  
        public Result call() throws Exception {  
            mTaskInvoked.set(true);  
            Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);  
            return postResult(doInBackground(mParams));  
        }  
    };  
    mFuture = new FutureTask&amp;lt;Result&amp;gt;(mWorker) {  
        @Override  
        protected void done() {  
            try {  
                final Result result = get();  
                postResultIfNotInvoked(result);  
            } catch (InterruptedException e) {  
                android.util.Log.w(LOG_TAG, e);  
            } catch (ExecutionException e) {  
                throw new RuntimeException(&quot;An error occured while executing doInBackground()&quot;,  
                        e.getCause());  
            } catch (CancellationException e) {  
                postResultIfNotInvoked(null);  
            } catch (Throwable t) {  
                throw new RuntimeException(&quot;An error occured while executing &quot;  
                        + &quot;doInBackground()&quot;, t);  
            }  
        }  
    };  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这段代码虽然看起来有点长，但实际上并没有任何具体的逻辑会得到执行，只是初始化了两个变量，mWorker和mFuture，并在初始化mFuture的时候将mWorker作为参数传入。mWorker是一个Callable对象，mFuture是一个FutureTask对象，这两个变量会暂时保存在内存中，稍后才会用到它们。
接着如果想要启动某一个任务，就需要调用该任务的execute()方法，因此现在我们来看一看execute()方法的源码，如下所示：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public final AsyncTask&amp;lt;Params, Progress, Result&amp;gt; execute(Params... params) {  
    return executeOnExecutor(sDefaultExecutor, params);  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;简单的有点过分了，只有一行代码，仅是调用了executeOnExecutor()方法，那么具体的逻辑就应该写在这个方法里了，快跟进去瞧一瞧：
[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public final AsyncTask&amp;lt;Params, Progress, Result&amp;gt; executeOnExecutor(Executor exec,  
        Params... params) {  
    if (mStatus != Status.PENDING) {  
        switch (mStatus) {  
            case RUNNING:  
                throw new IllegalStateException(&quot;Cannot execute task:&quot;  
                        + &quot; the task is already running.&quot;);  
            case FINISHED:  
                throw new IllegalStateException(&quot;Cannot execute task:&quot;  
                        + &quot; the task has already been executed &quot;  
                        + &quot;(a task can be executed only once)&quot;);  
        }  
    }  
    mStatus = Status.RUNNING;  
    onPreExecute();  
    mWorker.mParams = params;  
    exec.execute(mFuture);  
    return this;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;果然，这里的代码看上去才正常点。可以看到，在第15行调用了onPreExecute()方法，因此证明了onPreExecute()方法会第一个得到执行。可是接下来的代码就看不明白了，怎么没见到哪里有调用doInBackground()方法呢？别着急，慢慢找总会找到的，我们看到，在第17行调用了Executor的execute()方法，并将前面初始化的mFuture对象传了进去，那么这个Executor对象又是什么呢？查看上面的execute()方法，原来是传入了一个sDefaultExecutor变量，接着找一下这个sDefaultExecutor变量是在哪里定义的，源码如下所示：
[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static final Executor SERIAL_EXECUTOR = new SerialExecutor();  
……  
private static volatile Executor sDefaultExecutor = SERIAL_EXECUTOR;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，这里先new出了一个SERIAL_EXECUTOR常量，然后将sDefaultExecutor的值赋值为这个常量，也就是说明，刚才在executeOnExecutor()方法中调用的execute()方法，其实也就是调用的SerialExecutor类中的execute()方法。那么我们自然要去看看SerialExecutor的源码了，如下所示：
[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static class SerialExecutor implements Executor {  
    final ArrayDeque&amp;lt;Runnable&amp;gt; mTasks = new ArrayDeque&amp;lt;Runnable&amp;gt;();  
    Runnable mActive;  
  
    public synchronized void execute(final Runnable r) {  
        mTasks.offer(new Runnable() {  
            public void run() {  
                try {  
                    r.run();  
                } finally {  
                    scheduleNext();  
                }  
            }  
        });  
        if (mActive == null) {  
            scheduleNext();  
        }  
    }  
  
    protected synchronized void scheduleNext() {  
        if ((mActive = mTasks.poll()) != null) {  
            THREAD_POOL_EXECUTOR.execute(mActive);  
        }  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;SerialExecutor类中也有一个execute()方法，这个方法里的所有逻辑就是在子线程中执行的了，注意这个方法有一个Runnable参数，那么目前这个参数的值是什么呢？当然就是mFuture对象了，也就是说在第9行我们要调用的是FutureTask类的run()方法，而在这个方法里又会去调用Sync内部类的innerRun()方法，因此我们直接来看innerRun()方法的源码：
[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void innerRun() {  
    if (!compareAndSetState(READY, RUNNING))  
        return;  
    runner = Thread.currentThread();  
    if (getState() == RUNNING) { // recheck after setting thread  
        V result;  
        try {  
            result = callable.call();  
        } catch (Throwable ex) {  
            setException(ex);  
            return;  
        }  
        set(result);  
    } else {  
        releaseShared(0); // cancel  
    }  
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，在第8行调用了callable的call()方法，那么这个callable对象是什么呢？其实就是在初始化mFuture对象时传入的mWorker对象了，此时调用的call()方法，也就是一开始在AsyncTask的构造函数中指定的，我们把它单独拿出来看一下，代码如下所示：
[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public Result call() throws Exception {  
    mTaskInvoked.set(true);  
    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);  
    return postResult(doInBackground(mParams));  
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在postResult()方法的参数里面，我们终于找到了doInBackground()方法的调用处，虽然经过了很多周转，但目前的代码仍然是运行在子线程当中的，所以这也就是为什么我们可以在doInBackground()方法中去处理耗时的逻辑。接着将doInBackground()方法返回的结果传递给了postResult()方法，这个方法的源码如下所示：
[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private Result postResult(Result result) {  
    Message message = sHandler.obtainMessage(MESSAGE_POST_RESULT,  
            new AsyncTaskResult&amp;lt;Result&amp;gt;(this, result));  
    message.sendToTarget();  
    return result;  
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你已经熟悉了异步消息处理机制，这段代码对你来说一定非常简单吧。这里使用sHandler对象发出了一条消息，消息中携带了MESSAGE_POST_RESULT常量和一个表示任务执行结果的AsyncTaskResult对象。这个sHandler对象是InternalHandler类的一个实例，那么稍后这条消息肯定会在InternalHandler的handleMessage()方法中被处理。InternalHandler的源码如下所示：
[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static class InternalHandler extends Handler {  
    @SuppressWarnings({&quot;unchecked&quot;, &quot;RawUseOfParameterizedType&quot;})  
    @Override  
    public void handleMessage(Message msg) {  
        AsyncTaskResult result = (AsyncTaskResult) msg.obj;  
        switch (msg.what) {  
            case MESSAGE_POST_RESULT:  
                // There is only one result  
                result.mTask.finish(result.mData[0]);  
                break;  
            case MESSAGE_POST_PROGRESS:  
                result.mTask.onProgressUpdate(result.mData);  
                break;  
        }  
    }  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里对消息的类型进行了判断，如果这是一条MESSAGE_POST_RESULT消息，就会去执行finish()方法，如果这是一条MESSAGE_POST_PROGRESS消息，就会去执行onProgressUpdate()方法。那么finish()方法的源码如下所示：
[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void finish(Result result) {  
    if (isCancelled()) {  
        onCancelled(result);  
    } else {  
        onPostExecute(result);  
    }  
    mStatus = Status.FINISHED;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，如果当前任务被取消掉了，就会调用onCancelled()方法，如果没有被取消，则调用onPostExecute()方法，这样当前任务的执行就全部结束了。
我们注意到，在刚才InternalHandler的handleMessage()方法里，还有一种MESSAGE_POST_PROGRESS的消息类型，这种消息是用于当前进度的，调用的正是onProgressUpdate()方法，那么什么时候才会发出这样一条消息呢？相信你已经猜到了，查看publishProgress()方法的源码，如下所示：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protected final void publishProgress(Progress... values) {  
    if (!isCancelled()) {  
        sHandler.obtainMessage(MESSAGE_POST_PROGRESS,  
                new AsyncTaskResult&amp;lt;Progress&amp;gt;(this, values)).sendToTarget();  
    }  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;非常清晰了吧！正因如此，在doInBackground()方法中调用publishProgress()方法才可以从子线程切换到UI线程，从而完成对UI元素的更新操作。其实也没有什么神秘的，因为说到底，AsyncTask也是使用的异步消息处理机制，只是做了非常好的封装而已。
读到这里，相信你对AsyncTask中的每个回调方法的作用、原理、以及何时会被调用都已经搞明白了吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于AsyncTask你所不知道的秘密&lt;/strong&gt;
不得不说，刚才我们在分析SerialExecutor的时候，其实并没有分析的很仔细，仅仅只是关注了它会调用mFuture中的run()方法，但是至于什么时候会调用我们并没有进一步地研究。其实SerialExecutor也是AsyncTask在3.0版本以后做了最主要的修改的地方，它在AsyncTask中是以常量的形式被使用的，因此在整个应用程序中的所有AsyncTask实例都会共用同一个SerialExecutor。下面我们就来对这个类进行更加详细的分析，为了方便阅读，我把它的代码再贴出来一遍：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static class SerialExecutor implements Executor {  
    final ArrayDeque&amp;lt;Runnable&amp;gt; mTasks = new ArrayDeque&amp;lt;Runnable&amp;gt;();  
    Runnable mActive;  
  
    public synchronized void execute(final Runnable r) {  
        mTasks.offer(new Runnable() {  
            public void run() {  
                try {  
                    r.run();  
                } finally {  
                    scheduleNext();  
                }  
            }  
        });  
        if (mActive == null) {  
            scheduleNext();  
        }  
    }  
  
    protected synchronized void scheduleNext() {  
        if ((mActive = mTasks.poll()) != null) {  
            THREAD_POOL_EXECUTOR.execute(mActive);  
        }  
    }  
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，SerialExecutor是使用ArrayDeque这个队列来管理Runnable对象的，如果我们一次性启动了很多个任务，首先在第一次运行execute()方法的时候，会调用ArrayDeque的offer()方法将传入的Runnable对象添加到队列的尾部，然后判断mActive对象是不是等于null，第一次运行当然是等于null了，于是会调用scheduleNext()方法。在这个方法中会从队列的头部取值，并赋值给mActive对象，然后调用THREAD_POOL_EXECUTOR去执行取出的取出的Runnable对象。之后如何又有新的任务被执行，同样还会调用offer()方法将传入的Runnable添加到队列的尾部，但是再去给mActive对象做非空检查的时候就会发现mActive对象已经不再是null了，于是就不会再调用scheduleNext()方法。
那么后面添加的任务岂不是永远得不到处理了？当然不是，看一看offer()方法里传入的Runnable匿名类，这里使用了一个try finally代码块，并在finally中调用了scheduleNext()方法，保证无论发生什么情况，这个方法都会被调用。也就是说，每次当一个任务执行完毕后，下一个任务才会得到执行，SerialExecutor模仿的是单一线程池的效果，如果我们快速地启动了很多任务，同一时刻只会有一个线程正在执行，其余的均处于等待状态。Android照片墙应用实现，再多的图片也不怕崩溃 这篇文章中例子的运行结果也证实了这个结论。&lt;/p&gt;

&lt;p&gt;不过你可能还不知道，在Android 3.0之前是并没有SerialExecutor这个类的，那个时候是直接在AsyncTask中构建了一个sExecutor常量，并对线程池总大小，同一时刻能够运行的线程数做了规定，代码如下所示：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static final int CORE_POOL_SIZE = 5;  
private static final int MAXIMUM_POOL_SIZE = 128;  
private static final int KEEP_ALIVE = 10;  
……  
private static final ThreadPoolExecutor sExecutor = new ThreadPoolExecutor(CORE_POOL_SIZE,  
        MAXIMUM_POOL_SIZE, KEEP_ALIVE, TimeUnit.SECONDS, sWorkQueue, sThreadFactory);  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，这里规定同一时刻能够运行的线程数为5个，线程池总大小为128。也就是说当我们启动了10个任务时，只有5个任务能够立刻执行，另外的5个任务则需要等待，当有一个任务执行完毕后，第6个任务才会启动，以此类推。而线程池中最大能存放的线程数是128个，当我们尝试去添加第129个任务时，程序就会崩溃。
因此在3.0版本中AsyncTask的改动还是挺大的，在3.0之前的AsyncTask可以同时有5个任务在执行，而3.0之后的AsyncTask同时只能有1个任务在执行。为什么升级之后可以同时执行的任务数反而变少了呢？这是因为更新后的AsyncTask已变得更加灵活，如果不想使用默认的线程池，还可以自由地进行配置。比如使用如下的代码来启动任务：&lt;/p&gt;

&lt;p&gt;[java]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Executor exec = new ThreadPoolExecutor(15, 200, 10,  
        TimeUnit.SECONDS, new LinkedBlockingQueue&amp;lt;Runnable&amp;gt;());  
new DownloadTask().executeOnExecutor(exec); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样就可以使用我们自定义的一个Executor来执行任务，而不是使用SerialExecutor。上述代码的效果允许在同一时刻有15个任务正在执行，并且最多能够存储200个任务。
好了，到这里我们就已经把关于AsyncTask的所有重要内容深入浅出地理解了一遍，相信在将来使用它的时候能够更加得心应手。&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2012/06/app-force-close-honeycomb-ics.html&quot;&gt;Why Ice Cream Sandwich Crashes your App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.android.com/reference/android/os/AsyncTask.html&quot;&gt;AsyncTask&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html&quot;&gt;Multithreading For Performance&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>使用jekyll在Github上搭建博客</title>
   <link href="http://http://coolshell.info/blog/2014/07/use-jekyll-build-blog-on-github.html"/>
   <updated>2014-07-15T00:00:00+00:00</updated>
   <id>/blog/2014/07/use-jekyll-build-blog-on-github</id>
   <content type="html">&lt;p&gt;jekyll是一个使用Ruby编写的静态站点生成工具，使用Liquid模板渲染引擎，支持Markdown和Textile标记语言，并且可以为所有以 .html、.markdown、.textile扩展名结尾的文件使用YAML配置，内置语法高亮功能。&lt;/p&gt;

&lt;p&gt;而Github的Pages服务可以为每个Github主机上的仓库提供静态页面服务，并且Pages服务支持jekyll。因为Github Pages有两种Pages，分别是用户页面和项目页面，所以我们可以使用用户页面来创建自己的Blog。&lt;/p&gt;

&lt;p&gt;在开始前，请确保你已经有了Github账号一枚和Git的正确配置。没有的朋友可以先移步Github注册并安装配置Git。&lt;/p&gt;

&lt;p&gt;首先，创建你的 Blog 仓库 &lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.com&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir username.github.com
$ cd username.github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;新建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 文件，像下面这样:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;初始化仓库、提交并push到Github:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init
$ git add .
$ git commit -a -m &#39;init commit.&#39;
$ git remote add origin
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在你打开 &lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.com&lt;/code&gt; 就可以看到刚才新建的页面了，就是这么简单。当然也可以为你的Blog仓库绑定独立域名，具体做法就是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在你的仓库中新建内容为 www.youdomain.com 的 CNAME 文件；&lt;/li&gt;
  &lt;li&gt;在你的域名管理页或者是DNS解析的地方，增加一个记录，记录类别为CNAME(Alias)类型.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note：&lt;/strong&gt; 如果你在CNAME中填写的是顶级域名，就得设置DNS的记录类别为A(Host)型，并设置主机为 &lt;code class=&quot;highlighter-rouge&quot;&gt;207.97.227.245&lt;/code&gt;。详细介绍请移步Github的Pages页面。&lt;/p&gt;

&lt;p&gt;接下来我们只需要按照自己的喜好设计页面。首先认识下jekyll的文件及目录配置:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  .
  |-- _includes
  |-- _plugins 
  |-- _layout 
  |   |-- default.html
  |   `-- post.html
  |-- _post
  |   |-- yyyy-mm-dd-title.markdown
  |   `-- yyyy-mm-dd-title.markdown
  |-- _site
  |-- _config.yml
  `-- index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;存放你需要在模板文件中包含的文件，你可以使用Liquid标签 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‰&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;file.ext&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‰&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;/code&gt;来引用相应的文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_plugins&lt;/strong&gt;可以增加你自己的插件&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_layout&lt;/strong&gt;存放布局模板，请参考&lt;a href=&quot;https://github.com/taberhuang/taberhuang.github.com/tree/master/_layouts&quot;&gt;https://github.com/taberhuang/taberhuang.github.com/tree/master/_layouts&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;_post&lt;/strong&gt;存放文章列表，文件命名一定要遵循 yyyy-mm-dd-title.html&lt;/td&gt;
      &lt;td&gt;markdown&lt;/td&gt;
      &lt;td&gt;textile 规则，请参考&lt;a href=&quot;https://github.com/taberhuang/taberhuang.github.com/tree/master/_posts&quot;&gt;https://github.com/taberhuang/taberhuang.github.com/tree/master/_posts&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;_sitejekyll&lt;/strong&gt;自动生成的，所以可以忽略，如果你有在本地安装jekyll并预览了的话，可以使用.gitignore设置Git停止对本目录的跟踪。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;设置经常使用的配置选项，这样在本地启动预览时就不用每次都手动输入了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.html 和所有的 HTML/Markdown/Textile 文件&lt;/strong&gt; 所有的HTML/Markdown/Textile文件都可以包含 YAML 配置，这类文件都会被jekyll解析。&lt;/p&gt;

&lt;p&gt;现在你可以在自己的仓库中配置好你自己的目录及文件，也可以&lt;code class=&quot;highlighter-rouge&quot;&gt;clone&lt;/code&gt;我的仓库，然后修改。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/taberhuang/taberhuang.github.com.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改完后就可以&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;你的代码到Github上，看到结果了。刚才有说到本地预览，如果你想在本地预览后，确保没错误再&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;的话，就需要在本地安装jekyll，下面介绍下jekyll的安装方法。&lt;/p&gt;

&lt;p&gt;一、安装Ruby运行环境和RubyGem:Windows用户只要下载 RubyInstaller。下载安装后请手动升级gem.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem update --system
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;二、安装DevKit。DevKit是windows平台编译和使用本地C/C++扩展包工具。用来模拟Linux平台下的 make,gcc,sh 进行编译。下载文件后，解压到 `C:\DevKit’，再通过命令行安装:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd C:\DevKit
$ ruby dk.rb init
$ ruby dk.rb install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;三、安装并检查刚才的DevKit安装是否成功。如果成功安装，则DevKit也就安装成功，如果不成功，请重新安装DevKit。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;四、安装Rdiscount，这个是用来解析Markdown标记的解析包。如果你使用Textile的话，就是安装Kramdown。&lt;/p&gt;

&lt;p&gt;$ gem install rdiscount&lt;/p&gt;

&lt;p&gt;所有的环境和依赖包都安装成功后，进入你的仓库目录，用下面的命令便可启动jekyll，并在本地预览了，预览地址默认为 &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:4000&lt;/code&gt;，当然你也可以通过 _config.yml 配置:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll --server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;是不是很爽?&lt;/p&gt;

&lt;p&gt;参考及相关资料：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pages.github.com/&quot;&gt;http://pages.github.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki&quot;&gt;https://github.com/mojombo/jekyll/wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.envylabs.com/2009/08/publishing-a-blog-with-github-pages-and-jekyll/&quot;&gt;http://blog.envylabs.com/2009/08/publishing-a-blog-with-github-pages-and-jekyll/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;http://daringfireball.net/projects/markdown/syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>一个合格的程序员应该读过哪些书</title>
   <link href="http://http://coolshell.info/blog/2014/07/qualified-programmer-should-read-what-books.html"/>
   <updated>2014-07-15T00:00:00+00:00</updated>
   <id>/blog/2014/07/qualified-programmer-should-read-what-books</id>
   <content type="html">&lt;p&gt;编者按：2008年8月4日，StackOverflow 网友 Bert F 发帖提问：哪本最具影响力的书，是每个程序员都应该读的？&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“如果能时光倒流，回到过去，作为一个开发人员，你可以告诉自己在职业生涯初期应该读一本，
你会选择哪本书呢？我希望这个书单列表内容丰富，可以涵盖很多东西。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很多&lt;a href=&quot;http://coolshell.info&quot;&gt;程序员&lt;/a&gt;响应，他们在推荐时也写下自己的评语。
以前就有国内网友介绍这个程序员书单，不过都是推荐数 Top 10的书。&lt;/p&gt;

&lt;p&gt;其实除了前10本之外，推荐数前30左右的书籍都算经典，笔者整理编译这个问答贴，同时摘译部分推荐人的评语。&lt;/p&gt;

&lt;p&gt;下面就按照各本书的推荐数排列。&lt;/p&gt;

&lt;h2 id=&quot;httptcnzoes03n-&quot;&gt;1、《&lt;a href=&quot;http://t.cn/zOEs03N&quot;&gt;代码大全&lt;/a&gt;》 史蒂夫·迈克康奈尔&lt;/h2&gt;

&lt;p&gt;推荐数：1684&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“优秀的编程实践的百科全书，《&lt;a href=&quot;http://t.cn/zOEs03N&quot;&gt;代码大全&lt;/a&gt;》注重个人技术，其中所有东西加起来，
就是我们本能所说的“编写整洁的代码”。这本书有50页在谈论代码布局。” —— Joel Spolsky&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于新手来说，这本书中的观念有点高阶了。到你准备阅读此书时，你应该已经知道并实践过书中99%的观念。– esac&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Steve McConnell的原作《代码大全》(第1版)是公认的关于编程的最佳实践指南之一，
在过去的十多年间，本书一直在帮助开发人员编写更好的软件。&lt;/p&gt;

&lt;p&gt;现在，作者将这本经典著作全新演绎，融入了最前沿的实践技术，加入了上百个崭新的代码示例，
充分展示了软件构建的艺术性和科学性。
McConnell汇集了来自研究机构、学术界以及业界日常实践的主要知识，
把最高效的技术和最重要的原理交织融会为这本既清晰又实用的指南。&lt;/p&gt;

&lt;p&gt;无论您的经验水平如何，也不管您在怎样的开发环境中工作，也无论项目是大是小，
本书都将激发您的思维并帮助您构建高品质的代码。&lt;/p&gt;

&lt;p&gt;《&lt;a href=&quot;(http://t.cn/zOEs03N)&quot;&gt;代码大全（第2版）&lt;/a&gt;》做了全面的更新，增加了很多与时俱进的内容，包括对新语言、新的开发过程与方法论的讨论等等。&lt;/p&gt;

&lt;h2 id=&quot;httptcnzoesld9&quot;&gt;2、《&lt;a href=&quot;http://t.cn/zOEslD9&quot;&gt;程序员修炼之道&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;推荐数：1504&lt;/p&gt;

&lt;p&gt;对于那些已经学习过编程机制的程序员来说，这是一本卓越的书。
或许他们还是在校生，但对要自己做什么，还感觉不是很安全。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;就像草图和架构之间的差别。虽然你在学校课堂上学到的是画图，你也可以画的很漂亮，
但如果你觉得你不太知道从哪儿下手，如果某人要你独自画一个P2P的音乐交换网络图，那这本书就适合你了。—— Joel&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;《程序员修炼之道:从小工到专家》内容简介：《程序员修炼之道》由一系列独立的部分组成，
涵盖的主题从个人责任、职业发展，知道用于使代码保持灵活、并且易于改编和复用的各种架构技术，
利用许多富有娱乐性的奇闻轶事、有思想性的例子及有趣的类比，
全面阐释了软件开发的许多不同方面的最佳实践和重大陷阱。&lt;/p&gt;

&lt;p&gt;无论你是初学者，是有经验的程序员，还是软件项目经理，《程序员修炼之道:从小工到专家》都适合你阅读。&lt;/p&gt;

&lt;h2 id=&quot;httptcnzoesycs&quot;&gt;3、《&lt;a href=&quot;http://t.cn/zOEsYcs&quot;&gt;计算机程序的构造和解释&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;推荐数：916&lt;/p&gt;

&lt;p&gt;就个人而言，这本书目前为止对我影响醉倒的一本编程书。&lt;/p&gt;

&lt;p&gt;《代码大全》、《重构》和《设计模式》这些经典书会教给你高效的工作习惯和交易细节。
其他像《人件集》、《计算机编程心理学》和《人月神话》这些书会深入软件开发的心理层面。
其他书籍则处理算法。这些书都有自己所属的位置。&lt;/p&gt;

&lt;p&gt;然而《计算机程序的构造和解释》与这些不同。
这是一本会启发你的书，它会燃起你编写出色程序的热情；
它还将教会你认识并欣赏美；
它会让你有种敬畏，让你难以抑制地渴望学习更多的东西。&lt;/p&gt;

&lt;p&gt;其他书或许会让你成为一位更出色的程序员，但此书将一定会让你成为一名程序员。&lt;/p&gt;

&lt;p&gt;同时，你将会学到其他东西，函数式编程（第三章）、惰性计算、元编程、虚拟机、解释器和编译器。&lt;/p&gt;

&lt;p&gt;一些人认为此书不适合新手。
个人认为，虽然我并不完全认同要有一些编程经验才能读此书，但我还是一定推荐给初学者。
毕竟这本书是写给著名的6.001，是麻省理工学院的入门编程课程。
此书或许需要多做努力（尤其你在做练习的时候，你也应当如此），但这个价是对得起这本书的。&lt;/p&gt;

&lt;h2 id=&quot;chttptcnzoeshqb&quot;&gt;4、《&lt;a href=&quot;http://t.cn/zOEsHqb&quot;&gt;C程序设计语言&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;推荐数：774&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这本书简洁易读，会教给你三件事：C 编程语言；如何像程序员一样思考；底层计算模型。
（这对理解“底层”非常重要）—— Nathan&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;《C程序设计语言》(第2版新版)讲述深入浅出，配合典型例证，通俗易懂，实用性强，
适合作为大专院校计算机专业或非计算机专业的C语言教材，也可以作为从事计算机相关软硬件开发的技术人员的参考书。&lt;/p&gt;

&lt;p&gt;《C程序设计语言》(第2版新版)原著即为C语言的设计者之一Dennis M.Ritchie和著名的计算机科学家Brian W.Kernighan合著的
一本介绍C语言的权威经典著作。
我们现在见到的大量论述C语言程序设计的教材和专著均以此书为蓝本。
原著第1版中介绍的C语言成为后来广泛使用的C语言版本——标准C的基础。&lt;/p&gt;

&lt;p&gt;人们熟知的“hello,world”程序就是由本书首次引入的，现在，这一程序已经成为所有程序设计语言入门的第一课。&lt;/p&gt;

&lt;h2 id=&quot;httptcnzoesqan&quot;&gt;5、《&lt;a href=&quot;http://t.cn/zOEsQAn&quot;&gt;算法导论&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;推荐数：671&lt;/p&gt;

&lt;p&gt;《代码大全》教你如何正确编程；
《人月神话》教你如何正确管理；
《设计模式》教你如何正确设计……&lt;/p&gt;

&lt;p&gt;在我看来，代码只是一个工具，并非精髓。
开发软件的主要部分是创建新算法或重新实现现有算法。
其他部分则像重新组装乐高砖块或创建“管理”层。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我依然梦想这样的工作，我的大部分时间（&amp;gt;50%）是在写算法，其他“管理”细节则留给其他人…… —— Ran Biron&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;经典的算法书,被亚马逊网，《程序员》等评选为2006年最受读者喜爱的十大IT图书之一。&lt;/li&gt;
&lt;li&gt;算法领域的标准教材，全球多所知名大学选用&lt;/li&gt;
&lt;li&gt;MIT名师联手铸就，被誉为“计算机算法的圣经”&lt;/li&gt;
&lt;li&gt;编写上采用了“五个一”，即一章介绍一个算法、一种设计技术、一个应用领域和一个相关话题。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;httptcnzoes8lu&quot;&gt;6、《&lt;a href=&quot;http://t.cn/zOEs8Lu&quot;&gt;重构：改善既有代码的设计&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;推荐数：617&lt;/p&gt;

&lt;p&gt;《重构:改善既有代码的设计》清晰地揭示了重构的过程，解释了重构的原理和最佳实践方式，
并给出了何时以及何地应该开始挖掘代码以求改善。
书中给出了70多个可行的重构，每个重构都介绍了一种经过验证的代码变换手法的动机和技术。&lt;/p&gt;

&lt;p&gt;《重构:改善既有代码的设计》提出的重构准则将帮助你一次一小步地修改你的代码，从而减少了开发过程中的风险。&lt;/p&gt;

&lt;p&gt;《重构:改善既有代码的设计》适合软件开发人员、项目管理人员等阅读，
也可作为高等院校计算机及相关专业师生的参考读物。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我想我不得不推荐《重构》：改进现有代码的设计。—— Martin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我必须承认，我最喜欢的编程语录是出自这本书：任何一个傻瓜都能写出计算机能理解的程序，
而优秀的程序员却能写出别人能读得懂的程序。—— Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;httptcnzoes8k1&quot;&gt;7、《&lt;a href=&quot;http://t.cn/zOEs8k1&quot;&gt;设计模式&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;推荐数：617&lt;/p&gt;

&lt;p&gt;自1995年出版以来，本书一直名列Amazon和各大书店销售榜前列。
近10年后，本书仍是Addison-Wesley公司2003年最畅销的图书之一。
中文版销售逾4万册。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;就我而言，我认为四人帮编著的《设计模式》是一本极为有用的书。
虽然此书并不像其他建议一样有关“元”编程，但它强调封装诸如模式一类的优秀编程技术，
因而鼓励其他人提出新模式和反模式（antipatterns），并运用于编程对话中。—— Chris Jester-Young&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;httptcnzoesr1z&quot;&gt;8、《&lt;a href=&quot;http://t.cn/zOEsR1z&quot;&gt;人月神话&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;推荐数：588&lt;/p&gt;

&lt;p&gt;在软件领域，很少能有像《人月神话》一样具有深远影响力并且畅销不衰的著作。&lt;/p&gt;

&lt;p&gt;Brooks博士为人们管理复杂项目提供了最具洞察力的见解。
既有很多发人深省的观点，又有大量软件工程的实践。
本书内容来自Brooks博士在IBM公司System/360家族和OS/360中的项目管理经验。&lt;/p&gt;

&lt;p&gt;该书英文原版一经面世，即引起业内人士的强烈反响，后又译为德、法、日、俄中等多种语言，全球销量数百万册。
确立了其在行业内的经典地位。&lt;/p&gt;

&lt;h2 id=&quot;httptcnzoesexr&quot;&gt;9、《&lt;a href=&quot;http://t.cn/zOEsExR&quot;&gt;计算机程序设计艺术&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;推荐数：542&lt;/p&gt;

&lt;p&gt;《计算机程序设计艺术》系列著作对计算机领域产生了深远的影响。
这一系列堪称一项浩大的工程，自1962年开始编写，计划出版7卷，目前已经出版了4卷。&lt;/p&gt;

&lt;p&gt;《美国科学家》杂志曾将这套书与爱因斯坦的《相对论》等书并列称为20世纪最重要的12本物理学著作。
目前Knuth正将毕生精力投入到这部史诗性著作的撰写中。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这是高德纳倾注心血写的一本书。—— Peter Coulton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;httptcnzoesefg&quot;&gt;10、《&lt;a href=&quot;http://t.cn/zOEsEFG&quot;&gt;编译原理&lt;/a&gt;》（龙书）&lt;/h2&gt;

&lt;p&gt;推荐数：462&lt;/p&gt;

&lt;p&gt;我很奇怪，居然没人提到龙书。（或许已有推荐，我没有看到）。
我从没忘过此书的第一版封面。
此书让我知道了编译器是多么地神奇绝妙。- DB&lt;/p&gt;

&lt;h2 id=&quot;httptcnzonvx9n&quot;&gt;11、《&lt;a href=&quot;http://t.cn/zOnvX9N&quot;&gt;深入浅出设计模式&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;推荐数：445&lt;/p&gt;

&lt;p&gt;强大的写作阵容。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;《Head First设计模式》(中文版) 作者Eric Freeman；&lt;/li&gt;
  &lt;li&gt;ElElisabeth Freeman是作家、讲师和技术顾问。&lt;/li&gt;
  &lt;li&gt;Eric拥有耶鲁大学的计算机科学博士学位，E1isabath拥有耶鲁大学的计算机科学硕士学位。&lt;/li&gt;
  &lt;li&gt;Kathy Sierra(javaranch．com的创始人)FHBert Bates是畅销的HeadFirst系列书籍的创立者，也是Sun公司Java开发员认证考试的开发者。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本书的产品设计应用神经生物学、认知科学，以及学习理论，这使得这本书能够将这些知识深深地印在你的脑海里，
不容易被遗忘。&lt;/p&gt;

&lt;p&gt;本书的编写方式采用引导式教学，不直接告诉你该怎么做，而是利用故事当作引子，带领读者思考并想办法解决问题。
解决问题的过程中又会产生一些新的问题，再继续思考、继续解决问题，这样可以加深体会。&lt;/p&gt;

&lt;p&gt;作者以大量的生活化故事当背景，例如第1章是鸭子，第2章是气象站，第3章是咖啡店，
书中搭配大量的插图(几乎每一页都有图)，所以阅读起来生动有趣，不会感觉到昏昏欲睡。&lt;/p&gt;

&lt;p&gt;作者还利用歪歪斜斜的手写字体，增加“现场感”。
精心设计许多爆笑的对白，让学习过程不会太枯燥。
还有模式告白节目，将设计模式拟人化成节目来宾，畅谈其内在的一切。
每一章都有数目不等的测验题。
每章最后有一页要点整理，这也是精华所在，我都是利用这一页做复习。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我知道四人帮的《设计模式》是一本标准书，但倒不如先看看这部大部头，此书更为简易。
一旦你了解了解了基本原则，可以去看四人帮的那本圣经了。- Calanus&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;httptcnzoesu0d&quot;&gt;12、《&lt;a href=&quot;http://t.cn/zOEsu0d&quot;&gt;哥德尔、艾舍尔、巴赫书：集异璧之大成&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;推荐数：437&lt;/p&gt;

&lt;p&gt;如果下昂真正深入阅读，我推荐道格拉斯·侯世达（Douglas Hofstadter）的《哥德尔、艾舍尔、巴赫书》。
他极为深入研究了程序员每日都要面对的问题：递归、验证、证明和布尔代数。
这是一本很出色的读物，难度不大，偶尔有挑战，一旦你要鏖战到底，将是非常值得的。 – Jonik&lt;/p&gt;

&lt;h2 id=&quot;httptcnzoes3tt&quot;&gt;13、《&lt;a href=&quot;http://t.cn/zOEs3tt&quot;&gt;代码整洁之道&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;推荐数：329&lt;/p&gt;

&lt;p&gt;细节之中自有天地，整洁成就卓越代码&lt;/p&gt;

&lt;p&gt;尽管糟糕的代码也能运行，但如果代码不整洁，会使整个开发团队泥足深陷，
写得不好的代码每年都要耗费难以计数的时间和资源。
然而这种情况并非无法避免。&lt;/p&gt;

&lt;p&gt;著名软件专家RoberfC.Marlin在《代码整洁之道》中为你呈现出了革命性的视野。
Martin携同ObjectMetltor公司的同事，从他们有关整洁代码的最佳敏捷实践中提炼出软件技艺的价值观，
以飨读者，让你成为更优秀的程序员——只要你着手研读《代码整洁之道》。&lt;/p&gt;

&lt;p&gt;阅读《代码整洁之道》需要你做些什么呢？你将阅读代码——大量代码。
《代码整洁之道》促使你思考代码中何谓正确，何谓错误。
更重要的是，《代码整洁之道》将促使你重新评估自己的专业价值观，以及对自己技艺的承诺。&lt;/p&gt;

&lt;p&gt;从《代码整洁之道》中可以学到：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;好代码和糟糕的代码之间的区别；&lt;/li&gt;
&lt;li&gt;如何编写好代码，如何将糟糕的代码转化为好代码；&lt;/li&gt;
&lt;li&gt;如何创建好名称、好函数、好对象和好类；&lt;/li&gt;
&lt;li&gt;如何格式化代码以实现其可读性的最大化；&lt;/li&gt;
&lt;li&gt;如何在不妨碍代码逻辑的前提下充分实现错误处理；&lt;/li&gt;
&lt;li&gt;如何进行单元测试和测试驱动开发。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;虽然《代码整洁之道》和《代码大全》有很多共同之处，但它有更为简洁更为实际的清晰例子。 – Craig P. Motlin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;effective-chttptcnzoes1mwmore-effective-chttptcnzoesbvc&quot;&gt;14、《&lt;a href=&quot;http://t.cn/zOEs1Mw&quot;&gt;Effective C++&lt;/a&gt;》和《&lt;a href=&quot;http://t.cn/zOEsBvc&quot;&gt;More Effective C++&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;推荐数：297&lt;/p&gt;

&lt;p&gt;在我职业生涯早期，Scott Meyer的《Effective C++》和后续的《More Effective C++》都对我的编程能力有着直接影响。
正如当时的一位朋友所说，这些书缩短你培养编程技能的过程，而其他人可能要花费数年。&lt;/p&gt;

&lt;p&gt;去年对我影响最大的一本书是《大教堂与市集》，该书教会我很有关开源开发过程如何运作，和如何处理我代码中的Bug。 – John Channing&lt;/p&gt;

&lt;h2 id=&quot;httptcnzoesbur&quot;&gt;15、《&lt;a href=&quot;http://t.cn/zOEsBur&quot;&gt;编程珠玑&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;推荐数：282&lt;/p&gt;

&lt;p&gt;多年以来，当程序员们推选出最心爱的计算机图书时，《编程珠玑》总是位列前列。
正如自然界里珍珠出自细沙对牡蛎的磨砺，计算机科学大师Jon Bentley以其独有的洞察力和创造力，
从磨砺程序员的实际问题中凝结出一篇篇不朽的编程“珠玑”，
成为世界计算机界名刊《ACM通讯》历史上最受欢迎的专栏，
最终结集为两部不朽的计算机科学经典名著，影响和激励着一代又一代程序员和计算机科学工作者。&lt;/p&gt;

&lt;p&gt;本书为第一卷，主要讨论计算机科学中最本质的问题：如何正确选择和高效地实现算法。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;尽管我不得不羞愧地承认，书中一半的东西我都没有理解，但我真的推荐《编程珠玑》，书中有些令人惊奇的东西。 – Matt Warren&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;httptcnzoesgc0by-michael-feathers&quot;&gt;16、《&lt;a href=&quot;http://t.cn/zOEsgC0&quot;&gt;修改代码的艺术&lt;/a&gt;》by Michael Feathers&lt;/h2&gt;

&lt;p&gt;本书是继《重构》和《重构与模式》之后探讨修改代码技术的又一里程碑式的著作，
而且从涵盖面和深度上都超过了前两部经典。
书中不仅讲述面向对象语言（Java、C#和C++）代码，也有专章讨论C这样的过程式语言。&lt;/p&gt;

&lt;p&gt;作者将理解、测试和修改代码的原理、技术和最新工具（自动化重构工具、单元测试框架、仿对象、集成测试框架等），
与解依赖技术和大量开发和设计优秀代码的原则、最佳实践相结合，许多内容非常深入，而且常常发前人所未发。&lt;/p&gt;

&lt;p&gt;书中处处体现出作者独到的洞察力，以及多年开发和指导软件项目所积累的丰富经验和深厚功力。
通过这部集大成之作，你不仅能掌握最顶尖的修改代码技术，还可以大大提高对代码和软件开发的领悟力。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我认为没有任何一本书能向这本书一样影响了我的编程观点。
它明确地告诉你如何处理其他人的代码，含蓄地教会你避免哪些（以及为什么要避免）。- Wolfbyte&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;同意。很多开发人员讨论用干净的石板来编写软件。
但我想几乎所有开发人员的某些时候是在吃其他开发人员的狗食。– Bernard Dy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;httptcnzoeseyx&quot;&gt;17、《&lt;a href=&quot;http://t.cn/zOEseyX&quot;&gt;编码：隐匿在计算机软硬件背后的语言&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;这是一本讲述计算机工作原理的书。&lt;/p&gt;

&lt;p&gt;不过，你千万不要因为“工作原理”之类的字眼就武断地认为，它是晦涩而难懂的。
作者用丰富的想象和清晰的笔墨将看似繁杂的理论阐述得通俗易懂，你丝毫不会感到枯燥和生硬。
更重要的是，你会因此而获得对计算机工作原理较深刻的理解。
这种理解不是抽象层面上的，而是具有一定深度的，这种深度甚至不逊于“电气工程师”和“程序员”的理解。&lt;/p&gt;

&lt;p&gt;不管你是计算机高手，还是对这个神奇的机器充满敬畏之心的菜鸟，
都不妨翻阅一下《编码:隐匿在计算机软硬件背后的语言》，读一读大师的经典作品，必然会有收获。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我推荐Charles Petzold的《编码》。
在这个充满工具和IDE的年代，很多复杂度已经从程序员那“抽取”走了，这本书一本开眼之作。 – hemil&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;zen-and-the-art-of-motorcycle-maintenancehttptcnzoesdwc&quot;&gt;18、《&lt;a href=&quot;http://t.cn/zOEsDwc&quot;&gt;禅与摩托车维修艺术 / Zen and the Art of Motorcycle Maintenance&lt;/a&gt;》&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;对我影响最大的那本书是 Robert Pirsig 的《禅与摩托车维修艺术》。
不管你做什么事，总是要力求完美，彻底了解你手中的工具和任务，更为重要的是，
要有乐趣（因为如果你做事有乐趣，一切将自发引向更好的结果）。 – akr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;peopleware--httptcnzoeskve&quot;&gt;19、《&lt;a href=&quot;http://t.cn/zOEskvE&quot;&gt;Peopleware / 人件集:人性化的软件开发&lt;/a&gt;》&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Demarco 和 Lister 表明，软件开发中的首要问题是人，并非技术。
他们的答案并不简单，只是令人难以置信的成功。
第二版新增加了八章内容。 – Eduardo Molteni&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;coders-at-work--httptcnzoeskjt&quot;&gt;20、《&lt;a href=&quot;http://t.cn/zOEskjT&quot;&gt;Coders at Work / 编程人生&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;这是一本访谈笔录，记录了当今最具个人魅力的15位软件先驱的编程生涯。
包括DonaldKnuth、Jamie Zawinski、Joshua Bloch、Ken Thompson等在内的业界传奇人物，为我们讲述了
他们是怎么学习编程的，在编程过程中发现了什么以及他们对未来的看法，
并对诸如应该如何设计软件等长久以来一直困扰很多程序员的问题谈了自己的观点。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;一本非常有影响力的书，可以从中学到一些业界顶级人士的经验，了解他们如何思考并工作。 – Jahanzeb Farooq&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;surely-youre-joking-mr-feynman--&quot;&gt;21、《Surely You’re Joking, Mr. Feynman! / 别闹了，费曼先生！》&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;虽然这本书可能有点偏题，但不管你信不信，这本书曾在计算机科学专业课程的阅读列表之上。
一个优秀的角色模型，一本有关好奇心的优秀书籍。 – mike511&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;effective-java-httptcnzonvvov&quot;&gt;22、《&lt;a href=&quot;http://t.cn/zOnvvoV&quot;&gt;Effective Java 中文版&lt;/a&gt;》&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;此书第二版教你如何编写漂亮并高效的代码，虽然这是一本Java书，但其中有很多跨语言的理念。 – Marcio Aguiar&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;patterns-of-enterprise-application-architecture--httptcnzonvp4i&quot;&gt;23、《&lt;a href=&quot;http://t.cn/zOnvP4i&quot;&gt;Patterns of Enterprise Application Architecture / 企业应用架构模式&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;很奇怪，还没人推荐 Martin Fowler 的《企业应用架构模式》- levi rosol&lt;/p&gt;

&lt;h2 id=&quot;the-little-schemerthe-seasoned-schemer-nmiranda&quot;&gt;24、《The Little Schemer》和《The Seasoned Schemer》 nmiranda&lt;/h2&gt;

&lt;p&gt;这两本是LISP的英文书，尚无中文版。
美国东北大学网站上也有电子版。&lt;/p&gt;

&lt;h2 id=&quot;the-inmates-are-running-the-asylum-why-high-tech-products-drive-us-crazy-and-how-to-restore-the-sanityalan-coopervisual-basic&quot;&gt;25、《交互设计之路》英文名：《The Inmates Are Running The Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity》该书作者：Alan Cooper，人称Visual Basic之父，交互设计之父。&lt;/h2&gt;

&lt;p&gt;本书是基于众多商务案例，讲述如何创建更好的、高客户忠诚度的软件产品和基于软件的高科技产品的书。
本书列举了很多真实可信的实际例子，说明目前在软件产品和基于软件的高科技产品中，普遍存在着“难用”的问题。&lt;/p&gt;

&lt;p&gt;作者认为，“难用”问题是由这些产品中存在着的高度“认知摩擦”引起的，
而产生这个问题的根源在于现今软件开发过程中欠缺了一个为用户利益着想的前期“交互设计”阶段。
“难用”的产品不仅损害了用户的利益，最终也将导致企业的失败。&lt;/p&gt;

&lt;p&gt;本书通过一些生动的实例，让人信服地讲述了由作者倡导的“目标导向”交互设计方法在解决“难用”问题方面的有效性，
证实了只有改变现有观念，才能有效地在开发过程中引入交互设计，将产品的设计引向成功。&lt;/p&gt;

&lt;p&gt;本书虽然是一本面向商务人员而编写的书，但也适合于所有参与软件产品和基于软件的高科技产品开发的专业人士，
以及关心软件行业和高科技行业现状与发展的人士阅读。&lt;/p&gt;

&lt;p&gt;他还有另一本中文版著作：《About Face 3 交互设计精髓》&lt;/p&gt;

&lt;h2 id=&quot;whys-poignant-guide-to-ruby-&quot;&gt;26、《Why’s (Poignant) Guide to Ruby 》&lt;/h2&gt;

&lt;p&gt;如果你不是程序员，阅读此书可能会很有趣，但如果你已经是个程序员，可能会有点乏味。&lt;/p&gt;

&lt;h2 id=&quot;unix&quot;&gt;27、《Unix编程艺术》&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is useful regardless operating system you use. – J.F. Sebastian&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;不管你使用什么操作系统，这本书都很有用。 – J.F. Sebastian&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;httptcnzonvhrm&quot;&gt;28、《&lt;a href=&quot;http://t.cn/zOnvhRM&quot;&gt;高效程序员的45个习惯：敏捷开发修炼之道&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;45个习惯，分为7个方面：工作态度、学习、软件交付、反馈、编码、调试和协作。&lt;/p&gt;

&lt;p&gt;每一个具体的习惯里，一开始提出一个谬论，然后展开分析，之后有正队性地提出正确的做法，并设身处地地讲出了正确做法给你个人的“切身感受”，最后列出几条注意事项，帮助你修正自己的做法（“平衡的艺术”）。&lt;/p&gt;

&lt;h2 id=&quot;httptcnzonvzk7&quot;&gt;29、《&lt;a href=&quot;http://t.cn/zOnvzK7&quot;&gt;测试驱动开发&lt;/a&gt;》&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;前面已经提到的很多书都启发了我，并影响了我，但这本书每位程序员都应该读。
它向我展示了单元测试和TDD的重要性，并让我很快上手。 – Curro&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我不关心你的代码有多好或优雅。
如果你没有测试，你或许就如同没有编写代码。
这本书得到的推荐数应该更高些。
人们讨论编写用户喜欢的软件，或既设计出色并健壮的高效代码，但如果你的软件有一堆bug，谈论那些东西毫无意义。– Adam Gent&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;httptcnzonvzyq&quot;&gt;30、《&lt;a href=&quot;http://t.cn/zOnvZYq&quot;&gt;点石成金:访客至上的网页设计秘笈&lt;/a&gt;》&lt;/h2&gt;

&lt;p&gt;可用性设计是Web设计中最重要也是难度最大的一项任务。
《点石成金－访客至上的网页设计秘笈（原书第二版）》作者根据多年从业的经验，剖析用户的心理，
在用户使用的模式、为扫描进行设计、导航设计、主页布局、可用性测试等方面提出了许多独特的观点，
并给出了大量简单、易行的可用性设计的建议。&lt;/p&gt;

&lt;p&gt;本书短小精炼，语言轻松诙谐，书中穿插大量色彩丰富的屏幕截图、趣味丛生的卡通插图以及包含大量信息的图表，
使枯燥的设计原理变得平易近人。&lt;/p&gt;

&lt;p&gt;本书适合从事Web设计和Web开发的技术人员阅读，特别适合为如何留住访问者而苦恼的网站/网页设计人员阅读。
这是一本关于Web设计原则而不是Web设计技术的书。&lt;/p&gt;

&lt;p&gt;本书作者是Web设计专家，具有丰富的实践经验。
他用幽默的语言为你揭示Web设计中重要但却容易被忽视的问题，只需几个小时，
你便能对照书中讲授的设计原则找到网站设计的症结所在，令你的网站焕然一新。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;取决于你所追求的目标。
我喜欢《代码大全》是因纯编程，《点石成金》是一本有关UI设计的卓越书籍。 – Justin Standard&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>Markdown 语法 (简体中文版)</title>
   <link href="http://http://coolshell.info/blog/2014/07/markdown-syntax.html"/>
   <updated>2014-07-11T00:00:00+00:00</updated>
   <id>/blog/2014/07/markdown-syntax</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is Simplelified  Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown: Syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;声明：&lt;/strong&gt; 这份文档派生(fork)于&lt;a href=&quot;http://markdown.tw/&quot;&gt;繁体中文版&lt;/a&gt;，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里&lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md&quot;&gt;查看它的源文件&lt;/a&gt;。「繁体中文版的原始文件可以&lt;a href=&quot;https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md&quot;&gt;查看这里&lt;/a&gt; 。」–By @&lt;a href=&quot;http://twitter.com/riku&quot;&gt;riku&lt;/a&gt; / 本项目托管于 &lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN&quot;&gt;GitCafe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 本项目同时也托管于 &lt;a href=&quot;https://github.com/riku/Markdown-Syntax-CN&quot;&gt;Github&lt;/a&gt; 上，请通过 fork＋pull request 方式来帮忙改进本项目。&lt;/p&gt;

&lt;h1 id=&quot;markdown----markdown-basicshtml&quot;&gt;Markdown 语法说明 (简体中文版) / (&lt;a href=&quot;./markdown-basics.html&quot;&gt;点击查看快速入门&lt;/a&gt;)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;概述&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#philosophy&quot;&gt;宗旨&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#html&quot;&gt;兼容 HTML&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#autoescape&quot;&gt;特殊字符自动转换&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#block&quot;&gt;区块元素&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#p&quot;&gt;段落和换行&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#header&quot;&gt;标题&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#blockquote&quot;&gt;区块引用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#list&quot;&gt;列表&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#precode&quot;&gt;代码区块&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#hr&quot;&gt;分隔线&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#span&quot;&gt;区段元素&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#link&quot;&gt;链接&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#em&quot;&gt;强调&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#code&quot;&gt;代码&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#img&quot;&gt;图片&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#misc&quot;&gt;其它&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#backslash&quot;&gt;反斜杠&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#autolink&quot;&gt;自动链接&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#acknowledgement&quot;&gt;感谢&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;overview&quot;&gt;概述&lt;/h2&gt;

&lt;h3 id=&quot;philosophy&quot;&gt;宗旨&lt;/h3&gt;

&lt;p&gt;Markdown 的目标是实现「易读易写」。&lt;/p&gt;

&lt;p&gt;可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 &lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;Setext&lt;/a&gt;、&lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;atx&lt;/a&gt;、&lt;a href=&quot;http://textism.com/tools/textile/&quot;&gt;Textile&lt;/a&gt;、&lt;a href=&quot;http://docutils.sourceforge.net/rst.html&quot;&gt;reStructuredText&lt;/a&gt;、&lt;a href=&quot;http://www.triptico.com/software/grutatxt.html&quot;&gt;Grutatext&lt;/a&gt; 和 &lt;a href=&quot;http://ettext.taint.org/doc/&quot;&gt;EtText&lt;/a&gt;，而最大灵感来源其实是纯文本电子邮件的格式。&lt;/p&gt;

&lt;p&gt;总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。&lt;/p&gt;

&lt;h3 id=&quot;html&quot;&gt;兼容 HTML&lt;/h3&gt;

&lt;p&gt;Markdown 语法的目标是：成为一种适用于网络的&lt;em&gt;书写&lt;/em&gt;语言。&lt;/p&gt;

&lt;p&gt;Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想&lt;em&gt;不是&lt;/em&gt;要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种&lt;em&gt;发布&lt;/em&gt;的格式，Markdown 是一种&lt;em&gt;书写&lt;/em&gt;的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。&lt;/p&gt;

&lt;p&gt;不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。&lt;/p&gt;

&lt;p&gt;要制约的只有一些 HTML 区块元素――比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;table&amp;gt;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 标签。&lt;/p&gt;

&lt;p&gt;例子如下，在 Markdown 文件里加上一段 HTML 表格：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这是一个普通段落。

&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Foo&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

这是另一个普通段落。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的&lt;code class=&quot;highlighter-rouge&quot;&gt;*强调*&lt;/code&gt;会没有效果。&lt;/p&gt;

&lt;p&gt;HTML 的区段（行内）标签如 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;span&amp;gt;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。&lt;/p&gt;

&lt;p&gt;和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。&lt;/p&gt;

&lt;h3 id=&quot;autoescape&quot;&gt;特殊字符自动转换&lt;/h3&gt;

&lt;p&gt;在 HTML 文件中，有两个字符需要特殊处理： &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; 。 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 符号用于起始标签，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;lt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;amp;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; 字符尤其让网络文档编写者受折磨，如果你要打「&lt;code class=&quot;highlighter-rouge&quot;&gt;AT&amp;amp;T&lt;/code&gt;」 ，你必须要写成「&lt;code class=&quot;highlighter-rouge&quot;&gt;AT&amp;amp;amp;T&lt;/code&gt;」。而网址中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; 字符也要转换。比如你要链接到：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://images.google.com/images?num=30&amp;amp;q=larry+bird
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你必须要把网址转换写为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://images.google.com/images?num=30&amp;amp;amp;q=larry+bird
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;才能放到链接标签的 &lt;code class=&quot;highlighter-rouge&quot;&gt;href&lt;/code&gt; 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。&lt;/p&gt;

&lt;p&gt;Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;amp&lt;/code&gt;;。&lt;/p&gt;

&lt;p&gt;所以你如果要在文档中插入一个版权符号 &lt;code class=&quot;highlighter-rouge&quot;&gt;©&lt;/code&gt;，你可以这样写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;amp;copy;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Markdown 会保留它不动。而若你写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AT&amp;amp;T
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Markdown 就会将它转为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AT&amp;amp;amp;T
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;类似的状况也会发生在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 符号上，因为 Markdown 允许 &lt;a href=&quot;#html&quot;&gt;兼容 HTML&lt;/a&gt; ，如果你是把 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4 &amp;lt; 5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Markdown 将会把它转换为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4 &amp;amp;lt; 5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不过需要注意的是，code 范围内，不论是行内还是区块， &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; 两个符号都&lt;em&gt;一定&lt;/em&gt;会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;block&quot;&gt;区块元素&lt;/h2&gt;

&lt;h3 id=&quot;p&quot;&gt;段落和换行&lt;/h3&gt;

&lt;p&gt;一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。&lt;/p&gt;

&lt;p&gt;「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 标签。&lt;/p&gt;

&lt;p&gt;如果你&lt;em&gt;确实&lt;/em&gt;想要依赖 Markdown 来插入 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 标签的话，在插入处先按入两个以上的空格然后回车。&lt;/p&gt;

&lt;p&gt;的确，需要多费点事（多加空格）来产生 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; ，但是简单地「每个换行都转换为 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;」的方法在 Markdown 中并不适合， Markdown 中 email 式的 &lt;a href=&quot;#blockquote&quot;&gt;区块引用&lt;/a&gt; 和多段落的 &lt;a href=&quot;#list&quot;&gt;列表&lt;/a&gt; 在使用换行来排版的时候，不但更好用，还更方便阅读。&lt;/p&gt;

&lt;h3 id=&quot;header&quot;&gt;标题&lt;/h3&gt;

&lt;p&gt;Markdown 支持两种标题的语法，类 &lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;Setext&lt;/a&gt; 和类 &lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;atx&lt;/a&gt; 形式。&lt;/p&gt;

&lt;p&gt;类 Setext 形式是用底线的形式，利用 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; （最高阶标题）和 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; （第二阶标题），例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This is an H1
=============

This is an H2
-------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;任何数量的 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; 都可以有效果。&lt;/p&gt;

&lt;p&gt;类 Atx 形式则是在行首插入 1 到 6 个 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; ，对应到标题 1 到 6 阶，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 这是 H1

## 这是 H2

###### 这是 H6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;，而行尾的 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 这是 H1 #

## 这是 H2 ##

### 这是 H3 ######
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;blockquote&quot;&gt;区块引用 Blockquotes&lt;/h3&gt;

&lt;p&gt;Markdown 标记区块引用是使用类似 email 中用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; ：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&amp;gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&amp;gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&amp;gt; 
&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&amp;gt; id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; ：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; ：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; This is the first level of quoting.
&amp;gt;
&amp;gt; &amp;gt; This is nested blockquote.
&amp;gt;
&amp;gt; Back to the first level.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; ## 这是一个标题。
&amp;gt; 
&amp;gt; 1.   这是第一行列表项。
&amp;gt; 2.   这是第二行列表项。
&amp;gt; 
&amp;gt; 给出一些例子代码：
&amp;gt; 
&amp;gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择&lt;em&gt;增加引用阶层&lt;/em&gt;。&lt;/p&gt;

&lt;h3 id=&quot;list&quot;&gt;列表&lt;/h3&gt;

&lt;p&gt;Markdown 支持有序列表和无序列表。&lt;/p&gt;

&lt;p&gt;无序列表使用星号、加号或是减号作为列表标记：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*   Red
*   Green
*   Blue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;等同于：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+   Red
+   Green
+   Blue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也等同于：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-   Red
-   Green
-   Blue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;有序列表则使用数字接着一个英文句点：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.  Bird
2.  McHale
3.  Parish
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Bird&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;McHale&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Parish&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你的列表标记写成：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.  Bird
1.  McHale
1.  Parish
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或甚至是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3. Bird
1. McHale
8. Parish
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。&lt;/p&gt;

&lt;p&gt;如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。&lt;/p&gt;

&lt;p&gt;列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。&lt;/p&gt;

&lt;p&gt;要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但是如果你懒，那也行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 
标签包起来，举例来说：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*   Bird
*   Magic
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Bird&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Magic&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但是这个：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*   Bird

*   Magic
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Bird&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Magic&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You&#39;re
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果要在列表项目内放进引用，那 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 就需要缩进：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*   A list item with a blockquote:

    &amp;gt; This is a blockquote
    &amp;gt; inside a list item.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果要放代码区块的话，该区块就需要缩进&lt;em&gt;两次&lt;/em&gt;，也就是 8 个空格或是 2 个制表符：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*   一列表项包含一个列表区块：

        &amp;lt;代码写在这&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当然，项目列表很可能会不小心产生，像是下面这样的写法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1986. What a great season.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;换句话说，也就是在行首出现&lt;em&gt;数字-句点-空白&lt;/em&gt;，要避免这样的状况，你可以在句点前面加上反斜杠。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1986\. What a great season.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;precode&quot;&gt;代码区块&lt;/h3&gt;

&lt;p&gt;和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;code&amp;gt;&lt;/code&gt; 标签来把代码区块包起来。&lt;/p&gt;

&lt;p&gt;要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这是一个普通段落：

    这是一个代码区块。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Markdown 会转换成：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;这是一个普通段落：&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;这是一个代码区块。
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Here is an example of AppleScript:

    tell application &quot;Foo&quot;
        beep
    end tell
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;Here is an example of AppleScript:&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;tell application &quot;Foo&quot;
    beep
end tell
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。&lt;/p&gt;

&lt;p&gt;在代码区块里面， &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; 、 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;div class=&quot;footer&quot;&amp;gt;
        &amp;amp;copy; 2004 Foo Corporation
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;会被转换为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;div class=&quot;footer&quot;&amp;amp;gt;
    &amp;amp;amp;copy; 2004 Foo Corporation
&amp;amp;lt;/div&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。&lt;/p&gt;

&lt;h3 id=&quot;hr&quot;&gt;分隔线&lt;/h3&gt;

&lt;p&gt;你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* * *

***

*****

- - -

---------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;span&quot;&gt;区段元素&lt;/h2&gt;

&lt;h3 id=&quot;link&quot;&gt;链接&lt;/h3&gt;

&lt;p&gt;Markdown 支持两种形式的链接语法： &lt;em&gt;行内式&lt;/em&gt;和&lt;em&gt;参考式&lt;/em&gt;两种形式。&lt;/p&gt;

&lt;p&gt;不管是哪一种，链接文字都是用 [方括号] 来标记。&lt;/p&gt;

&lt;p&gt;要建立一个&lt;em&gt;行内式&lt;/em&gt;的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This is [an example](http://example.com/ &quot;Title&quot;) inline link.

[This link](http://example.net/) has no title attribute.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;会产生：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;This is &amp;lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&amp;gt;
an example&amp;lt;/a&amp;gt; inline link.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;a href=&quot;http://example.net/&quot;&amp;gt;This link&amp;lt;/a&amp;gt; has no
title attribute.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你是要链接到同样主机的资源，你可以使用相对路径：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;See my [About](/about/) page for details.   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;参考式&lt;/em&gt;的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This is [an example][id] reference-style link.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你也可以选择性地在两个方括号中间加上一个空格：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This is [an example] [id] reference-style link.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接着，在文件的任意处，你可以把这个标记的链接内容定义出来：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[id]: http://example.com/  &quot;Optional Title Here&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;链接内容定义的形式为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字&lt;/li&gt;
  &lt;li&gt;接着一个冒号&lt;/li&gt;
  &lt;li&gt;接着一个以上的空格或制表符&lt;/li&gt;
  &lt;li&gt;接着链接的网址&lt;/li&gt;
  &lt;li&gt;选择性地接着 title 内容，可以用单引号、双引号或是括弧包着&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面这三种链接的定义都是相同：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[foo]: http://example.com/  &quot;Optional Title Here&quot;
[foo]: http://example.com/  &#39;Optional Title Here&#39;
[foo]: http://example.com/  (Optional Title Here)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;请注意：&lt;/strong&gt;有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。&lt;/p&gt;

&lt;p&gt;链接网址也可以用方括号包起来：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[id]: &amp;lt;http://example.com/&amp;gt;  &quot;Optional Title Here&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[id]: http://example.com/longish/path/to/resource/here
    &quot;Optional Title Here&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。&lt;/p&gt;

&lt;p&gt;链接辨别标签可以有字母、数字、空白和标点符号，但是并&lt;em&gt;不&lt;/em&gt;区分大小写，因此下面两个链接是一样的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[link text][a]
[link text][A]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;隐式链接标记&lt;/em&gt;功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Google][]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后定义链接内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Google]: http://google.com/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Visit [Daring Fireball][] for more information.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后接着定义链接：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Daring Fireball]: http://daringfireball.net/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。&lt;/p&gt;

&lt;p&gt;下面是一个参考式链接的范例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &quot;Google&quot;
  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [3]: http://search.msn.com/    &quot;MSN Search&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果改成用链接名称的方式写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &quot;Google&quot;
  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面两种写法都会产生下面的 HTML。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;I get 10 times more traffic from &amp;lt;a href=&quot;http://google.com/&quot;
title=&quot;Google&quot;&amp;gt;Google&amp;lt;/a&amp;gt; than from
&amp;lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&amp;gt;Yahoo&amp;lt;/a&amp;gt;
or &amp;lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&amp;gt;MSN&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)
than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or
[MSN](http://search.msn.com/ &quot;MSN Search&quot;).
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。&lt;/p&gt;

&lt;p&gt;使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。&lt;/p&gt;

&lt;h3 id=&quot;em&quot;&gt;强调&lt;/h3&gt;

&lt;p&gt;Markdown 使用星号（&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;）和底线（&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;）作为标记强调字词的符号，被 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; 包围的字词会被转成用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt; 标签包围，用两个 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; 包起来的话，则会被转成 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;会转成：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;em&amp;gt;single asterisks&amp;lt;/em&amp;gt;

&amp;lt;em&amp;gt;single underscores&amp;lt;/em&amp;gt;

&amp;lt;strong&amp;gt;double asterisks&amp;lt;/strong&amp;gt;

&amp;lt;strong&amp;gt;double underscores&amp;lt;/strong&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。&lt;/p&gt;

&lt;p&gt;强调也可以直接插在文字中间：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;un*frigging*believable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但是&lt;strong&gt;如果你的 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; 两边都有空白的话，它们就只会被当成普通的符号&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\*this text is surrounded by literal asterisks\*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;code&quot;&gt;代码&lt;/h3&gt;

&lt;p&gt;如果要标记一小段行内代码，你可以用反引号把它包起来（&lt;code class=&quot;highlighter-rouge&quot;&gt;`&lt;/code&gt;），例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Use the `printf()` function.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;会产生：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;Use the &amp;lt;code&amp;gt;printf()&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;``There is a literal backtick (`) here.``
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这段语法会产生：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;There is a literal backtick (`) here.&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;会产生：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;A single backtick in a code span: &amp;lt;code&amp;gt;`&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;A backtick-delimited string in a code span: &amp;lt;code&amp;gt;`foo`&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在代码区段内，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; 和方括号&lt;strong&gt;都&lt;/strong&gt;会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Please don&#39;t use any `&amp;lt;blink&amp;gt;` tags.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;转为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;Please don&#39;t use any &amp;lt;code&amp;gt;&amp;amp;lt;blink&amp;amp;gt;&amp;lt;/code&amp;gt; tags.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你也可以这样写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`&amp;amp;#8212;` is the decimal-encoded equivalent of `&amp;amp;mdash;`.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以产生：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;amp;amp;#8212;&amp;lt;/code&amp;gt; is the decimal-encoded
equivalent of &amp;lt;code&amp;gt;&amp;amp;amp;mdash;&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;img&quot;&gt;图片&lt;/h3&gt;

&lt;p&gt;很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。&lt;/p&gt;

&lt;p&gt;Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： &lt;em&gt;行内式&lt;/em&gt;和&lt;em&gt;参考式&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;行内式的图片语法看起来像是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &quot;Optional title&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;详细叙述如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个惊叹号 &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;接着一个方括号，里面放上图片的替代文字&lt;/li&gt;
  &lt;li&gt;接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上
选择性的 ‘title’ 文字。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考式的图片语法则长得像这样：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![Alt text][id]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[id]: url/to/image  &quot;Optional title attribute&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 标签。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;misc&quot;&gt;其它&lt;/h2&gt;

&lt;h3 id=&quot;autolink&quot;&gt;自动链接&lt;/h3&gt;

&lt;p&gt;Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;http://example.com/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Markdown 会转为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;http://example.com/&quot;&amp;gt;http://example.com/&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;address@example.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Markdown 会转成：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;&amp;amp;#x6D;&amp;amp;#x61;i&amp;amp;#x6C;&amp;amp;#x74;&amp;amp;#x6F;:&amp;amp;#x61;&amp;amp;#x64;&amp;amp;#x64;&amp;amp;#x72;&amp;amp;#x65;
&amp;amp;#115;&amp;amp;#115;&amp;amp;#64;&amp;amp;#101;&amp;amp;#120;&amp;amp;#x61;&amp;amp;#109;&amp;amp;#x70;&amp;amp;#x6C;e&amp;amp;#x2E;&amp;amp;#99;&amp;amp;#111;
&amp;amp;#109;&quot;&amp;gt;&amp;amp;#x61;&amp;amp;#x64;&amp;amp;#x64;&amp;amp;#x72;&amp;amp;#x65;&amp;amp;#115;&amp;amp;#115;&amp;amp;#64;&amp;amp;#101;&amp;amp;#120;&amp;amp;#x61;
&amp;amp;#109;&amp;amp;#x70;&amp;amp;#x6C;e&amp;amp;#x2E;&amp;amp;#99;&amp;amp;#111;&amp;amp;#109;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在浏览器里面，这段字串（其实是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;mailto:address@example.com&quot;&amp;gt;address@example.com&amp;lt;/a&amp;gt;&lt;/code&gt;）会变成一个可以点击的「address@example.com」链接。&lt;/p&gt;

&lt;p&gt;（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）&lt;/p&gt;

&lt;h3 id=&quot;backslash&quot;&gt;反斜杠&lt;/h3&gt;

&lt;p&gt;Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt; 标签），你可以在星号的前面加上反斜杠：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\*literal asterisks\*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\   反斜线
`   反引号
*   星号
_   底线
{}  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;acknowledgement&quot;&gt;感谢&lt;/h2&gt;

&lt;p&gt;感谢 &lt;a href=&quot;https://twitter.com/#!/leafy7382&quot;&gt;leafy7382&lt;/a&gt; 协助翻译，&lt;a href=&quot;http://iamhlb.com/&quot;&gt;hlb&lt;/a&gt;、&lt;a href=&quot;http://twitter.com/randylien&quot;&gt;Randylien&lt;/a&gt; 帮忙润稿，&lt;a href=&quot;https://twitter.com/#!/ethantw&quot;&gt;ethantw&lt;/a&gt; 的&lt;a href=&quot;http://ethantw.net/projects/han/&quot;&gt;汉字标准格式・CSS Reset&lt;/a&gt;， &lt;a href=&quot;http://kidwm.net/&quot;&gt;WM&lt;/a&gt; 回报文字错误。&lt;/p&gt;

&lt;p&gt;感谢 &lt;a href=&quot;https://github.com/fenprace&quot;&gt;fenprace&lt;/a&gt;，&lt;a href=&quot;https://github.com/addv&quot;&gt;addv&lt;/a&gt;。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>markdown 快速入门</title>
   <link href="http://http://coolshell.info/blog/2014/07/markdown-basics.html"/>
   <updated>2014-07-10T00:00:00+00:00</updated>
   <id>/blog/2014/07/markdown-basics</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;声明：&lt;/strong&gt; 这份文档派生(fork)于&lt;a href=&quot;http://markdown.tw/&quot;&gt;繁体中文版&lt;/a&gt;，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里&lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/basics.md&quot;&gt;查看它的源文件&lt;/a&gt;。「繁体中文版的原始文件可以&lt;a href=&quot;https://github.com/othree/markdown-syntax-zhtw/blob/master/basics.md&quot;&gt;查看这里&lt;/a&gt;」–By @&lt;a href=&quot;http://twitter.com/riku&quot;&gt;riku&lt;/a&gt; / 本项目托管于 &lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN&quot;&gt;GitCafe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 本项目同时也托管于 &lt;a href=&quot;https://github.com/riku/Markdown-Syntax-CN&quot;&gt;Github&lt;/a&gt;上，请通过 fork＋pull request 方式来帮忙改进本项目。&lt;/p&gt;

&lt;h1 id=&quot;markdown-basics---markdown-syntaxhtml&quot;&gt;Markdown: Basics （快速入门） / (&lt;a href=&quot;./markdown-syntax.html&quot;&gt;点击查看完整语法说明&lt;/a&gt;)&lt;/h1&gt;

&lt;h2 id=&quot;getting-the-gist-of-markdowns-formatting-syntax&quot;&gt;Getting the Gist of Markdown’s Formatting Syntax&lt;/h2&gt;

&lt;p&gt;此页提供了 Markdown 的简单概念， &lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md&quot; title=&quot;Markdown Syntax&quot;&gt;语法说明&lt;/a&gt; 页提供了完整详细的文档，说明了每项功能。但是 Markdown 其实很简单就可以上手，此页文档提供了一些范例，并且每个范例都会提供输出的 HTML 结果。&lt;/p&gt;

&lt;p&gt;其实直接试试看也是一个很不错的方法， &lt;a href=&quot;http://daringfireball.net/projects/markdown/dingus&quot; title=&quot;Markdown Dingus&quot;&gt;Dingus&lt;/a&gt; 是一个网页应用程序，你可以把自已编写的 Markdown 文档转成 XHTML。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;段落、标题、区块代码&lt;/h2&gt;

&lt;p&gt;一个段落是由一个以上的连接的行句组成，而一个以上的空行则会划分出不同的段落（空行的定义是显示上看起来像是空行，就被视为空行，例如有一行只有空白和 tab，那该行也会被视为空行），一般的段落不需要用空白或换行缩进。&lt;/p&gt;

&lt;p&gt;Markdown 支持两种标题的语法，&lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;Setext&lt;/a&gt; 和 &lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;atx&lt;/a&gt; 形式。Setext 形式是用底线的形式，利用 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; （最高阶标题）和 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; （第二阶标题），Atx 形式在行首插入 1 到 6 个 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; ，对应到标题 1 到 6 阶。&lt;/p&gt;

&lt;p&gt;区块引用则使用 email 形式的 ‘&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;’ 角括号。&lt;/p&gt;

&lt;p&gt;Markdown 语法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A First Level Header
====================
A Second Level Header
---------------------

Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.

The quick brown fox jumped over the lazy
dog&#39;s back.
### Header 3

&amp;gt; This is a blockquote.
&amp;gt; 
&amp;gt; This is the second paragraph in the blockquote.
&amp;gt;
&amp;gt; ## This is an H2 in a blockquote
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出 HTML 为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;h1&amp;gt;A First Level Header&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;A Second Level Header&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The quick brown fox jumped over the lazy
dog&#39;s back.&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Header 3&amp;lt;/h3&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;This is a blockquote.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This is the second paragraph in the blockquote.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;This is an H2 in a blockquote&amp;lt;/h2&amp;gt;
&amp;lt;/blockquote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;修辞和强调&lt;/h3&gt;

&lt;p&gt;Markdown 使用星号和底线来标记需要强调的区段。&lt;/p&gt;

&lt;p&gt;Markdown 语法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Some of these words *are emphasized*.
Some of these words _are emphasized also_.
Use two asterisks for **strong emphasis**.
Or, if you prefer, __use two underscores instead__.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出 HTML 为:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;Some of these words &amp;lt;em&amp;gt;are emphasized&amp;lt;/em&amp;gt;.
Some of these words &amp;lt;em&amp;gt;are emphasized also&amp;lt;/em&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Use two asterisks for &amp;lt;strong&amp;gt;strong emphasis&amp;lt;/strong&amp;gt;.
Or, if you prefer, &amp;lt;strong&amp;gt;use two underscores instead&amp;lt;/strong&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;列表&lt;/h2&gt;

&lt;p&gt;无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* Candy.
* Gum.
* Booze.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;加号：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ Candy.
+ Gum.
+ Booze.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;和减号&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Candy.
- Gum.
- Booze.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;都会输出 HTML 为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Candy.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Gum.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Booze.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;有序的列表则是使用一般的数字接着一个英文句点作为项目标记：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Red
2. Green
3. Blue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出 HTML 为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Red&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Green&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Blue&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你在项目之间插入空行，那项目的内容会用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 包起来，你也可以在一个项目内放上多个段落，只要在它前面缩排 4 个空白或 1 个 tab 。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* A list item.
With multiple paragraphs.

* Another item in the list.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出 HTML 为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;A list item.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;With multiple paragraphs.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Another item in the list.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt; ### 链接 ###
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Markdown 支援两种形式的链接语法： &lt;em&gt;行内&lt;/em&gt; 和 &lt;em&gt;参考&lt;/em&gt; 两种形式，两种都是使用角括号来把文字转成连结。&lt;/p&gt;

&lt;p&gt;行内形式是直接在后面用括号直接接上链接：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This is an [example link](http://example.com/).
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出 HTML 为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;This is an &amp;lt;a href=&quot;http://example.com/&quot;&amp;gt;
example link&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你也可以选择性的加上 title 属性：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This is an [example link](http://example.com/ &quot;With a Title&quot;).
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出 HTML 为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;This is an &amp;lt;a href=&quot;http://example.com/&quot; title=&quot;With a Title&quot;&amp;gt;
example link&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I get 10 times more traffic from [Google][1] than from
[Yahoo][2] or [MSN][3].

[1]: http://google.com/ &quot;Google&quot;
[2]: http://search.yahoo.com/ &quot;Yahoo Search&quot;
[3]: http://search.msn.com/ &quot;MSN Search&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出 HTML 为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;I get 10 times more traffic from &amp;lt;a href=&quot;http://google.com/&quot;
title=&quot;Google&quot;&amp;gt;Google&amp;lt;/a&amp;gt; than from &amp;lt;a href=&quot;http://search.yahoo.com/&quot;
title=&quot;Yahoo Search&quot;&amp;gt;Yahoo&amp;lt;/a&amp;gt; or &amp;lt;a href=&quot;http://search.msn.com/&quot;
title=&quot;MSN Search&quot;&amp;gt;MSN&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;title 属性是选择性的，链接名称可以用字母、数字和空格，但是不分大小写：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I start my morning with a cup of coffee and
[The New York Times][NY Times].

[ny times]: http://www.nytimes.com/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出 HTML 为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;I start my morning with a cup of coffee and
&amp;lt;a href=&quot;http://www.nytimes.com/&quot;&amp;gt;The New York Times&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;图片&lt;/h3&gt;

&lt;p&gt;图片的语法和链接很像。&lt;/p&gt;

&lt;p&gt;行内形式（title 是选择性的）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![alt text](/path/to/img.jpg &quot;Title&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;参考形式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![alt text][id]

[id]: /path/to/img.jpg &quot;Title&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面两种方法都会输出 HTML 为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;/path/to/img.jpg&quot; alt=&quot;alt text&quot; title=&quot;Title&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;代码&lt;/h3&gt;
&lt;p&gt;在一般的段落文字中，你可以使用反引号 &lt;code class=&quot;highlighter-rouge&quot;&gt;`&lt;/code&gt; 来标记代码区段，区段内的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I strongly recommend against using any `&amp;lt;blink&amp;gt;` tags.

I wish SmartyPants used named entities like `&amp;amp;mdash;`
instead of decimal-encoded entites like `&amp;amp;#8212;`.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出 HTML 为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;I strongly recommend against using any
&amp;lt;code&amp;gt;&amp;amp;lt;blink&amp;amp;gt;&amp;lt;/code&amp;gt; tags.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I wish SmartyPants used named entities like
&amp;lt;code&amp;gt;&amp;amp;amp;mdash;&amp;lt;/code&amp;gt; instead of decimal-encoded
entites like &amp;lt;code&amp;gt;&amp;amp;amp;#8212;&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 也一样会自动转成 HTML 实体。&lt;/p&gt;

&lt;p&gt;Markdown 语法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If you want your page to validate under XHTML 1.0 Strict,
you&#39;ve got to put paragraph tags in your blockquotes:

&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出 HTML 为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;If you want your page to validate under XHTML 1.0 Strict,
you&#39;ve got to put paragraph tags in your blockquotes:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;blockquote&amp;amp;gt;
&amp;amp;lt;p&amp;amp;gt;For example.&amp;amp;lt;/p&amp;amp;gt;
&amp;amp;lt;/blockquote&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>C语言高级编程指南</title>
   <link href="http://http://coolshell.info/blog/2014/07/c-advaced-programming.html"/>
   <updated>2014-07-05T00:00:00+00:00</updated>
   <id>/blog/2014/07/c-advaced-programming</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;整形溢出和提升&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;大部分 C 程序员都以为基本的整形操作都是安全的其实不然,看下面这个例子,
你觉得输出结果是什么:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int argc, char** argv) {
    long i = -1;

    if (i &amp;lt; sizeof(i)) {
         printf(&quot;OK\n&quot;);
    }
    else {
         printf(&quot;error\n&quot;);
    }

    return 0;
} 当一个变量转换成无符号整形时,i的值不再是-1,而是 size_t的最大值,因 为sizeof操作返回的是一个 size_t类型的无符号数。 在C99/C11标准里写道:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;“If the operand that has unsigned integer type has rank greater or
equal to the rank of the type of the other operand, then the operand
with signed integer type is converted to the type of the operand with
unsigned integer type.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在C标准里面 size_t至少是一个 16 位的无符号整数,对于给定的架构 size_t 一般对应long,所以sizeof（int）和size_t至少相等,这就带来了可移植性的问题,C标准没有定义 short, int,long,longlong的大小,只是说明了他们的最小长度,对于 x86_64 架构,long在Linux下是64位,而在64位Windows下是32位。一般的方法是采用固定长度的类型比如定义在C99头文件stdint.h中的uint16_t,int32_t,uint_least16_t,uint_fast16_t等。&lt;/p&gt;

&lt;p&gt;如果 int可以表示原始类型的所有值,那么这个操作数会转换成 int,否则
他会转换成 unsigned int。下面这个函数在 32 位平台返回 65536,但是在 16 位系统返回 0。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uint32_t sum()
{
    uint16_t a = 65535;
    uint16_t b = 1;
    return a+b;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对于char 类型到底是 signed 还是 unsigned 取决于硬件架构和操作系统,通常
由特定平台的 ABI(Application Binary Interface) 指定,如果是 signed char,下面的代码输出-128 和-127,否则输出 128,129(x86 架构)。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char c = 128;
char d = 129;
printf(&quot;%d,%d\n&quot;,c,d);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;##内存管理和分配&lt;/p&gt;

&lt;p&gt;malloc 函数分配制定字节大小的内存,对象未被初始化,如果 size 是 0 取
决与系统实现。malloc(0)返回一个空指针或者 unique pointer,如果 size 是表达式的运算结果,确保没有整形溢出。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“If the size of the space requested is 0, the behavior is
implementation- defined: the value returned shall be either a null
pointer or a unique pointer.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;size_t computed_size;

if (elem_size &amp;amp;&amp;amp; num &amp;gt; SIZE_MAX / elem_size) {
    errno = ENOMEM;
    err(1, &quot;overflow&quot;);
}

computed_size = elem_size*num;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;malloc不会给分配的内存初始化，如果要对新分配的内存初始化，可以用calloc代替malloc,一般情况下给序列分配相等大小的元素时,用calloc来代替用表达式计算大小,calloc 会把内存初始化为 0。&lt;/p&gt;

&lt;p&gt;realloc 用来对已经分配内存的对象改变大小,如果新的 size 更大,额外的空间
没 有 被 初 始 化 , 如 果 提 供 给 realloc 的 指 针 是 空 指 针 , realloc 就 等 效 于malloc,如果原指针非空而 new size是0,结果依赖于操作系统的具体实现。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“In case of failure realloc shall return NULL and leave provided memory
object intact. Thus it is important not only to check for integer
overflow of size argument, but also to correctly handle object size if
realloc fails.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面这段代码可以带你领会malloc,calloc，realloc,free的用法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;malloc.h&amp;gt;
#include &amp;lt;errno.h&amp;gt;

#define VECTOR_OK            0
#define VECTOR_NULL_ERROR    1
#define VECTOR_SIZE_ERROR    2
#define VECTOR_ALLOC_ERROR   3

struct vector {
    int *data;
    size_t size;
};

int create_vector(struct vector *vc, size_t num) {

    if (vc == NULL) {
        return VECTOR_NULL_ERROR;
    }

    vc-&amp;gt;data = 0;
    vc-&amp;gt;size = 0;

    /* check for integer and SIZE_MAX overflow */
    if (num == 0 || SIZE_MAX / num &amp;lt; sizeof(int)) {
        errno = ENOMEM;
        return VECTOR_SIZE_ERROR;
    }

    vc-&amp;gt;data = calloc(num, sizeof(int));

    /* calloc faild */
    if (vc-&amp;gt;data == NULL) {
        return VECTOR_ALLOC_ERROR;
    }

    vc-&amp;gt;size = num * sizeof(int);
    return VECTOR_OK;
}

int grow_vector(struct vector *vc) {

    void *newptr = 0;
    size_t newsize;

    if (vc == NULL) {
        return VECTOR_NULL_ERROR;
    }


    /* check for integer and SIZE_MAX overflow */
    if (vc-&amp;gt;size == 0 || SIZE_MAX / 2 &amp;lt; vc-&amp;gt;size) {
        errno = ENOMEM;
        return VECTOR_SIZE_ERROR;
    }

    newsize = vc-&amp;gt;size * 2;

    newptr = realloc(vc-&amp;gt;data, newsize);

    /* realloc faild; vector stays intact size was not changed */
    if (newptr == NULL) {
        return VECTOR_ALLOC_ERROR;
    }

    /* upon success; update new address and size */
    vc-&amp;gt;data = newptr;
    vc-&amp;gt;size = newsize;
    return VECTOR_OK;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;##避免重大错误&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用未初始化的变量，
 C语言要求所有变量在使用之前要初始化，使用未初始化的变量会造成为定义的行为，这和C++不同，C++保证所有变量在使用之前都得到初始化，Java&lt;strong&gt;尽量保证&lt;/strong&gt;变量使用前的得到初始化，如类基本数据成员会被初始化为默认值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;free错误
对空指针调用 free,对不是由 malloc family 函数分配的指针调用 free,或者对
已经调用 free 的指针再次调用 free。
一开始初始化指针为NULL可以减少错误,GCC和Clang编译器有-Wuninitialized 选项来对未初始化的变量显示警告信息,另外不要将同一个指针用于静态变量和动态变量。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char *ptr = NULL;
void nullfree(void **pptr) {
    void *ptr = *pptr;
    assert(ptr != NULL)
    free(ptr);
    *pptr = NULL;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;3.对空指针解引用，数组越界访问&lt;/p&gt;

&lt;p&gt;对NULL指针或者free’d内存解引用，数组越界访问，是很明显的错误，为了消除这种错误，一般的做法就是增加数组越界检查的功能，比如Java里的array就有下标检查的功能，但是这样会带来严重的性能代价，我们要修改ABI（application binary interface），让每个指针都跟随着它的范围信息，在数值计算中cost is terrible。&lt;/p&gt;

&lt;p&gt;4.违反类型规则&lt;/p&gt;

&lt;p&gt;把int×指针cast成float×，然后对它解引用，在C里面会引发undefined behavior，C规定这种类型的转换需要使用memset，C++里面有个reinterpret_cast函数用于无关类型之间的转换，reinterpret_cast &lt;new_type&gt; (expression)&lt;/new_type&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;##防止内存泄漏&lt;/p&gt;

&lt;p&gt;内存泄漏发生在程序不再使用的动态内存没有得到释放，这需要我们掌握动态分配对象的作用域，尤其是什么时候该调用free来释放内存，常用的集中方法如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在程序启动的时候分配
 在程序启动的时候分配需要的heap memory，程序退出时把释放的任务交给操作系统，这种方法一般适用于程序运行后马上退出的那种。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用变长数组（VLA）
 如果你需要一块变长大小的空间并且作用域在函数中，变长数组可以帮到你，但是也有一个限制，一个函数中的变长数组内存大小一般不超过几百字节，这个数字C标准没有明确的定义，最好是把内存分配到栈上，在栈上允许分配的最大VLA内存是SIZE_MAX，掌握目标平台的栈大小可以有效的防止栈溢出。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用引用计数
 引用计数是一个很好的管理内存的方法，特别是当你不希望自己定义的对象被复制时，每一次赋值把引用计数加1,每次失去引用就把引用计数减1,当引用计数等于0时，以为的对象已经不再需要了，我们需要释放对象占用的内存，由于C不提供自动的析构函数，我们必须手动释放内存，看一个例子：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
    
#define MAX_REF_OBJ 100
#define RC_ERROR -1
    
struct mem_obj_t{
    void *ptr;
    uint16_t count;
};
    
static struct mem_obj_t references[MAX_REF_OBJ];
static uint16_t reference_count = 0;
    
/* create memory object and return handle */
uint16_t create(size_t size){
    
    if (reference_count &amp;gt;= MAX_REF_OBJ)
        return RC_ERROR;

if (size){
  void *ptr = calloc(1, size);

if (ptr != NULL){
    references[reference_count].ptr = ptr;
    references[reference_count].count = 0;
    return reference_count++;
                }
        }

    return RC_ERROR;
}
        
        
/* get memory object and increment reference counter */
void* retain(uint16_t handle){

if(handle &amp;lt; reference_count &amp;amp;&amp;amp; handle &amp;gt;= 0){
    references[handle].count++;
    return references[handle].ptr;
    } else {
        return NULL;
    }
}
    
/* decrement reference counter */
void release(uint16_t handle){
printf(&quot;release\n&quot;);

if(handle &amp;lt; reference_count &amp;amp;&amp;amp; handle &amp;gt;= 0){
    struct mem_obj_t *object = &amp;amp;references[handle];

    if (object-&amp;gt;count &amp;lt;= 1){
        printf(&quot;released\n&quot;);
    free(object-&amp;gt;ptr);
    reference_count--;
} else {
    printf(&quot;decremented\n&quot;);
    object-&amp;gt;count--;
        }
     }
} C++标准库有个auto_ptr智能指针，能够自动释放指针所指对象的内存，C++ boost库有个boost：：shared_ptr智能指针，内置引用计数，支持拷贝和赋值，看下面这个例子：
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;

  &lt;p&gt;“Objects of shared_ptr types have the ability of taking ownership of a pointer and share that ownership: once they take ownership, the group of owners of a pointer become responsible for its deletion when the last one of them releases that ownership.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;boost/smart_ptr.hpp&amp;gt;
#include &amp;lt;iostream&amp;gt;
int main()
{
    // Basic useage
    boost::shared_ptr&amp;lt;int&amp;gt; p1(new int(10));
    std::cout &amp;lt;&amp;lt; &quot;ref count of p1: &quot; &amp;lt;&amp;lt; p1.use_count() &amp;lt;&amp;lt; std::endl;
    boost::shared_ptr&amp;lt;int&amp;gt; p2(p1); // or p2 = p1;
    std::cout &amp;lt;&amp;lt; &quot;ref count of p1: &quot; &amp;lt;&amp;lt; p1.use_count() &amp;lt;&amp;lt; std::endl;
    *p1 = 999;
    std::cout &amp;lt;&amp;lt; &quot;*p2: &quot; &amp;lt;&amp;lt; *p2 &amp;lt;&amp;lt; std::endl;
    p2.reset();
    std::cout &amp;lt;&amp;lt; &quot;ref count of p1: &quot; &amp;lt;&amp;lt; p1.use_count() &amp;lt;&amp;lt; std::endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4.内存池，有利于减少内存碎片，看下面这个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;

struct mem_pool_t{
void* ptr;//指向内存池起始地址
size_t size;//内存池大小
size_t used;//已用内存大小
};

//create memory pool
struct mem_pool_t* create_pool(size_t size){
mem_pool_t* pool=calloc(1,sizeof(struct men_pool_t));
if(pool!=NULL){
void* mem=calloc(1,size);
if(mem!=NULL){
pool-&amp;gt;ptr=mem;
pool-&amp;gt;size=size;
pool-&amp;gt;used=0;
return pool;
        }
    }
return NULL;
}

//allocate memory from pool
void* pool_alloc(mem_pool_t* pool,size_t size){
if(pool=NULL)
    return NULL;
size_t bytes_left=pool-&amp;gt;size-pool-&amp;gt;used;
if(size&amp;amp;&amp;amp;size&amp;lt;=bytes_left){
    void* mem=pool-&amp;gt;ptr+pool-&amp;gt;used;
    pool-&amp;gt;used+=size;
    return mem;
    }
return NULL；
}

／／release memory of the pool
void pool_free(mem_pool_t* pool){
if(pool!=NULL){
free(pool-&amp;gt;ptr);
free(pool);
 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;5.垃圾回收机制
 引用计数采用的方法是当内存不再需要时得到手动释放，垃圾回收发生在内存分配失败或者内存到达一定的水位（watermarks），实现垃圾回收最简单的一个算法是MARK AND SWEEP算法，该算法的思路是遍历所有动态分配对象的内存，标记那些还能继续使用的，回收那些没有被标记的内存。
    Java采用的垃圾回收机制就更复杂了，思路也是回收那些不再使用的内存，JAVA的垃圾回收和C++的析构函数又不一样，C++保证对象在使用之前得到初始化，对象超出作用域之后内存得到释放，而JAVA不能保证对象一定被析构。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;##指针和数组&lt;/p&gt;

&lt;p&gt;我们一般的概念里指针和数组名是可互换的，但是在编译器里他们被不同的对待，当我们说一个对象或者表达式具有某种类型的时候我们一般是说这个对象是个左值（lvalue），当对象不是const的时候，左值是可以修改的，比如对象是复制操作符的左参数，而数组名是一个const左值，指向地一个元素的const指针，所以你不能给数组名赋值或者意图改变数组名，如果表达式是数组类型，数组名通常转换成指向地一个元素的指针。&lt;/p&gt;

&lt;p&gt;但是也有例外，什么情况下数组名不是一个指针呢？
1.当它是sizeof操作符的操作数时，返回数组占的内存字节数
2.当它是取地址操作&amp;amp;的操作数时，返回一个数组的地址&lt;/p&gt;

&lt;p&gt;看下面这个例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;short a[] = {1,2,3};
short *pa;
short (*px)[];

void init(){
    pa = a;
    px = &amp;amp;a;

    printf(&quot;a:%p; pa:%p; px:%p\n&quot;, a, pa, px);

    printf(&quot;a[1]:%i; pa[1]:%i (*px)[1]:%i\n&quot;, a[1], pa[1],(*px)[1]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;a是一个short类型数组，pa是一个指向short类型的指针，px呢？
px是一个指向数组类型的指针，在a被赋值给pa之前，他的值被转换成一个指向数组第一个元素的指针，下面那个a却没有转换，因为遇到的是&amp;amp;操作符。
数组下标a[1]等价于&lt;em&gt;(a+1),和p[1]一样，也指向&lt;/em&gt;(p+1)，但是两者还是有区别的，a是一个数组，它实际上存储的是第一个元素的地址，所以数组a是用来定位第一个元素的，而pa不一样，它就是一个指针，不是用来定位的。
再比如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int a[10];
int b[10];
int *a;
c=&amp;amp;a[0];//c是指向数组a地一个元素的指针
c=a;//a自动转换成指向第一个元素的指针，实际上是指针拷贝
b=a;//非法的，你不能用赋值符把一个数组的所有元素赋给另一个数组
a=c;//非法的，你不能修改const指针的值
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Java编程Tips</title>
   <link href="http://http://coolshell.info/blog/2014/06/26-methods-to-improve-java-performance.html"/>
   <updated>2014-06-18T00:00:00+00:00</updated>
   <id>/blog/2014/06/26-methods-to-improve-java-performance</id>
   <content type="html">&lt;p&gt;原文： &lt;a href=&quot;http://www.iteye.com/magazines/66&quot;&gt;Java编程中“为了性能”尽量要做到的一些地方&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;作者： &lt;a href=&quot;http://javatgo.iteye.com/&quot;&gt;javatgo&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最近的机器内存又爆满了，除了新增机器内存外，还应该好好review一下我们的代码，有很多代码编写过于随意化，这些不好的习惯或对程序语言的不了解是应该好好打压打压了。&lt;/p&gt;

&lt;p&gt;下面是参考网络资源总结的一些在Java编程中尽可能要做到的一些地方。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 尽量在合适的场合使用单例&lt;/h2&gt;

&lt;p&gt;使用单例可以减轻加载的负担，缩短加载的时间，提高加载的效率，但并不是所有地方都适用于单例，简单来说，单例主要适用于以下三个方面：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;控制资源的使用，通过线程同步来控制资源的并发访问；&lt;/li&gt;
&lt;li&gt;控制实例的产生，以达到节约资源的目的；&lt;/li&gt;
&lt;li&gt;控制数据共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-1&quot;&gt;2. 尽量避免随意使用静态变量&lt;/h2&gt;

&lt;p&gt;要知道，当某个对象被定义为stataic变量所引用，那么gc通常是不会回收这个对象所占有的内存，如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class A{  
    static B b = new B();  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此时静态变量b的生命周期与A类同步，如果A类不会卸载，那么b对象会常驻内存，直到程序终止。&lt;/p&gt;

&lt;h2 id=&quot;java&quot;&gt;3. 尽量避免过多过常的创建Java对象&lt;/h2&gt;

&lt;p&gt;尽量避免在经常调用的方法，循环中new对象，由于系统不仅要花费时间来创建对象，而且还要花时间对这些对象进行垃圾回收和处理，在我们可以控制的范围内，最大限度的重用对象，最好能用基本的数据类型或数组来替代对象。&lt;/p&gt;

&lt;h2 id=&quot;final&quot;&gt;4. 尽量使用final修饰符&lt;/h2&gt;

&lt;p&gt;带有final修饰符的类是不可派生的。&lt;/p&gt;

&lt;p&gt;在Java核心API中，有许多应用final的例子，例如java.lang.String。为String类指定final防止了使用者覆盖length()方法。&lt;/p&gt;

&lt;p&gt;另外，如果一个类是final的，则该类所有方法都是final的。Java编译器会寻找机会内联（inline）所有的final方法（这和具体的编译器实现有关）。此举能够使性能平均提高50%。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;5. 尽量使用局部变量&lt;/h2&gt;

&lt;p&gt;调用方法时传递的参数以及在调用中创建的临时变量都保存在栈（Stack）中，速度较快。&lt;/p&gt;

&lt;p&gt;其他变量，如静态变量、实例变量等，都在堆（Heap）中创建，速度较慢。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;6. 尽量处理好包装类型和基本类型两者的使用场所&lt;/h2&gt;

&lt;p&gt;虽然包装类型和基本类型在使用过程中是可以相互转换，但它们两者所产生的内存区域是完全不同的，基本类型数据产生和处理都在栈中处理，包装类型是对象，是在堆中产生实例。&lt;/p&gt;

&lt;p&gt;在集合类对象，有对象方面需要的处理适用包装类型，其他的处理提倡使用基本类型。&lt;/p&gt;

&lt;h2 id=&quot;synchronizedsynchronize&quot;&gt;7. 慎用synchronized，尽量减小synchronize的方法&lt;/h2&gt;

&lt;p&gt;都知道，实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。&lt;/p&gt;

&lt;p&gt;synchronize方法被调用时，直接会把当前对象锁 了，在方法执行完之前其他线程无法调用当前对象的其他方法。&lt;/p&gt;

&lt;p&gt;所以synchronize的方法尽量小，并且应尽量使用方法同步代替代码块同步。&lt;/p&gt;

&lt;h2 id=&quot;stringbuilderstringbuffer&quot;&gt;8. 尽量使用StringBuilder和StringBuffer进行字符串连接&lt;/h2&gt;

&lt;p&gt;这个就不多讲了。&lt;/p&gt;

&lt;h2 id=&quot;finalize&quot;&gt;9. 尽量不要使用finalize方法&lt;/h2&gt;

&lt;p&gt;实际上，将资源清理放在finalize方法中完成是非常不好的选择，由于GC的工作量很大，尤其是回收Young代内存时，大都会引起应用程序暂停，所以再选择使用finalize方法进行资源清理，会导致GC负担更大，程序运行效率更差。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;10. 尽量使用基本数据类型代替对象&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String str = &quot;hello&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面这种方式会创建一个“hello”字符串，而且JVM的字符缓存池还会缓存这个字符串；&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String str = new String(&quot;hello&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此时程序除创建字符串外，str所引用的String对象底层还包含一个char[]数组，这个char[]数组依次存放了h,e,l,l,o&lt;/p&gt;

&lt;h2 id=&quot;hashmaparraylist&quot;&gt;11. 单线程应尽量使用HashMap、ArrayList&lt;/h2&gt;

&lt;p&gt;HashTable、Vector等使用了同步机制，降低了性能。&lt;/p&gt;

&lt;h2 id=&quot;hashmap&quot;&gt;12. 尽量合理的创建HashMap&lt;/h2&gt;

&lt;p&gt;当你要创建一个比较大的hashMap时，充分利用另一个构造函数
public HashMap(int initialCapacity, float loadFactor)
避免HashMap多次进行了hash重构,扩容是一件很耗费性能的事，在默认中initialCapacity只有16，而loadFactor是 0.75，需要多大的容量，你最好能准确的估计你所需要的最佳大小，同样的Hashtable，Vectors也是一样的道理。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;13. 尽量减少对变量的重复计算&lt;/h2&gt;

&lt;p&gt;如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for(int i=0;i&amp;lt;list.size();i++)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;应该改为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for(int i=0,len=list.size();i&amp;lt;len;i++)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;并且在循环中应该避免使用复杂的表达式，在循环中，循环条件会被反复计算，如果不使用复杂表达式，而使循环条件值不变的话，程序将会运行的更快。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;14. 尽量避免不必要的创建&lt;/h2&gt;

&lt;p&gt;如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A a = new A();
if(i==1){list.add(a);}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;应该改为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(i==1){
A a = new A();
list.add(a);}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;finally&quot;&gt;15. 尽量在finally块中释放资源&lt;/h2&gt;

&lt;p&gt;程序中使用到的资源应当被释放，以避免资源泄漏。&lt;/p&gt;

&lt;p&gt;这最好在finally块中去做。不管程序执行的结果如何，finally块总是会执行的，以确保资源的正确关闭。&lt;/p&gt;

&lt;h2 id=&quot;ab&quot;&gt;16. 尽量使用移位来代替’a/b’的操作&lt;/h2&gt;

&lt;p&gt;”/”是一个代价很高的操作，使用移位的操作将会更快和更有效&lt;/p&gt;

&lt;p&gt;如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int num = a / 4;
int num = a / 8;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;应该改为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int num = a &amp;gt;&amp;gt; 2;
int num = a &amp;gt;&amp;gt; 3;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;但注意的是使用移位应添加注释，因为移位操作不直观，比较难理解&lt;/p&gt;

&lt;h2 id=&quot;ab-1&quot;&gt;17.尽量使用移位来代替’a*b’的操作&lt;/h2&gt;

&lt;p&gt;同样的，对于’*‘操作，使用移位的操作将会更快和更有效&lt;/p&gt;

&lt;p&gt;如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int num = a * 4;
int num = a * 8;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;应该改为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int num = a &amp;lt;&amp;lt; 2;
int num = a &amp;lt;&amp;lt; 3;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;stringbuffer&quot;&gt;18. 尽量确定StringBuffer的容量&lt;/h2&gt;

&lt;p&gt;StringBuffer 的构造器会创建一个默认大小（通常是16）的字符数组。在使用中，如果超出这个大小，就会重新分配内存，创建一个更大的数组，并将原先的数组复制过来，再 丢弃旧的数组。&lt;/p&gt;

&lt;p&gt;在大多数情况下，你可以在创建 StringBuffer的时候指定大小，这样就避免了在容量不够的时候自动增长，以提高性能。&lt;/p&gt;

&lt;p&gt;如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;StringBuffer buffer = new StringBuffer(1000);  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-7&quot;&gt;19. 尽量早释放无用对象的引用&lt;/h2&gt;

&lt;p&gt;大部分时，方法局部引用变量所引用的对象 会随着方法结束而变成垃圾，因此，大部分时候程序无需将局部，引用变量显式设为null。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Public void test(){  
    Object obj = new Object();  
    ……  
    Obj=null;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面这个就没必要了，随着方法test()的执行完成，程序中obj引用变量的作用域就结束了。&lt;/p&gt;

&lt;p&gt;但是如果是改成下面：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Public void test(){  
    Object obj = new Object();  
    ……  
    Obj=null;  
    //执行耗时，耗内存操作；或调用耗时，耗内存的方法  
    ……  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这时候就有必要将obj赋值为null，可以尽早的释放对Object对象的引用。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;20. 尽量避免使用二维数组&lt;/h2&gt;

&lt;p&gt;二维数据占用的内存空间比一维数组多得多，大概10倍以上。&lt;/p&gt;

&lt;h2 id=&quot;split&quot;&gt;21. 尽量避免使用split&lt;/h2&gt;

&lt;p&gt;除非是必须的，否则应该避免使用split，split由于支持正则表达式，所以效率比较低，如果是频繁的几十，几百万的调用将会耗费大量资源，如果确实需 要频繁的调用split，可以考虑使用apache的StringUtils.split(string,char)，频繁split的可以缓存结果。&lt;/p&gt;

&lt;h2 id=&quot;arraylist--linkedlist&quot;&gt;22. ArrayList &amp;amp; LinkedList&lt;/h2&gt;

&lt;p&gt;一个是线性表，一个是链表，一句话，随机查询尽量使用ArrayList，ArrayList优于LinkedList，LinkedList还要移动指 针，添加删除的操作LinkedList优于ArrayList，ArrayList还要移动数据，不过这是理论性分析，事实未必如此，重要的是理解好2 者得数据结构，对症下药。&lt;/p&gt;

&lt;h2 id=&quot;systemarraycopy-&quot;&gt;23. 尽量使用System.arraycopy ()代替通过来循环复制数组&lt;/h2&gt;

&lt;p&gt;System.arraycopy() 要比通过循环来复制数组快的多&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;24. 尽量缓存经常使用的对象&lt;/h2&gt;

&lt;p&gt;尽可能将经常使用的对象进行缓存，可以使用数组，或HashMap的容器来进行缓存，但这种方式可能导致系统占用过多的缓存，性能下降，推荐可以使用一些第三方的开源工具，如EhCache，Oscache进行缓存，他们基本都实现了FIFO/FLU等缓存算法。&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;25. 尽量避免非常大的内存分配&lt;/h2&gt;

&lt;p&gt;有时候问题不是由当时的堆状态造成的，而是因为分配失败造成的。分配的内存块都必须是连续的，而随着堆越来越满，找到较大的连续块越来越困难。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;26. 慎用异常&lt;/h2&gt;

&lt;p&gt;当创建一个异常时，需要收集一个栈跟踪(stack track)，这个栈跟踪用于描述异常是在何处创建的。
构建这些栈跟踪时需要为运行时栈做一份快照，正是这一部分开销很大。&lt;/p&gt;

&lt;p&gt;当需要创建一个 Exception 时，JVM 不得不说：先别动，我想就您现在的样子存一份快照，所以暂时停止入栈和出栈操作。
栈跟踪不只包含运行时栈中的一两个元素，而是包含这个栈中的每一个元素。&lt;/p&gt;

&lt;p&gt;如果您创建一个 Exception ，就得付出代价。好在捕获异常开销不大，因此可以使用 try-catch 将核心内容包起来。
从技术上讲，您甚至可以随意地抛出异常，而不用花费很大的代价。
招致性能损失的并不是 throw 操作——尽管在没有预先创建异常的情况下就抛出异常是有点不寻常。
真正要花代价的是创建异常。&lt;/p&gt;

&lt;p&gt;幸运的是，好的编程习惯已教会我们，不应该不管三七二十一就抛出异常。&lt;/p&gt;

&lt;p&gt;异常是为异常的情况而设计的，使用时也应该牢记这一原则。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>在雨中</title>
   <link href="http://http://coolshell.info/blog/2014/06/15/in-the-rain.html"/>
   <updated>2014-06-14T17:05:13+00:00</updated>
   <id>/blog/2014/06/15/in-the-rain</id>
   <content type="html">&lt;p&gt;我的个人博客上线了．&lt;/p&gt;
</content>
 </entry>
 
 
</feed>